
#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Notes on creating spectral maps from Orion West slit spectra
#+AUTHOR: William Henney
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+PROPERTY: header-args    :exports both

* Weekly meetings


** [2016-03-04 Fri] 
+ Will is going to make figures of the isovelocity maps
  + Alba suggested showing pairs of maps, one annotated (or just annotations)
+ Alba is going to revise the positions of the sample regions for bowshock and background
  + Take bg either side of shock where possible
  + Use slit as close to perpendicular to shock as possible
  + Estimate uncertainty in background
+ Alba will revise line color choice in Figure 6
  + Maybe use histogram for the observed profile

** [2016-03-08 Tue]
+ We discussed the different options for figure 6 that Alba had generated
  + We decided to use the thin blue lines for the individual components
  + For the observed profile, Will prefers the steps
    + But Alba needs to adjust it so that the data points are at the step centers, not edges
    + Also invesigate if the steps can be shown as a filled area (light gray) with no outline
+ We discussed the BG subtraction for the red bow shock profiles
  + Avoid the region around LL2 because the LL2 bowshock dominates the spectra
  + Use only those BG regions that are "outside" the bow shock where possible
  + Try to construct a mean +/- variation BG profile from various slits and apply it to all spectra in a given region
  + For the southern bow shock arcs, use BG from horizontal slits
+ Will still needs to do the isovelocity figures



** [2016-03-15 Tue]
+ Alba has redone the fits to the red bow shocks, taking larger sample regions
  + All are now fine except for the NW shock, where she needs to use a BG sample to the W of the source sample, even though the blue knots there may make it impossible to do a good subtraction on the blue side of the line
+ Most of the red bow shock samples have peak velocities close to 25 km/s heliocentric
  + This is close to the systemic velocity of the star cluster and molecular cloud
  + One explanation could be that the bow shocks are moving in the plane of the sky
  + But since we are looking at the limb-brightened edge of a spatially resolved bow shock, the relative radial velocity should always be roughly zero, even if the bow shock axis is inclined to the plane of the sky
+ We are provisionally accepting Will's brown color scheme for nebular core in the figure that shows the slits - maybe revisit later
+ Will still needs to finish the isovelocity image annotations
  + Alba will send the final sample regions used for the knots



** [2016-03-29 Tue]

** [2016-04-05 Tue]
+ Task for Will: write to Tere about correction to 6716/31 ratio
+ Alba: will investigate knots in [S II] and [O III] spectra
  + [O III]: only if we see some emission that is not also in Ha
  + [S II]: calculate knot and nebula densities once we have the photometric correction to the 6716/6731 ratio

** [2016-04-08 Fri]
+ Will has to read latest draft
+ Will should look at [O III] calibration
+ Alba will measure the (uncalibrated) line ratios for [O III] and [S II], with the idea of fixing the photometric calibration later 



** [2016-04-12 Tue]
+ We measured the position of one of the [O III] slits
  + spec228-oiii.fits has delta of 61.7 pixels between image and slit spectrum
  + With luck, the same solution will work for the [S II] spectrum taken at the same time
+ In the [O III] slit from the LL1 position, there is a blue knot in the far north
  + Alba to check if this corrsponds to one of our identified knots
+ We still haven't found the line ration correction factors
  + Will must carry on looking

** [2016-04-15 Fri]
+ We now have the correction factors for the 6716/6731 ratio
+ We also have a correction factor for the [O III]/Ha ratio
  + But we don't have a clear idea of how we can do a reliable calibration of the [OÂ III] line
+ We extended the table of slits to include four sii slits and two oiii slits
+ We modified the program =slit-calibration.py= so it can deal with spectra that are not Ha+NII
  + But in such cases it misses out the flux calibration part
+ We have run the program on the sii and oiii slits, so we now have FITS files in the homogeneous 3D format that the other programs expect
+ Immediate remaining tasks:
  + [X] *Will* Re-try the background fit and subtraction
  + [ ] *Will* Run =spec_augment_wcs.py= on the sii and oiii spectra to put them in heliocentric velocity and map pixels
  + [ ] *Alba* Finish analysing the knots in [S II] and [O III]


* Proper motions for red bow
+ We will measure some proper motions by hand


** First epoch is
[[file:~/Work/OrionTreasury/acs/hlsp_orion_hst_acs_strip1r_f775w_v1_drz.fits]]

** Second epoch is
[[file:~/Dropbox/OrionTreasury2015/jcol09010_drc.fits]]

** Aligning the two epochs 
+ We will adjust the WCS of the second epoch so that a star is aligned

+ Table of differences in RA, Dec after manual alignment
|------+------------+------------+-----+-----------+-----------+---------|
| 2004 |  83.624942 | -5.4214582 | fk5 | 11154.632 | 4004.9834 | 201.042 |
| 2015 |  83.624713 | -5.4213777 | fk5 | 2832.6278 | 4385.8105 |  218.56 |
|------+------------+------------+-----+-----------+-----------+---------|
|      | -0.0002290 |  0.0000805 |     |           |           |         |
#+TBLFM: @3$2..@3$3=@2 - @1;f7
+ The last row above gives the differences, which must be subtracted from the CRVAL of the second epoch
  |  83.6107386987505 | -0.0002290 |  83.610968 |
  | -5.41305277159652 |  0.0000805 | -5.4131333 |
  #+TBLFM: $3=$1 - $2

+ Corrected WCS is in [[file:~/Dropbox/OrionTreasury2015/jcol09010_drc_fix.wcs]]

* Finishing the paper

** [2017-01-18 Wed] Summary of where we are and what needs to be done

** TODO [2/3] Things to do for Alba [2017-01-18 Wed]
+ [X] Region files for new knots
  + All are in [[file:Will-Regions-2016-12/]]
  + [X] Boxes for PV images
    + Each box is a single velocity feature in a single slit
      + So several boxes may contribute to each knot
    + There is a separate region file for each slit
    + Original ones have names such as
      + pvboxes-YY1401-2013-02-024.reg
    + They were done by hand in [[id:85778B48-192C-4B4F-B244-E935CBA70FD9][Put PV boxes by hand on to the PV spectra]]
    + Final ones have names such as
      + pvboxes-knots-XX1141-2007-01b-2061.reg
    + They have the knot ID for each box in OW coordinate format, which was done in [[id:767A6944-B23D-40C4-A163-9EBD9D315C0D][Retrofit knot assignments to the PV boxes]]
  + [X] Bars for the images
    + There is one-to-one correspondence between the bars and the boxes
    + Original files were generated automatically in [[id:3D919406-53BF-4DCF-935A-DBF9AFBA3DA6][Automatically construct bars for the maps]]
    + One file with all features, plus one for each velocity class:
      + bars-from-boxes-all.reg
      + bars-from-boxes-fast.reg
      + bars-from-boxes-slow.reg
      + bars-from-boxes-ultra.reg
    + Then in [[id:E39383D1-8738-4838-9845-CB07431C47BC][Combine bars by hand into knots]] they are sorted into knots, which are indicated as DS9 region groups, saved in
      + bars-from-boxes-fast-groups.reg
      + bars-from-boxes-slow-groups.reg
      + bars-from-boxes-ultra-groups.reg
    + Note that the knots in the above files have only a sequential ID, such as =Ultra 006 (-80)=
    + All the above have coordinates in pixels (IMAGE frame), but for some uses (for example, with aplpy) it is necessary to have celestial coordinates (WCS frame), so we have also written 
      + bars-from-boxes-fast-groups-wcs.reg
      + bars-from-boxes-slow-groups-wcs.reg
      + bars-from-boxes-ultra-groups-wcs.reg
  + [X] Knots for the images
    + These are polygons that were created to envelope the bars by routines in [[id:D2C4A57A-352D-4EE3-8A8E-33A4DA9B8D34][Utility functions for boxes and bars]]. In brief: 
      + Find convex hull of all bars in knot
        + This is done on the 2048x2048 pixel image
      + Dilate it by disk of 4 pixels diameter so it is not too spindly
      + Convert the shape to vector polygon
      + Simplify the polygon so it only has a handful of vertices
      + Find coordinate center of knot and convert to an OW-style ID
      + Save as DS9 region
    + There is one file for each velocity class (these are in IMAGE coordinates)
      + knots-fast.reg
      + knots-slow.reg
      + knots-ultra.reg
    + And we also have versions in WCS coordinates
      + knots-fast-wcs.reg
      + knots-slow-wcs.reg
      + knots-ultra-wcs.reg

+ [X] Table of knot properties
  + [[file:Knot-Fits-Final/all-knots-ha-table.tab]]
  + [[file:Knot-Fits-Final/all-knots-nii-table.tab]]
  + These are space-separated ascii tables with commented header of column names
  + I also have fits table and VOTable versions of the same
+ [ ] Figures of my new stuff



** Will comments [2016-10-12 Wed]

*** TODO Red bows
+ [ ] *Alba* Fig 6 - also show the nebular component that was subtracted. 


*** TODO Physical conditions in knots
+ We can do a lot more analysis of the few data that we have for the majority of knots:
  1. Plot V([N II]) vs V(Ha)
     + In principle, they should be equal
     + The dispersion about a straight line could be taken as an indication of the uncertainty in the velocities
  2. Plot W(Ha) vs W([N II])
     + Check that it is consistent with a constant temperature
     + Is the temperature any different from the nebula (should not be)
     + I already did this in [[id:81DFDBCE-233B-48D1-8B85-5C77BCF85F99][Plot Ha width versus {N II} width]]
  3. Plot [N II]/Ha for the knots vs the nebula
     - Is the behaviour that we see in Fig 9 typical of the other knots?



** [4/9] Alba message [2016-10-10 Mon]
*** TODO Sect. 1: 
: escribir la introducciÃ³n. Me pongo con esto?

*** DONE Sect 2.2: 
CLOSED: [2016-10-11 Tue 09:53]
: por mi no ponemos la figura 2, no me parece tan importante, quÃ©
: piensas?

De acuerdo.
 
*** DONE Sect 3:
CLOSED: [2016-10-11 Tue 11:40]

: -Hay que definir el WW. Si quieres lo hago yo aunque no sÃ© quÃ© tomar cÃ³mo
: referencia porque no hay nada cerca conocido. Lo describo y ya estÃ¡.

#+BEGIN_LaTeX
The Western Wall is is a sharp step function in the nebula
surface brightness, visible as the vertically oriented bright green
feature on the right hand side of Fig.~\ref{fig:4}.  The southern
portion of the Wall is one of the most prominent large scale features
visible in direct images of the outskirts of the Orion Nebula,
extending roughly 2.5~arcmin in the N--S direction from 4276-751 to
4270-544, with a slight concavity that faces East towards the
Trapezium.  On the East side of the Wall is a region of low
H\(\alpha\) surface brightness, which increases by a factor of 2--3
over a scale of \(\approx 10\)~arcsec at the position of the wall to
give a thick plateau that extends \(\sim 1\)~arcmin to the West.

At the North end of this portion of the Wall is a bright Ionized Clump
of emission, centered on 4283-521 and with diameter of \(\approx
10\)~arcsec.  There are indications that the wall extends further
North than this clump, but it becomes confused with other structures
superimposed on it.

TALK ABOUT VELOCITIES.  O'Dell (2015) classified it as a shock, but it does not appear to be moving. 
#+END_LaTeX



*** DONE Fig 5: 
CLOSED: [2016-10-12 Wed 23:17]
: -Fig 5: mapa isovelocidades en rangos rojos donde se muetran los 4-5 bow
: shocks descritos. Te mando el archivo bowshocks_arcs.reg.

+ [X] WILL :: Make a figure showing the Red arcs superimposed on the WFI image

*** TODO Sect 4: 

: Fig 4: mapa en rangos azules+finding chart con los blue knots. Te
: adjunto blue_knots_final.reg con los knots (este ya te lo habÃ­a mandado)

+ [ ] WILL :: Finding chart for blue knots
  + With or without image as background?
    + Jane prefers not

*** DONE Sect 4.1: 
CLOSED: [2016-10-11 Tue 11:58]

: en el Ãºltimo pÃ¡rrafo hablo del knot 4261-352 (en el que solo se
: mide [SII]6731), revisa si puedes lo que digo para completarlo.

Simmilar to HH 201 and other Orion Bullets?

*** TODO Sect. 5.1: 
: discusiÃ³n de los red bow shocks. Con la informaciÃ³n que tenemos
: como que no hay mucho que discutir. Alguna idea?

+ Largest bow shocks seen in Orion Nebula
  + Analogy with giant bow shock of HH1 and other famous HH objects
  + John Bally 1997
+ Calculate dynamic time
  + But this needs the plane of sky velocity
  + [ ] Make a rough estimate of the proper motions
+ Also estimate mass loss rate?
+ What is the origin of this flow?
  + Axis is aligned with HH 269, but it has the wrong radial velocity
    + HH 269 is blueshifted
  + [ ] Are there any redshifted flows coming out of the core of the nebula in this general direction?

*** TODO Sect 5.2:  
: al final encontraste modelos de choques que podamos poner en
: el diagrama de diagnÃ³stico? El pÃ¡rrafo del final es un resumen para
: nosotros, lo reharÃ© cuando terminemos lo de los choques

No. The shock models are now deferred until a later paper.

*** TODO Sect 5.3: 
: estÃ¡ sin terminar porque no tengo como mucho quÃ© decir. Es mÃ¡s
: descripciÃ³n que discusiÃ³n. La Fig 10 es provisional, solo para que veas
: quÃ© describo. Te mando los archivos con los arcos y jets y los knots
: asociados (arcs_knots_all. reg, jetD_knots.reg y jetH_knots.reg).

+ Jet D ::
  + Could be an extension of the blue-shifted jet from LL2
    + Compare velocities
  + Also may be linked with Arc D and some of the knots

*** Raw message
: Hola Will,
: 
: hace mucho que no nos vemos. Estoy un poco atascada con el artÃ­culo, hay
: bastante escrito pero es necesario terminar la discusiÃ³n.
: 
: 
: 
: Te mando la Ãºltima versiÃ³n que tengo. AquÃ­ te comento quÃ© cosas hay que
: hacer:
: 
: Sect. 1: escribir la introducciÃ³n. Me pongo con esto?
: 
: Sect 2.2: por mi no ponemos la figura 2, no me parece tan importante, quÃ©
: piensas?
: 
: Sect 3:
: -Hay que definir el WW. Si quieres lo hago yo aunque no sÃ© quÃ© tomar cÃ³mo
: referencia porque no hay nada cerca conocido. Lo describo y ya estÃ¡.
: -Fig 5: mapa isovelocidades en rangos rojos donde se muetran los 4-5 bow
: shocks descritos. Te mando el archivo bowshocks_arcs.reg.
: 
: Sect 4: Fig 4: mapa en rangos azules+finding chart con los blue knots. Te
: adjunto blue_knots_final.reg con los knots (este ya te lo habÃ­a mandado)
: 
: Sect 4.1: en el Ãºltimo pÃ¡rrafo hablo del knot 4261-352 (en el que solo se
: mide [SII]6731), revisa si puedes lo que digo para completarlo.
: 
: Sect. 5.1: discusiÃ³n de los red bow shocks. Con la informaciÃ³n que tenemos
: como que no hay mucho que discutir. Alguna idea?
: 
: Sect 5.2:  al final encontraste modelos de choques que podamos poner en
: el diagrama de diagnÃ³stico? El pÃ¡rrafo del final es un resumen para
: nosotros, lo reharÃ© cuando terminemos lo de los choques
: 
: Sect 5.3: estÃ¡ sin terminar porque no tengo como mucho quÃ© decir. Es mÃ¡s
: descripciÃ³n que discusiÃ³n. La Fig 10 es provisional, solo para que veas
: quÃ© describo. Te mando los archivos con los arcos y jets y los knots
: asociados (arcs_knots_all. reg, jetD_knots.reg y jetH_knots.reg).
: 
: 
: Bueno, cuando te lo leas ya me dices quÃ© piensas.
: 
: Saludos




* Classification of knots in systems

** Individual features in the blue knot systems

*** Color coding by velocity
|  -10 | #e82 | orange      |
|  -20 | #ca2 | gold        |
|  -30 | #de2 | yellow      |
|  -40 | #8d2 | apple green |
|  -50 | #2d8 | mint        |
|  -55 | #6a8 | gray-green  |
|  -60 | #2c9 | turquoise   |
|  -65 | #2aa | sky blue    |
|  -70 | #29c |             |
|  -75 | #28d |             |
|  -80 | #44d |             |
|  -90 | #82d |             |
|  -95 | #a2c |             |
| -100 | #a2a |             |



*** Terminal zones
+ I have identified 7 zones
  + Labelled A to G, going from N to S
+ They are all regions of "spikes" or low-velocity knots
+
*** Knots in amongst the red bows
+ Alba Knot 4331-453 is part of larger structure with complicated  kinematic structure
  + Blue-shifted velocities increase 
    + from -10 at E side (new knot 4345-505)
      + This extends over at least 20 arcsec in the N-S direction
      + But the N boundary is not constrained since we run out of slits
      + May be related with boundary of big blue sheet that starts about 10 arcsec to the E of it and covers the S part of the LL2 slits
    + to -30 at W side (4331-453 proper)
  + With red-shifted spike (+40) at new knot 4339-456
    + This is only red-shifted spike that I have found (not associated with a brightness peak, which doesn't really count)
+ These are associated with knotty emission seen in the ACS images
  + Located just to E of a foreground globule (seen in extinction, scattered continuum, with Ha skin)
+ May also be related with knot 4921-429 to make a low projected-velocity flow
  + But if so, it is not clear in which direction the flow is going: E or W?
+ Alternatively, may be just phoroevaporation flows - but would that really give -30 and +40 km/s?
** TODO [#C] Include the other LL1 slits
+ Just for completeness
+ And to see if there is anything interesting in the south
+ Steps to achieve:
  1) Add the spectra to [[id:38EBF0CA-1CA6-4420-A9D8-F784FEB57BCC][Table of all slits]]
  2) [[id:06237754-EC3C-476C-8DA2-AA881CFB0410][Run slit-calibration.py]]
     - [[id:1A6F05F0-32BA-4906-9C0D-27A8B7D5BD69][Use command line argument to restrict which datasets are processed]]
     - The main pain will be finding the y-offset along the slits
  3) Everything else should be automatic
  4) Then re-generate all the maps I suppose
** TODO New methodology for finding knots

+ [2016-11-16 Wed] Started on this, but it is a tedious job
+ [2016-12-02 Fri 12:30] Re-started with refined methodology:
  + Put boxes on each slit spectrum, then all the rest is automatic
*** New method: boxes \to bars \to knots
**** DONE Put PV boxes by hand on to the PV spectra
CLOSED: [2016-12-02 Fri 22:58]
:PROPERTIES:
:ID:       85778B48-192C-4B4F-B244-E935CBA70FD9
:END:
+ Make them more compact than before to better isolate the line
+ No labels or anything
+ Which are finished?
  + [X] vert
  + [X] horiz
  + [X] ll2
  + [X] ll1
  + [X] east
***** Utility scripts for moving regions
:PROPERTIES:
:header-args:shell: :results silent
:END:

#+name: save-pvboxes
#+BEGIN_SRC shell :var line="ha" slits="vert"
REGDIR=Will-Regions-2016-12
DS9=${line}-${slits}
prefix=$(basename $(xpaget $DS9 file) -${line}-vhel.fits)
regfile=pvboxes-$prefix.reg
xpaset -p $DS9 regions save $PWD/$REGDIR/$regfile
#+END_SRC

#+name: load-pvboxes
#+BEGIN_SRC shell :var line="nii" slits="vert"
REGDIR=Will-Regions-2016-12
DS9=${line}-${slits}
prefix=$(basename $(xpaget $DS9 file) -${line}-vhel.fits)
regfile=pvboxes-$prefix.reg
xpaset -p $DS9 regions delete all
xpaset -p $DS9 regions load $PWD/$REGDIR/$regfile
#+END_SRC

#+name: load-all-pvboxes
#+BEGIN_SRC shell :var line="ha" slits="vert"
  REGDIR=Will-Regions-2016-12
  DS9=${line}-${slits}
  for i in $(xpaget $DS9 frame all); do
      sleep 1
      xpaset -p $DS9 frame $i
      prefix=$(basename $(xpaget $DS9 file) -${line}-vhel.fits)
      regfile=pvboxes-knots-$prefix.reg
      xpaset -p $DS9 regions delete all
      xpaset -p $DS9 regions load $PWD/$REGDIR/$regfile
  done
#+END_SRC

#+name: convert-pvboxes
#+BEGIN_SRC shell :var line="ha" slits="vert"
  REGDIR=Will-Regions-2016-12
  DS9=${line}-${slits}
  for i in $(xpaget $DS9 frame all); do
      sleep 1
      xpaset -p $DS9 frame $i
      prefix=$(basename $(xpaget $DS9 file) -${line}-vhel.fits)
      regfile=pvboxes-$prefix.reg
      sleep 1
      xpaset -p $DS9 regions delete all
      xpaset -p $DS9 regions load $PWD/$REGDIR/$regfile
      xpaset -p $DS9 regions select all
      xpaset -p $DS9 regions system image
      xpaset -p $DS9 regions select none
      xpaset -p $DS9 regions save $PWD/$REGDIR/$regfile
  done
#+END_SRC
****** H\alpha \to [N II]
#+call: save-pvboxes(line="ha", slits="east")
#+call: load-pvboxes(line="nii", slits="east")

****** [N II] \to H\alpha
#+call: save-pvboxes(line="nii", slits="east")
#+call: load-pvboxes(line="ha", slits="east")

****** Convert to image coords
#+call: convert-pvboxes(line="ha", slits="horiz")
#+call: convert-pvboxes(line="ha", slits="vert")
#+call: convert-pvboxes(line="ha", slits="ll2")
#+call: convert-pvboxes(line="ha", slits="ll1")
#+call: convert-pvboxes(line="ha", slits="east")

****** Load all the boxes at once
:PROPERTIES:
:ID:       78DBA253-4856-4EE6-848F-26B2C32E4740
:END:
#+call: load-all-pvboxes(line="ha", slits="horiz")
#+call: load-all-pvboxes(line="ha", slits="vert")
#+call: load-all-pvboxes(line="ha", slits="ll2")
#+call: load-all-pvboxes(line="ha", slits="ll1")
#+call: load-all-pvboxes(line="ha", slits="east")

**** DONE Automatically construct bars for the maps
CLOSED: [2016-12-08 Thu 13:01]
:PROPERTIES:
:ID:       3D919406-53BF-4DCF-935A-DBF9AFBA3DA6
:END:
+ [X] Write colored bars
+ [X] Split them up into the 3 velocity classes
  + We have a small overlap between the classes:
    + -45 \to -35 are in both fast and slow
    + -80 \to -70 are in both ultrafast and fast

#+BEGIN_SRC python :tangle boxes-to-bars.py
  import pyregion
  from astropy.io import fits
  from astropy.wcs import WCS
  import glob
  import os
  import seaborn as sns

  DEBUG = True
  REGION_DIR = 'Will-Regions-2016-12'
  FITS_DIR = 'Calibrated/BGsub'
  BOX_PATTERN = 'pvboxes-*.reg'
  BAR_HEADER = '''# Region file format: DS9 version 4.1
  global color=green dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
  image
  '''
  BAR_FMT = ('line({x1:.1f},{y1:.1f},{x2:.1f},{y2:.1f}) # '
             + 'line=0 0 color={color} width={width} '
             + 'text={{{v:d}}} dash={dashed}')
  BAR_FILE = 'bars-from-boxes.reg'

  BRIGHT_LEVELS = [0.001, 0.003, 0.009, 0.027]
  def find_width(b, hdu):
      shapelist = pyregion.ShapeList([b])
      m = shapelist.get_mask(hdu=hdu)
      box_bright = hdu.data[m].mean()
      width = 1
      dashed = 1
      for ib, blevel in enumerate(BRIGHT_LEVELS):
          if box_bright >= blevel:
              width = ib + 1
              dashed = 0
      return width, dashed


  VMIN, VMAX = -110.0, 0.0
  NC = int(VMAX - VMIN) + 1
  rgblist = sns.hls_palette(NC)
  def find_color(v):
      ic = int(VMAX - v)
      ic = max(0, min(ic, NC-1))
      r, g, b = rgblist[ic]
      return '#{:01x}{:01x}{:01x}'.format(int(16*r), int(16*g), int(16*b))


  box_files = glob.glob(os.path.join(REGION_DIR, BOX_PATTERN))

  VLIMITS = {
      'all': [-200.0, 200.0],
      'slow': [-45.0, 0.0],
      'fast': [-80.0, -35.0],
      'ultra': [-150.0, -70.0]}

  bar_lists = {'all': [], 'slow': [], 'fast': [], 'ultra': []}
  for box_file in box_files:
      # Each box_file has the boxes for one slit
      slit_boxes = pyregion.open(box_file)
      # Also open the fits file associated with this slit
      slit_name = box_file.replace(
          os.path.join(REGION_DIR, 'pvboxes-'), '').replace('.reg', '')
      fits_name = os.path.join(FITS_DIR, slit_name) + '-ha-vhel.fits'
      hdu, = fits.open(fits_name)
      # Get the normal WCS together with the 'V' alternative WCS
      w = WCS(hdu)
      ww = WCS(hdu, key='V')
      # Check if horizontal or vertical
      is_horizontal = slit_name.startswith('YY')
      if DEBUG:
          print('Extracting boxes from', slit_name)
      for b in slit_boxes:
          # Check that it really is a box and that coordinates are in
          # the correct format
          if b.name == 'box' and b.coord_format == 'image':
              # Extract slit pixel coordinates
              # ii is along velocity axis
              # jj is along slit length
              ii, jj, dii, djj, angle = b.coord_list
              # Find the start/end coordinate along the slit
              jj1, jj2 = jj - 0.5*djj, jj + 0.5*djj
              # Then use alt WCS to find velocity plus both x and y
              [v, _], [x1, x2], [y1, y2] = ww.all_pix2world(
                  [ii, ii], [jj1, jj2], [0, 0], 0)
              # Convert velocity from m/s -> km/s
              v /= 1000.0

              width, dashed = find_width(b, hdu)
              color = find_color(v)

              bar_region = BAR_FMT.format(
                  x1=x1, y1=y1, x2=x2, y2=y2,
                  v=int(v), width=width, dashed=dashed, color=color)

              for vclass, (v1, v2) in VLIMITS.items():
                  if v1 <= v <= v2:
                      bar_lists[vclass].append(bar_region)


  for vclass, bar_list in bar_lists.items():
      bar_file = BAR_FILE.replace('.reg', '-' + vclass + '.reg')
      with open(os.path.join(REGION_DIR, bar_file), 'w') as f:
          f.write(BAR_HEADER + '\n'.join(bar_list))
#+END_SRC

#+BEGIN_SRC shell :results output verbatim
python boxes-to-bars.py 
#+END_SRC

#+RESULTS:
#+begin_example
Extracting boxes from XX0430-2007-01-054
Extracting boxes from XX0443-2007-01-067
Extracting boxes from XX0447-2007-01-072
Extracting boxes from XX1141-2007-01b-2061
Extracting boxes from XX1154-2007-01b-2037
Extracting boxes from XX1156-2006-02-318
Extracting boxes from XX1162-2006-02-260
Extracting boxes from XX1166-2006-02-270
Extracting boxes from XX1170-2006-02-276
Extracting boxes from XX1176-2006-02-281
Extracting boxes from XX1180-2006-02-286
Extracting boxes from XX1182-2006-02-291
Extracting boxes from XX1189-2006-02-296
Extracting boxes from XX1189-2007-01b-2041
Extracting boxes from XX1197-2006-02-303
Extracting boxes from XX1204-2007-01b-2045
Extracting boxes from XX1218-2007-01b-2049
Extracting boxes from XX1232-2007-01b-2053
Extracting boxes from XX1251-2007-01b-2057
Extracting boxes from XX1259-2006-02-313
Extracting boxes from XX1389-2010-01-078
Extracting boxes from XX1523-2010-01-202
Extracting boxes from XX1540-2010-01-124
Extracting boxes from XX1549-2010-01-206
Extracting boxes from XX1557-2010-01-133
Extracting boxes from XX1558-2010-01-128
Extracting boxes from XX1568-2010-01-210
Extracting boxes from XX1575-2010-01-137
Extracting boxes from XX1585-2010-01-214
Extracting boxes from XX1595-2010-01-145
Extracting boxes from XX1601-2010-01-248
Extracting boxes from XX1609-2010-01-219
Extracting boxes from XX1616-2010-01-157
Extracting boxes from XX1620-2010-01-236
Extracting boxes from XX1633-2010-01-240
Extracting boxes from XX1646-2010-01-244
Extracting boxes from XX1656-2010-01-252
Extracting boxes from YY0936-2013-02-165
Extracting boxes from YY0955-2013-02-169
Extracting boxes from YY0971-2013-02-237
Extracting boxes from YY1000-2013-02-232
Extracting boxes from YY1019-2013-02-226
Extracting boxes from YY1058-2013-02-149
Extracting boxes from YY1068-2013-02-154
Extracting boxes from YY1085-2013-02-159
Extracting boxes from YY1112-2013-02-033
Extracting boxes from YY1120-2013-02-029
Extracting boxes from YY1287-2013-12-116
Extracting boxes from YY1308-2015-02-0003
Extracting boxes from YY1312-2013-12-102
Extracting boxes from YY1314-2013-12-086
Extracting boxes from YY1401-2013-02-024
#+end_example

**** DONE Combine bars by hand into knots
CLOSED: [2016-12-10 Sat 18:25]
:PROPERTIES:
:ID:       E39383D1-8738-4838-9845-CB07431C47BC
:END:
+ Knots will have an ellipse representation for plotting
  + And color indicating velocity as before
+ But the boundaries can be more irregular

***** DONE Use groups in DS9
CLOSED: [2016-12-10 Sat 13:00]
+ Procedure to make a new group
  1. Select the bars that we want in the group (shift click)
  2. Choose =Region->New Group= from menu
  3. Pattern for group name is "Fast 001 (-70)"
     - Velocity rounded to nearest 10
     - We will construct the coordinate names automatically later
+ [X] Also, consider the overlap ranges and assign each group of bars to one  velocity class or the other
  + Delete the bars from the unwanted velocity class
+ [X] First pass at asigning to knots
+ [X] Check for orphan bars
  + Look for lines without the word "tag"
  + =grep -nH -v tag *-groups.reg=
+ [X] Check for bars assigned to multiple knots
  + Look for lines with more than one "tag"
  + =grep -nH -e 'tag.*tag' *-groups.reg=

**** Utility functions for boxes and bars
:PROPERTIES:
:header-args: :tangle  boxbar_utils.py :eval no
:ID:       D2C4A57A-352D-4EE3-8A8E-33A4DA9B8D34
:END:

Load an enormous long list of 3rd party libraries
#+BEGIN_SRC python
  import os
  import glob
  import numpy as np
  import pyregion
  import skimage
  import skimage.morphology
  import skimage.draw
  import rasterio
  import rasterio.features
  import shapely
  import shapely.geometry
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy import units as u
  from astropy.coordinates import SkyCoord
#+END_SRC

Replace the # signs in the color specifications, since pyregion does not like it
#+BEGIN_SRC python
  def load_regions(region_file):
      with open(region_file) as f:
          region_string = f.read()
      # Workaround for bug in pyregion.parse when color is of form '#fff'
      region_string = region_string.replace('color=#', 'color=')
      regions = pyregion.parse(region_string)
      return regions
#+END_SRC

Extract the knot assignment from the =tag= field of each bar, so that we have a dict of knots, with each entry consisting of a list of (x1, y1, x2, y2) for each bar
#+BEGIN_SRC python
  def sort_bars_into_knots(shapelist):
      """Make a dict of knots, each with a list of bar parameters"""
      knots = {}
      for shape in shapelist:
          if shape.name == 'line' and shape.coord_format == 'image':
              _, shape_dict = shape.attr
              tags = shape_dict['tag']
              assert len(tags) == 1, 'Each bar should belong to one knot only'
              for knot_id in tags:
                  if not knot_id in knots:
                      knots[knot_id] = {'coords': [], 'width': [], 'vel': []}
                  knots[knot_id]['coords'].append(shape.coord_list)
                  knots[knot_id]['width'].append(int(shape_dict['width']))
                  knots[knot_id]['vel'].append(int(shape_dict['text']))
      return knots
#+END_SRC

+ Series of routines that create an image mask that encloses all the bars in a given knot. 
+ We use the convex hull, which is a bit big in some cases, where the mask outline is irregular
  + But is hard to see how that could be improved
+ We use a dilation with a disk to ensure that the knot width is always at least 4 pixels

#+BEGIN_SRC python
  MAP_SHAPE = 2048, 2048
  def blank_mask(shape=MAP_SHAPE):
      """Make a blank mask"""
      mask = np.zeros(MAP_SHAPE, dtype=bool)
      return mask


  def paint_line_on_mask(x1, y1, x2, y2, mask):
      """Paint a single line on an image mask"""
      # Draw line between endpoints
      # (skimage always puts rows before columns)
      rr, cc = skimage.draw.line(y1, x1, y2, x2)
      mask[rr, cc] = True
      return mask


  def nint(x):
      """Nearest integer value"""
      return int(x + 0.5)


  def find_hull_mask(line_coord_list, min_size=4.0):
      """Given a list of line regions return an image mask of enclosing hull"""
      # Start with all blank
      mask = blank_mask()
      for x1, y1, x2, y2 in line_coord_list:
          # Add on each bar
          mask = paint_line_on_mask(nint(x1), nint(y1), nint(x2), nint(y2), mask)
      # Find the convex hull that encloses all the bars
      mask = skimage.morphology.convex_hull_image(mask)
      if min_size > 0.0:
          selem = skimage.morphology.disk(min_size/2)
          mask = skimage.morphology.dilation(mask, selem=selem)
      return mask

#+END_SRC

+ Now take that image mask and turn it back into a vector shape
+ The =rasterio= routine produces a shape with many vertices that follows all the corners of the individual pixels
+ We then use =shapely= to simplify the shape
#+BEGIN_SRC python
  def vector_polygon_from_mask(mask, tolerance=2):
      """Find vertices from a polygonal image mask r
      Return vertices as two arrays: x, y"""
      # Use rasterio to get corners of polygon
      shapes_generator = rasterio.features.shapes(mask.astype(np.uint8), mask=mask)
      # There should be only one of them, and we throw away the image value
      shape_dict, _ = next(shapes_generator)
      # Now import it into shapely (note that asPolygon does not work)
      polygon = shapely.geometry.asShape(shape_dict)
      # And simplify the boundary 
      boundary = polygon.boundary.simplify(tolerance)
      # Return array of x values, array of y values
      return boundary.xy

#+END_SRC


+ Convert the polygon vertex coordinates to a polygon region that can be read by DS9
#+BEGIN_SRC python
  def polygon_region_string(x, y, color=None, text=None):
      """Return pyregion polygon region as string"""
      coords = []
      for xx, yy in zip(x, y):
          coords.extend([xx, yy])
      string = 'polygon({})'.format(','.join(['{:.1f}'.format(v) for v in coords]))
      string += ' # '
      if color is not None:
          string += 'color={{{}}} '.format(color)
      if text is not None:
          string += 'text={{{}}} '.format(text)
      return string
    
#+END_SRC

+ Put together all the previous routines in order to translate the bar regions into knot regions
  + Now we set the label to the coordinate ID determined below
#+BEGIN_SRC python
  BAR_REGION_HEADER = """# Region file format: DS9 version 4.1
  global color=yellow dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
  image
  """

  def convert_bars_to_knots(bar_region_file, knot_region_file):
      """Write DS9 region file of polygonal knots

      The knots enclose various bars, which are read from another region
      file in which each bar is tagged with the knot that it belongs to

      """

      bars = load_regions(bar_region_file)
      knots = sort_bars_into_knots(bars)
      coord_ids = find_knot_coord_ids(knots)
      region_strings = []
      for knot_id, knot_data in knots.items():
          m = find_hull_mask(knot_data['coords'])
          x, y = vector_polygon_from_mask(m)
          region_strings.append(polygon_region_string(
              x, y, text=coord_ids[knot_id]))
      with open(knot_region_file, 'w') as f:
          f.write(BAR_REGION_HEADER + '\n'.join(region_strings))
#+END_SRC

+ Find a coordinate ID for each knot, with two parts
  1. OW coordinate, such as 4235-645
  2. Nominal velocity to nearest 5 km/s
#+BEGIN_SRC python

  def radec2ow(ra, dec):
      """Implement the O'Dell & Wen coordinate designation

      Note (G1): Sources identified as <[RRS2008] NNNN-NNNN> in Simbad:
           ,* NNNN-NNN  : MSSs-MSS   (position: 5 3M SS.s -5 2M SS)
           ,* NNN-NNN   : SSs-MSS    (position: 5 35 SS.s -5 2M SS)
           ,* NNN-NNNN  : SSs-MMSS   (position: 5 35 SS.s -5 MM SS)
           ,* NNNN-NNNN : MSSs-MMSS  (position: 5 3M SS.s -5 MM SS)
      """
      c = SkyCoord(ra, dec, unit='deg')
      assert c.ra.hms.h == 5.0
      assert abs(c.ra.hms.m - 35) < 5.0
      rastring = '{:03d}'.format(int(0.5 + 10*c.ra.hms.s))
      if c.ra.hms.m != 35.0:
          rastring = str(int(c.ra.hms.m - 30.0)) + rastring
      assert c.dec.dms.d == -5.0
      decstring = '{:02d}'.format(int(-c.dec.dms.m))
      decstring += '{:02d}'.format(int(0.5 - c.dec.dms.s))
      if decstring.startswith('2'):
          decstring = decstring[1:]
      return '-'.join([rastring, decstring])


  def find_knot_coord_ids(knots):
      """Find coordinate ID for each knot"""
      coord_ids = {}
      imhdu = fits.open('new-slits-ha-allvels.fits')['scaled']
      imwcs = WCS(imhdu.header)
      for knot_id, knot_data in knots.items():
          x = [0.5*(x1 + x2) for x1, _, x2, _ in knot_data['coords']]
          y = [0.5*(y1 + y2) for _, y1, _, y2 in knot_data['coords']]
          weights = knot_data['width']
          x0 = np.average(x, weights=weights)
          y0 = np.average(y, weights=weights)
          [ra], [dec] = imwcs.all_pix2world([x0], [y0], 0)
          coord_ids[knot_id] = radec2ow(ra, dec)
          v0 = np.average(knot_data['vel'], weights=weights)
          coord_ids[knot_id] += ' ({})'.format(int(round(v0/5.0)*5.0))
      return coord_ids
#+END_SRC

+ Take the knot information back to the boxes
  + This is mainly so that we can do the Gaussian fits and sort the results on a per-knot basis
+ Unfortunately, I never assigned a sequential ID to the boxes when they were first converted to bars
  + This means that I am now stuck with trying to match bars to boxes based on coordinates
  + Using floats as a dict key is a non-starter due to FP representation issues
  + So I use the 1-decimal-place string representation '{:.1f}'
+ Some boxes fail to match.  Can be divided into categories:
  + Zero-size boxes.  These must be there by mistake.  Just delete them
  + [ ] Red-shifted knots.  These do need dealing with eventually
    + XX1204-2007-01b-2045 has a +50 km/s knot
    + ('1540.1', '1207.5', '1539.1', '1224.8')
      + From XX1549-2010-01-206
      + Just too red, maybe (around +3 km/s)
    + ('1498.5', '1069.1', '1479.5', '1068.9')
      + From YY1068-2013-02-154
      + Some of these are very red!  Maybe +76 km/s for this one
  + [X] Near misses:
    + ('1552.2', '999.1', '1550.8', '1023.7')
      + From XX1549-2010-01-206
      + Could be ('1552.2', '998.7', '1550.8', '1023.3')
    + ('1552.9', '1019.3', '1538.9', '1019.2')
      + From YY1019-2013-02-226.reg
      + Could be ('1552.9', '1018.9', '1538.9', '1018.8')
+ Dealing with the failed matches
  + Red boxes.  Punt to a later date
  + Near misses.  Change the bar coordinates to match since they obviously got moved by mistake

#+BEGIN_SRC python
  def find_bar2knot_map(shapelist, coord_ids):
      """Create a mapping between bar and knot coordinate ID.
      Bar is specified by tuple: (x1, y1, x2, y2)"""
      map_ = {}
      for shape in shapelist:
          if shape.name == 'line' and shape.coord_format == 'image':
              _, shape_dict = shape.attr
              knot_id, = shape_dict['tag']
              key = tuple(['{:.1f}'.format(_) for _ in shape.coord_list])
              map_[key] = coord_ids[knot_id]
      return map_

  # This is largely copied from up above
  FITS_DIR = 'Calibrated/BGsub'
  BOX_FMT = 'box({:.1f},{:.1f},{:.1f},{:.1f},{:.1f}) # text={{{}}}'
  BOX_HEADER = """global color=white font="helvetica 5 normal"
  image
  """
  def update_box_file(box_file, bar2knot_map):
      """Add the knot coordinate ID into all the boxes"""
      # Each box_file has the boxes for one slit
      slit_boxes = pyregion.open(box_file)
      # Also open the fits file associated with this slit
      slit_name = box_file.replace(
          os.path.join(REGION_DIR, 'pvboxes-'), '').replace('.reg', '')
      fits_name = os.path.join(FITS_DIR, slit_name) + '-ha-vhel.fits'
      hdu, = fits.open(fits_name)
      # Get the normal WCS together with the 'V' alternative WCS
      w = WCS(hdu)
      ww = WCS(hdu, key='V')
      newboxes = []
      for b in slit_boxes:
          # Check that it really is a box and that coordinates are in
          # the correct format
          if b.name == 'box' and b.coord_format == 'image':
              # Extract slit pixel coordinates
              # ii is along velocity axis
              # jj is along slit length
              ii, jj, dii, djj, angle = b.coord_list
              # Find the start/end coordinate along the slit
              jj1, jj2 = jj - 0.5*djj, jj + 0.5*djj
              # Then use alt WCS to find velocity plus both x and y
              [v, _], [x1, x2], [y1, y2] = ww.all_pix2world(
                  [ii, ii], [jj1, jj2], [0, 0], 0)
              # Convert velocity from m/s -> km/s
              v /= 1000.0
              # Use tuple of rounded coordinates as the key
              key = tuple(['{:.1f}'.format(_) for _ in [x1, y1, x2, y2]])
              try: 
                  coord_id = bar2knot_map[key]
                  bars_remaining.remove(key)
              except KeyError:
                  print('  '*2, 'Failed to match key', key)
                  print('  '*3, ii, jj, dii, djj)
                  if v > 0.0:
                      coord_id = 'RED KNOT ({:+.0f})'.format(5.0*round(v/5))
                  else:
                      coord_id = 'LOST KNOT ({:+.0f})'.format(5.0*round(v/5))
                  print('  '*3, coord_id)
                    
              newbox = BOX_FMT.format(ii, jj, dii, djj, angle, coord_id)
              newboxes.append(newbox)


      newbox_file = box_file.replace('pvboxes', 'pvboxes-knots')
      with open(newbox_file, 'w') as f:
          f.write(BOX_HEADER)
          f.write('\n'.join(newboxes))
      return None

  REGION_DIR = 'Will-Regions-2016-12'
  bars_remaining = []
  def retrofit_knots_on_boxes():
      boxfiles = glob.glob(os.path.join(REGION_DIR, 'pvboxes-[XY]*.reg'))
      barfiles = glob.glob(os.path.join(REGION_DIR, 'bars-from-boxes-*-groups.reg'))

      # Get list of all knots with data
      knots = {}
      bar2knot_map = {}
      print('Creating Bar -> Knot map ...')
      for barfile in barfiles:
          print('  ', barfile)
          bars = load_regions(barfile)
          knots.update(sort_bars_into_knots(bars))
          coord_ids = find_knot_coord_ids(knots)
          bar2knot_map.update(find_bar2knot_map(bars, coord_ids))

      print('Updating boxes with knot info ...')
      bars_remaining[:] = list(bar2knot_map.keys())
      for boxfile in boxfiles:
          print('  ', boxfile)
          update_box_file(boxfile, bar2knot_map)

      if bars_remaining:
          print('Bars remaining:')
          for bar in bars_remaining:
              print('  ', bar)
#+END_SRC

**** DONE Make region files for the knots
CLOSED: [2016-12-11 Sun 15:10]
#+BEGIN_SRC python :tangle knot-regions-from-bars.py
import os
import boxbar_utils

REGION_DIR = 'Will-Regions-2016-12'
bar_pattern = 'bars-from-boxes-{}-groups.reg'
knot_pattern = 'knots-{}.reg'
for group in 'slow', 'fast', 'ultra':
    bar_file = os.path.join(REGION_DIR, bar_pattern.format(group))
    knot_file = os.path.join(REGION_DIR, knot_pattern.format(group))
    boxbar_utils.convert_bars_to_knots(bar_file, knot_file)
#+END_SRC

**** TODO How to plot the knots
+ Now that they are not ellipses, we could just plot the convex hull of the end-points of the bars
  + =skimage.morphology.convex_hull_image=
+ Then we could use dilation to make sure we don't have any regions that are too thin
  + =skimage.morphology.dilation=
  + We could use a circle as the =selem= argument
    + =skimage.morphology.disk(radius)=
+ [X] Then we can convert back to ds9 region as polygon
  + Format: =polygon(x1, y1, x2, y2, ...)=
  + Use a combination of =rasterio= and =shapely= 



**** DONE Retrofit knot assignments to the PV boxes
CLOSED: [2016-12-12 Mon 19:16]
:PROPERTIES:
:ID:       767A6944-B23D-40C4-A163-9EBD9D315C0D
:END:
+ Actually, we should already have this automatically
  + All we have to do is add the knot ID as a label to the PV box
  + And maybe add the color too
+ We will then use the PV boxes (not the ellipses) for extracting the knot
  spectra
+ Question is, which knot ID to use:
  + The sequential one: e.g, =Fast 066 (-55)=
  + Or the coordinate one: e.g., =4416-357 (-20)=
  + Or both!
#+BEGIN_SRC python :eval no :tangle retrofit-knots-to-boxes.py
import boxbar_utils
boxbar_utils.retrofit_knots_on_boxes()
#+END_SRC

#+BEGIN_SRC shell
python retrofit-knots-to-boxes.py
#+END_SRC

Testing this worked: 
1. [[id:EC8322FD-A18D-48FD-8538-7A507CC96DF7][Load up the slits]]
2. [[id:78DBA253-4856-4EE6-848F-26B2C32E4740][Load the boxes too]]

*** DONE Previous version (now superseded)
CLOSED: [2016-12-10 Sat 18:11]
**** Horizontal and vertical bars from each slit spectrum
+ For example [[file:Will-Regions-2016-11/will-knots-all-bars.reg]]
**** Combining the bars to make knots
+ For example [[file:Will-Regions-2016-11/will-knots-blue-fast.reg]]
**** DONE [1/6] Progress on each area of the map
CLOSED: [2016-12-10 Sat 18:11]
+ [X] Rich field of bowshocks
  + [X] Bars
  + [X] Combined
+ [-] Jets coming in
  * [X] Bars
  * [ ] Combined
+ [ ] LL2 region
  + [ ] Bars
  + [ ] Combined
+ [ ] N bowshocks
  + [ ] Bars
  + [ ] Combined
+ [ ] S knots
  + [ ] Bars
  + [ ] Combined
+ [ ] Slower knots
  + [ ] Bars
  + [ ] Combined
** TODO Fitting Gaussians to the new knots
+ [2016-11-19 Sat] With luck we can get estimates of parameter errors while we do this

*** Using Saba and Sherpa
+ [[http://cxc.cfa.harvard.edu/contrib/sherpa/][Sherpa]] is a general fitting package for python
  + Seems to work with python 3 or 2
+ [[https://saba.readthedocs.io/en/api_image_fix][Saba]] is a bridge with astropy.modelling
  + Says it only works with 2, but this may be out of date
+ [X] Install saba in py27
  + This was difficult - couldn't use the dev version of astropy
+ [X] Test that it works
+ [X] Try it in 3.5 too
+ [X] Test it on real data
  + See [[file:saba-sherpa-test.ipynb]]
+ [2016-12-12 Mon] *UPDATE*
  + I had to install both saba and sherpa from source since they stopped working!
    + 
  + But seems to be sorted now
*** Strategy for fitting different sorts of knot
+ I am trying the most difficult cases, such as the -100 km/s knots.
+ This works out fine in the end, implemented in [[file:saba-sherpa-test.ipynb]]
+ First fit the region [-80, 0] (for nii) or [80, -10] in ha
  + Use 4 Gaussians
  + Use stimulated annealing
  + Limits on parameters:
    + amplitude: [0, None]
    + stddev: [0.0, 20.0]
      + Maybe should increase these for ha
+ Subtract that from the profile, and then fit in the range [-150, -50]
*** =knot_fit_utils.py= - routines to fit knots
:PROPERTIES:
:header-args: :tangle knot_fit_utils.py :eval no
:END:
**** Tweaks to make it work with new box regions
+ [X] Change pattern of region files
+ [X] Make sure we get the knot name somehow
+ [X] Boxes instead of ellipses
+ [X] Make sure we extract nominal velocity correctly
**** Imports and plot setup
#+BEGIN_SRC python
  import os
  import numpy as np
  from scipy.ndimage import generic_filter

  from saba import SherpaFitter
  from astropy.modeling.models import Gaussian1D, Lorentz1D, Const1D
  from astropy.io import fits
  from astropy.wcs import WCS
  import pyregion

  import matplotlib.pyplot as plt
  import seaborn as sns
  sns.set(context='notebook', 
          style='whitegrid', 
          palette='dark',
          font_scale=1.5,
          color_codes=True)
#+END_SRC
**** Function =get_knots_from_region_file= to get dict of knot coordinates
+ Old example region file
  + [[file:Will-Regions-2016-11/will-knots-blue-fast-SLITS/XX1620-2010-01-236-nii-vhel.reg][XX1620-2010-01-236-nii-vhel.reg]]
+ New example region file
  + [[file:Will-Regions-2016-12/pvboxes-knots-XX1620-2010-01-236.reg]]
  + Note that this now has the knot_id associated with each box

#+BEGIN_SRC python
  def get_knots_from_region_file(fn):
      """Return dict of all knots in region file `fn`

      Dict is keyed by region name, with values: j1, j2, u0
      """
      knot_regions = pyregion.open(fn)
      knots = {}
      for r in knot_regions:
          if r.name == 'box' and r.coord_format == 'image':
              k = r.attr[1]['text']
              x0, y0, dx, dy, theta = r.coord_list
              j1 = int(y0 - dy)
              j2 = int(y0 + dy)
              u0 = vel_from_region_text(k)
              knots[k] = j1, j2, u0
      return knots


#+END_SRC
**** Function =vel_from_region_text= to extract knot velocity
#+BEGIN_SRC python
  def vel_from_region_text(text):
      '''Try to parse something like "4299-524 (-70)" to find velocity'''
      # Try and get something like "(-70)"
      maybe_parens = text.split()[-1]
      if maybe_parens.startswith('(') and maybe_parens.endswith(')'):
          vstring = maybe_parens[1:-1]
          try:
              v0 = float(vstring)
          except ValueError:
              v0 = None
      else:
          v0 = None
      return v0
#+END_SRC
**** Function =fit_knot= to fit a single knot in a single slit

#+BEGIN_SRC python
  # No upper bound on constant term by default
  CORE_CMAX = None

  def _init_bgmodel(lorentz_mean=15.0):
      """Initialize model for background: constant plus Lorentzian"""
      lorentz_fixed = {'x_0': True, 'fwhm': True}
      lorentz_bounds = {'amplitude': [0, None]}
      constant_bounds = {'amplitude': [0, CORE_CMAX]}
      bgmodel = (Lorentz1D(0.1, lorentz_mean, 100.0, name='Lorentz',
                           bounds=lorentz_bounds, fixed=lorentz_fixed)
		 + Const1D(1.0e-4, bounds=constant_bounds, name='Constant'))
      return bgmodel


  # Don't allow core components to intrude into knot velocity space
  CORE_VMIN = -10.0
  # Should not be narrower than instrumental profile
  CORE_WMIN = 3.0
  # And not too wide or they compete with Lorentzian
  CORE_WMAX = 25.0

  def _init_coremodel():
      """Initialize model for core of profile: sum of 5 Gaussians"""
      bounds = {'amplitude': [0, None],
		'stddev': [CORE_WMIN, CORE_WMAX],
		'mean': [CORE_VMIN, None]}
      coremodel = (Gaussian1D(1.0, 5.0, 5.0, bounds=bounds, name='G1') 
                   + Gaussian1D(5.0, 10.0, 5.0, bounds=bounds, name='G2')
                   + Gaussian1D(5.0, 15.0, 5.0, bounds=bounds, name='G3')
                   + Gaussian1D(5.0, 20.0, 5.0, bounds=bounds, name='G4')
                   + Gaussian1D(1.0, 40.0, 5.0, bounds=bounds, name='G5')
      )
      return coremodel


  KNOT_VMIN = -120.0
  KNOT_VMAX = 0.0
  KNOT_WMIN = 3.0
  KNOT_WMAX = 30.0

  def _init_knotmodel(amp_init=0.01, v_init=-60.0):
      """Initialize model for knot: a single Gaussian"""
      bounds = {'amplitude': [0, None],
		'stddev': [KNOT_WMIN, KNOT_WMAX],
		'mean': [KNOT_VMIN, KNOT_VMAX]}
      knotmodel = Gaussian1D(amp_init, v_init, 5.0, bounds=bounds) 
      return knotmodel


  # Knot is fitted in region +/- KNOT_WIDTH around the nominal velocity
  # The same region is omitted from the core fit
  KNOT_WIDTH = 30.0

  # Highest value of reduced chi2 that will still allow estimating
  # confidence bounds on the fit parameters.  We increase this from the
  # default value of 3 since we sometimes have fits that are worse than
  # that :(
  MAX_RSTAT = 30.0

  # Scale for sqrt(N) contribution to the error budget.  Strictly, we
  # should go back to the data in electron counts before calibration and
  # continuum removal in order to calculate this.  But that is too much
  # work, so we just treat it as a free parameter.  Overestimating it is
  # harmless.
  POISSON_SCALE = 0.02

  def fit_knot(hdu, j1, j2, u0):

      NS, NV = hdu.data.shape
      w = WCS(hdu.header)
      vels, _ = w.all_pix2world(np.arange(NV), [0]*NV, 0)
      vels /= 1000.0

      # Ensure we don't go out of bounds
      j1 = max(j1, 0)
      j2 = min(j2, NS)
      print('Slit pixels {}:{} out of {}'.format(j1, j2, NS))

      knotspec = hdu.data[j1:j2, :].sum(axis=0)
      # make sure all pixels are positive, since that helps the fitting/plotting
      knotspec -= knotspec.min()

      # Levenberg-Marquardt for easy jobs
      lmfitter = SherpaFitter(statistic='chi2',
                              optimizer='levmar',
                              estmethod='confidence')
      # Simulated annealing for trickier jobs
      safitter = SherpaFitter(statistic='chi2',
                              optimizer='neldermead',
                              estmethod='covariance')

      # First do the strategy for typical knots (u0 = [-30, -80])

      # Estimate error from the BG: < -120 or > +100
      bgmask = np.abs(vels + 10.0) >= 110.0
      bgerr = np.std(knotspec[bgmask]) * np.ones_like(vels)

      # Fit to the BG with constant plus Lorentz
      try: 
          vmean = np.average(vels, weights=knotspec)
      except ZeroDivisionError:
          vmean = 15.0

      bgmodel = lmfitter(_init_bgmodel(vmean),
			 vels[bgmask], knotspec[bgmask],
			 err=bgerr[bgmask])
      # Now freeze the BG model and add it to the initial core model
      bgmodel['Lorentz'].fixed['amplitude'] = True
      bgmodel['Constant'].fixed['amplitude'] = True

      # Increase the data err in the bright part of the line to mimic Poisson noise
      # Even though we don't know what the normalization is really, we will guess ...
      spec_err = bgerr + POISSON_SCALE*np.sqrt(knotspec)

      # Fit to the line core
      knotmask = np.abs(vels - u0) <= KNOT_WIDTH
      coremodel = safitter(_init_coremodel() + bgmodel,
                           vels[~knotmask], knotspec[~knotmask],
                           err=spec_err[~knotmask])
      core_fit_info = safitter.fit_info

      # Residual should contain just knot
      residspec = knotspec - coremodel(vels)

      # Calculate running std of residual spectrum
      NWIN = 11
      running_mean = generic_filter(residspec, np.mean, size=(NWIN,))
      running_std = generic_filter(residspec, np.std, size=(NWIN,))

      # Increase error estimate for data points where this is larger
      # than spec_err, but only for velocities that are not in knotmask
      residerr = bgerr
      # residerr = spec_err
      mask = (~knotmask) & (running_std > bgerr)
      residerr[mask] = running_std[mask]
      # The reason for this is so that poor modelling of the core is
      # accounted for in the errors.  Otherwise the reduced chi2 of the
      # knot model will be too high

      # Make an extended mask for fitting the knot, omitting the
      # redshifted half of the spectrum since it is irrelevant and we
      # don't want it to affect tha chi2 or the confidance intervals
      bmask = vels < 50.0

      # Fit single Gaussian to knot 
      amplitude_init = residspec[knotmask].max()
      if amplitude_init < 0.0:
          # ... pure desperation here
          amplitude_init = residspec[bmask].max()
      knotmodel = lmfitter(_init_knotmodel(amplitude_init, u0),
                           vels[bmask], residspec[bmask],
                           err=residerr[bmask])

      # Calculate the final residuals, which should be flat
      final_residual = residspec - knotmodel(vels)

      # Look at stddev of the final residuals and use them to rescale
      # the residual errors.  Then re-fit the knot with this better
      # estimate of the errors.  But only if rescaling would reduce the
      # data error estimate.
      residerr_rescale = final_residual[bmask].std() / residerr[bmask].mean()
      if residerr_rescale < 1.0:
          print('Rescaling data errors by', residerr_rescale)
          residerr *= residerr_rescale
          knotmodel = lmfitter(knotmodel,
                               vels[bmask], residspec[bmask],
                               err=residerr[bmask])
      else:
          residerr_rescale = 1.0

      knot_fit_info = lmfitter.fit_info
      lmfitter._fitter.estmethod.config['max_rstat'] = MAX_RSTAT
      if knot_fit_info.rstat < MAX_RSTAT:
          knot_fit_errors = lmfitter.est_errors(sigma=3)
      else:
          knot_fit_errors = None

      return {
          'nominal knot velocity': u0,
          'velocities': vels,
          'full profile': knotspec,
          'error profile': residerr,
          'core fit model': coremodel,
          'core fit profile': coremodel(vels),
          'core fit components': {k: coremodel[k](vels) for k in coremodel.submodel_names},
          'core fit info': core_fit_info,
          'core-subtracted profile': residspec,
          'knot fit model': knotmodel,
          'knot fit profile': knotmodel(vels),
          'knot fit info': knot_fit_info,
          'knot fit errors': knot_fit_errors,
          'error rescale factor': residerr_rescale,
      }
#+END_SRC

A different strategy would be to fit all the components at once:
+ Advantages ::
  1. No more worries about masking out the core when fitting the knot, and masking out the knot when fitting the core.
  2. More naturally deal with overlapping knots with different velocities
     - We just select out the component that is closest to the nominal velocity. 
+ Disadvantages :: 
  1. It will be very expensive to estimate the errors with confidence-level algorithm.
     - We will probably have to just use covariance matrix instead
     - Alternatively, once we have the fit, we can subtract off the components that are nowhere near our knot velocity.  And also remove them from the model.  Then fit again to the partial residual, and calculate the confidence level for that.  That might work
  2. Might be some instabilities in the fits
     - Degeneracy between wide component and multiple narrow components
     - If there are qualitative differences between the [N II] and Ha core fits, then this might affect the knots
       - One approach would be to fit [N II] first, and then use the same components, with the same relative velocity widths for Ha
       - But allow the absolute velocity to slide and the widths and relative heights to change
+ Mitigation :: Disadvantage (2) can probably can be overcome with some judicious limits on the fit parameters.
  + One idea :: Determine mean velocity in [-10, 50] window and use that to define components that are restricted to certain deltas around the mean:
    - Peak component: [-15, +15]
    - 1 or 2 Blue components: [-30, 0]
    - 1 or 2 Red components: [0, 30]
  + Another crazy idea :: Freeze the width of each component at combined thermal+instrumental width, or maybe slightly larger
    + So that would be about 21 km/s FWHM => 9 km/s sigma for Ha
    + And FWHM = 8 km/s => sigma = 3.5 km/s for [N II]

#+BEGIN_SRC python
  def fit_knot_unified(hdu, j1, j2, u0, lineid='nii'):

      NS, NV = hdu.data.shape
      w = WCS(hdu.header)
      vels, _ = w.all_pix2world(np.arange(NV), [0]*NV, 0)
      vels /= 1000.0

      # Ensure we don't go out of bounds
      j1 = max(j1, 0)
      j2 = min(j2, NS)
      print('Slit pixels {}:{} out of {}'.format(j1, j2, NS))

      knotspec = hdu.data[j1:j2, :].sum(axis=0)
      # make sure all pixels are positive, since that helps the fitting/plotting
      knotspec -= knotspec.min()

      # Levenberg-Marquardt for easy jobs
      lmfitter = SherpaFitter(statistic='chi2',
                              optimizer='levmar',
                              estmethod='confidence')

      # Simulated annealing for trickier jobs
      safitter = SherpaFitter(statistic='chi2',
                              optimizer='neldermead',
                              estmethod='covariance')

      # The idea is that this strategy should work for all knots

      # Estimate error from the BG: < -120 or > +100
      bgmask = np.abs(vels + 10.0) >= 110.0
      bgerr = np.std(knotspec[bgmask]) * np.ones_like(vels)

      # Define core as [-10, 50], or 20 +/- 30
      coremask = np.abs(vels - 20.0) < 30.0

      # Fit to the BG with constant plus Lorentz
      try: 
          vmean = np.average(vels[coremask], weights=knotspec[coremask])
      except ZeroDivisionError:
          vmean = 15.0

      bgmodel = lmfitter(_init_bgmodel(vmean),
			 vels[bgmask], knotspec[bgmask],
			 err=bgerr[bgmask])
      # Now freeze the BG model and add it to the initial core model
      #bgmodel['Lorentz'].fixed['amplitude'] = True
      #bgmodel['Constant'].fixed['amplitude'] = True

      # Increase the data err in the bright part of the line to mimic Poisson noise
      # Even though we don't know what the normalization is really, we will guess ...
      spec_err = bgerr + POISSON_SCALE*np.sqrt(knotspec)


      ## Now for the exciting bit, fit everything at once
      ##
      knotmask = np.abs(vels - u0) <= KNOT_WIDTH
      # For low-velocity knots, we need to exclude positive velocities
      # from the mask, since they will have large residual errors from
      # the core subtraction
      knotmask = knotmask & (vels < 0.0)

      # Start off with the frozen BG model
      fullmodel = bgmodel.copy()
      core_components = list(fullmodel.submodel_names)

      # Add in a model for the core
      DV_INIT = [-15.0, -5.0, 5.0, 10.0, 30.0]
      NCORE = len(DV_INIT)
      BASE_WIDTH = 10.0 if lineid == 'ha' else 5.0
      W_INIT = [BASE_WIDTH]*4 + [1.5*BASE_WIDTH]
      for i in range(NCORE):
          v0 = vmean + DV_INIT[i]
          w0 = W_INIT[i]
          component = 'G{}'.format(i)
          fullmodel += Gaussian1D(
              3.0, v0, w0,
              bounds={'amplitude': [0, None],
                      'mean': [v0 - 10, v0 + 10],
                      'stddev': [w0, 1.5*w0]},
              name=component)
          core_components.append(component)

      # Now, add in components for the knot to extract
      knotmodel_init = Gaussian1D(
          0.01, u0, BASE_WIDTH,
          # Allow +/- 10 km/s leeway around nominal knot velocity
          bounds={'amplitude': [0, None],
                  'mean': [u0 - 10, u0 + 10],
                  'stddev': [BASE_WIDTH, 25.0]},
          name='Knot')
      fullmodel += knotmodel_init
      knot_components = ['Knot']
      other_components = []

      # Depending on the knot velocity, we may need other components to
      # take up the slack too
      if u0 <= -75.0 or u0 >= -50.0:
          # Add in a generic fast knot
          fullmodel += Gaussian1D(
              0.01, -60.0, BASE_WIDTH,
              bounds={'amplitude': [0, None],
                      'mean': [-70.0, -50.0],
                      'stddev': [BASE_WIDTH, 25.0]},
              name='Fast other')
          other_components.append('Fast other')

      if u0 <= -50.0:
          # Add in a generic slow knot
          fullmodel += Gaussian1D(
              0.01, -30.0, BASE_WIDTH,
              bounds={'amplitude': [0, None],
                      'mean': [-40.0, -10.0],
                      'stddev': [BASE_WIDTH, 25.0]},
              name='Slow other')
          other_components.append('Slow other')

      if u0 >= -75.0:
          # Add in a very fast component
          fullmodel += Gaussian1D(
              0.001, -90.0, BASE_WIDTH,
              bounds={'amplitude': [0, None],
                      'mean': [-110.0, -75.0],
                      'stddev': [BASE_WIDTH, 25.0]},
              name='Ultra-fast other')
          other_components.append('Ultra-fast other')

      if u0 <= 30.0:
          # Add in a red-shifted component just in case
          fullmodel += Gaussian1D(
              0.01, 40.0, BASE_WIDTH,
              bounds={'amplitude': [0, None],
                      'mean': [30.0, 200.0],
                      'stddev': [BASE_WIDTH, 25.0]},
              name='Red other')
          other_components.append('Red other')




      # Moment of truth: fit models to data
      fullmodel = safitter(fullmodel, vels, knotspec, err=spec_err)
      full_fit_info = safitter.fit_info

      # Isolate the core+other model components 
      coremodel = fullmodel[core_components[0]]
      for component in core_components[1:] + other_components:
          coremodel += fullmodel[component]

      # Subtract the core model from the data
      residspec = knotspec - coremodel(vels)

      # Now re-fit the knot model to the residual

      # Calculate running std of residual spectrum
      NWIN = 11
      running_mean = generic_filter(residspec, np.mean, size=(NWIN,))
      running_std = generic_filter(residspec, np.std, size=(NWIN,))

      # Increase error estimate for data points where this is larger
      # than spec_err, but only for velocities that are not in knotmask
      residerr = bgerr
      # residerr = spec_err
      mask = (~knotmask) & (running_std > bgerr)
      residerr[mask] = running_std[mask]
      # The reason for this is so that poor modelling of the core is
      # accounted for in the errors.  Otherwise the reduced chi2 of the
      # knot model will be too high

      # Make an extended mask for fitting the knot, omitting the
      # redshifted half of the spectrum since it is irrelevant and we
      # don't want it to affect tha chi2 or the confidance intervals
      bmask = vels < 50.0

      knotmodel = lmfitter(knotmodel_init,
                           vels[bmask], residspec[bmask],
                           err=residerr[bmask])

      # Calculate the final residuals, which should be flat
      final_residual = residspec - knotmodel(vels)

      # Look at stddev of the final residuals and use them to rescale
      # the residual errors.  Then re-fit the knot with this better
      # estimate of the errors.  But only if rescaling would reduce the
      # data error estimate.
      residerr_rescale = final_residual[bmask].std() / residerr[bmask].mean()
      if residerr_rescale < 1.0:
          print('Rescaling data errors by', residerr_rescale)
          residerr *= residerr_rescale
          knotmodel = lmfitter(knotmodel,
                               vels[bmask], residspec[bmask],
                               err=residerr[bmask])
      else:
          residerr_rescale = 1.0

      knot_fit_info = lmfitter.fit_info
      lmfitter._fitter.estmethod.config['max_rstat'] = MAX_RSTAT
      if knot_fit_info.rstat < MAX_RSTAT:
          knot_fit_errors = lmfitter.est_errors(sigma=3)
      else:
          knot_fit_errors = None

      return {
          'nominal knot velocity': u0,
          'velocities': vels,
          'full profile': knotspec,
          'error profile': residerr,
          'core fit model': coremodel,
          'core fit profile': coremodel(vels),
          'core fit components': {k: coremodel[k](vels) for k in coremodel.submodel_names},
          'core fit info': full_fit_info,
          'core-subtracted profile': residspec,
          'knot fit model': knotmodel,
          'knot fit profile': knotmodel(vels),
          'knot fit info': knot_fit_info,
          'knot fit errors': knot_fit_errors,
          'error rescale factor': residerr_rescale,
          'knot j range': (j1, j2),
      }

#+END_SRC

**** Utility functions to calculate summary statistics of line profile
#+BEGIN_SRC python
  def find_fwhm(f, v, frac=0.5):
      """Find literal FWHM of discretely sampled profile f(v) by linear interpolation

      STILL NOT FULLY TESTED

      Based on the Fortran implementation in 
      /Users/will/Work/BobKPNO/src/newlinemod.f90
      """
      ipeak = np.argmax(f)
      fpeak = f[ipeak]
      m = f >= frac*fpeak
      ileft = v.tolist().index(v[m][0])
      iright = v.tolist().index(v[m][-1])
      if ileft <= 0:
          uleft = v[0]
      elif ileft >= len(f):
          uleft = v[-1]
      else:
          uleft = (
              v[ileft] -
              (v[ileft] - v[ileft-1]) * (f[ileft] - frac*fpeak)
              / (f[ileft] - f[ileft-1])
          )
      if iright < 0:
          uright = v[0]
      elif iright >= len(f):
          uright = v[-1]
      else:
          uright = (
              v[iright] +
              (v[iright+1] - v[iright]) * (f[iright] - frac*fpeak)
              / (f[iright] - f[iright-1])
          )
      return uright - uleft


  def get_statistics(f, v):
      """Find mean, sigma, flux, fwhm
      """
      flux = np.trapz(f, v)
      try: 
          vbar = np.average(v, weights=f)
          sigma = np.sqrt(np.average(np.square(v - vbar), weights=f))
      except ZeroDivisionError:
          vbar = np.nan
          sigma = np.nan

      # fwhm = find_fwhm(f, v)
      fwhm = sigma * np.sqrt(8.0*np.log(2.0))
      return {'flux': flux, 'mean velocity': vbar, 'sigma': sigma, 'FWHM': fwhm}
#+END_SRC
**** Save the fit data as JSON file
#+BEGIN_SRC python
  import json
  from astropy.utils.misc import JsonCustomEncoder

  def save_fit_data(kn, save_dir, line_id, slit_id):
      """Save all the fit data for knot and core"""
      knot_id = os.path.basename(save_dir)
      jsonfile = os.path.join(save_dir,
			'{}-{}-{}.json'.format(line_id, knot_id, slit_id))

      # Start with copy of input data dict
      data = kn.copy()          # should this be a depp copy?

      # Add basic info
      data['knot'] = knot_id
      data['slit'] = slit_id
      data['emission line'] = line_id

      # Add some more summary statistics
      data['core fit moments'] = get_statistics(
            data['core fit profile'], data['velocities'])

      data['knot fit moments'] = get_statistics(
            data['knot fit profile'], data['velocities'])

      data['full profile moments'] = get_statistics(
            data['full profile'], data['velocities'])

      # Take a slightly more generous knot window for calculating residual stats
      m = np.abs(data['velocities']
		 - data['nominal knot velocity']) <= 1.5*KNOT_WIDTH

      data['core-subtracted profile moments'] = get_statistics(
            data['core-subtracted profile'][m], data['velocities'][m])

      # Re-write the confidence levels as per the graphics program
      if data['knot fit errors'] is not None:
          p = {k: (_v, _p if _p else np.nan, _m if _m else np.nan)
               for k, _v, _p, _m in zip(*data['knot fit errors'])}
          p['FWHM'] = [np.sqrt(8.0*np.log(2.0))*_w for _w in p['stddev']]
          p['confidence level'] = '3-sigma'
      else:
          p = {'confidence level': 'MAX CHI-SQUARED EXCEEDED!'}

      p['reduced chi^2'] = data['knot fit info'].rstat
      data['knot fit parameters'] = p

      # Extract the core fit parameters from the best-fit model -
      # don't bother with error estimates
      m = data['core fit model']
      data['core fit parameters'] = {
            mn: dict(zip(m[mn].param_names, m[mn].parameters))
            for mn in m.submodel_names}
      data['core fit parameters']['reduced chi^2'] = data['core fit info'].rstat

      # Remove items that we don't want to save to JSON
      del data['core fit components']
      del data['core fit model']
      del data['core fit profile']
      del data['full profile']
      del data['core-subtracted profile']
      del data['error profile']
      del data['velocities']
      del data['knot fit model']
      del data['knot fit profile']
      del data['knot fit errors']               
      del data['knot fit info']
      del data['core fit info']

      with open(jsonfile, 'w') as f:
            json.dump(data, f, indent=4, cls=JsonCustomEncoder,
		default=lambda x: repr(x).split('\n'))


#+END_SRC
**** Function =process_slit= to deal with all regions in a given slit
#+BEGIN_SRC python

  SLIT_DIR = 'Calibrated/BGsub'
  REGION_DIR = 'Will-Regions-2016-12'
  REGION_PREFIX = 'pvboxes-knots'
  KNOTS_DIR = 'Knot-Fits-Final'
  STRATEGY = 'unified'

  def process_slit(fn):
      print('-*^*- '*10)
      print('Processing', fn)

      if fn.startswith(SLIT_DIR):
          fits_path = fn
      else:
          fits_path = os.path.join(SLIT_DIR, fn)
      hdu, = fits.open(fits_path)

      # Rejig the slit name into a slit_id and a line_id
      slit_name, _ = os.path.splitext(os.path.basename(fits_path))
      # e.g., XX1620-2010-01-236-ha-vhel
      _pos, _y, _m, _n, line_id, _ = slit_name.split('-')
      slit_id = '-'.join([_pos, _y, _m, _n])

      region_path = os.path.join(REGION_DIR,
				 '{}-{}.reg'.format(REGION_PREFIX, slit_id))
      try: 
          knots = get_knots_from_region_file(region_path)
      except FileNotFoundError:
          print('No knots in this slit')
          return

      for name, data in knots.items():
          print('Processing knot', name, 'in slit', os.path.basename(fits_path))
          knot_id = name.split()[0]
          save_dir = os.path.join(KNOTS_DIR, knot_id)
          if not os.path.isdir(save_dir):
              os.makedirs(save_dir)

          if STRATEGY.lower() == 'unified':
              kn = fit_knot_unified(hdu, *data)
          else:
              kn = fit_knot(hdu, *data)

          save_fit_data(kn, save_dir, line_id, slit_id)
          plot_core_fit(kn, save_dir, line_id, slit_id)
          plot_knot_fit(kn, save_dir, line_id, slit_id)
#+END_SRC
**** Process all the slits
Since =glob.glob= does not support brace expansion, the easiest thing is to have a list of glob patterns. 
#+BEGIN_SRC python
  import glob

  PATTERNS = ['[XY][XY]*-ha-vhel.fits', '[XY][XY]*-nii-vhel.fits']
  def process_all_slits(patterns=PATTERNS):
      slit_list = []
      for pattern in patterns:
          slit_list += glob.glob(os.path.join(SLIT_DIR, pattern))
      for slit in slit_list:
          process_slit(slit)

#+END_SRC
**** Plotting functions
#+BEGIN_SRC python
  LINE_LABEL = {'ha': 'Ha 6563',  'nii': '[N II] 6583'}

  def plot_core_fit(kn, save_dir, line_id, slit_id):
      fig, ax = plt.subplots(1, 1)
      ax.plot('velocities', 'full profile', '.', data=kn)
      fullfit = kn['core fit profile'] + kn['knot fit profile']
      ax.plot(kn['velocities'], fullfit)
      ax.errorbar('velocities', 'full profile', 
                  'error profile', data=kn, fmt=None, alpha=0.4, errorevery=4)
      for k, v in kn['core fit components'].items():
          ax.plot(kn['velocities'], v, '--', alpha=0.6, lw='1', color='k')
      ax.plot(kn['velocities'], kn['knot fit profile'], '--',
              alpha=0.6, lw='2', color='r')

      ax.fill_betweenx([0.0, 100.0], 
                       [kn['nominal knot velocity'] - KNOT_WIDTH]*2,
                       [kn['nominal knot velocity'] + KNOT_WIDTH]*2, 
                       alpha=0.1)

      ax.set(xlim=[-150, 200],
             yscale='log', ylim=[0.001, None],
             xlabel='Heliocentric Velocity',
             ylabel='Line profile',
             title='{:s} - {:s} - {:s}'.format(os.path.basename(save_dir),
                                               slit_id, LINE_LABEL[line_id]),
      )
      fig.set_size_inches(8, 6)
      knot_id = os.path.basename(save_dir)
      plotfile = os.path.join(save_dir,
                              '{}-core-fit-{}-{}.png'.format(
                                  line_id, knot_id, slit_id))
      fig.savefig(plotfile, dpi=200)
      # Important to close figure explicitly so as not to leak resources
      plt.close(fig)


  def plot_knot_fit(kn, save_dir, line_id, slit_id):
      fig, ax = plt.subplots(1, 1)
      ax.plot('velocities', 'core-subtracted profile', '.', data=kn)
      ax.plot('velocities', 'knot fit profile', data=kn)
      ax.errorbar('velocities', 'core-subtracted profile', 
                  'error profile', data=kn, fmt=None, alpha=0.4, errorevery=4)
      ax.axvline(kn['nominal knot velocity'], lw=0.5, ls='--')


      param_errors = kn['knot fit errors']
      if param_errors is not None:
          p = {k: (_v, _p if _p else np.nan, _m if _m else np.nan)
               for k, _v, _p, _m in zip(*param_errors)}

          knotmodel = kn['knot fit model']

          knot_min_a = knotmodel.copy()
          knot_min_a.amplitude.value += p['amplitude'][1]

          knot_max_a = knotmodel.copy()
          knot_max_a.amplitude.value += p['amplitude'][2]

          knot_min_v = knotmodel.copy()
          knot_min_v.mean.value += p['mean'][1]
          if not np.isfinite(knot_min_v.stddev.value):
              knot_min_v.stddev.value = KNOT_VMIN

          knot_max_v = knotmodel.copy()
          knot_max_v.mean.value += p['mean'][2]
          if not np.isfinite(knot_max_v.stddev.value):
              knot_max_v.stddev.value = KNOT_VMAX

          knot_min_w = knotmodel.copy()
          knot_min_w.stddev.value += p['stddev'][1]
          if not np.isfinite(knot_min_w.stddev.value):
              knot_min_w.stddev.value = KNOT_WMIN

          knot_max_w = knotmodel.copy()
          knot_max_w.stddev.value += p['stddev'][2]
          if not np.isfinite(knot_max_w.stddev.value):
              knot_max_w.stddev.value = 1.5*KNOT_WMAX

          vels = kn['velocities']
          alpha = 0.15
          ax.fill_between(vels, knot_min_a(vels), knot_max_a(vels),
                          color='k', alpha=alpha)
          ax.fill_between(vels, knot_min_v(vels), knot_max_v(vels),
                          color='k', alpha=alpha)
          ax.fill_between(vels, knot_min_w(vels), knot_max_w(vels),
                          color='k', alpha=alpha)


          ptext = 'Knot fit parameters' + '\n'
          ptext += '($3\sigma$-confidence interval)' + '\n'
          # Reduced chi2
          ptext += r'$\mathrm{Reduced\ }\chi^2 = '
          ptext += r'{:.2f}$'.format(kn['knot fit info'].rstat) + '\n'
          # Amplitude
          ptext += r'$\mathrm{Amplitude} = '
          ptext += '{:.3f}_{{{:+.3f}}}^{{{:+.3f}}}$'.format(*p['amplitude']) + '\n'
          # Mean
          ptext += r'$\mathrm{Mean\ velocity} = '
          ptext += '{:.1f}_{{{:+.1f}}}^{{{:+.1f}}}$'.format(*p['mean'])
          ptext += r'$\mathrm{\ km\ s^{-1}}$' + '\n'
          # Width
          ptext += r'$\mathrm{FWHM} = '
          fwhm = [np.sqrt(8.0*np.log(2.0))*_ for _ in p['stddev']]
          ptext += '{:.1f}_{{{:+.1f}}}^{{{:+.1f}}}$'.format(*fwhm)
          ptext += r'$\mathrm{\ km\ s^{-1}}$'

          ax.text(0.95, 0.95, ptext.replace('nan', r'\infty'),
                  ha='right', va='top', fontsize='small',
                  transform=ax.transAxes,
                  bbox=dict(facecolor='white', alpha=0.7))

      ax.set(xlim=[-150, 200],
             xlabel='Heliocentric Velocity',
             ylabel='Core-subtracted profile',
             title='{:s} - {:s} - {:s}'.format(os.path.basename(save_dir),
                                               slit_id, LINE_LABEL[line_id]),
      )
      fig.set_size_inches(8, 6)
      knot_id = os.path.basename(save_dir)
      plotfile = os.path.join(save_dir,
                              '{}-knot-fit-{}-{}.png'.format(
                                  line_id, knot_id, slit_id))
      fig.savefig(plotfile, dpi=200)
      # Important to close figure explicitly so as not to leak resources
      plt.close(fig)
#+END_SRC

*** Fit all the knots
#+BEGIN_SRC python :tangle fit-all-knots.py
  import sys
  import knot_fit_utils

  patterns = sys.argv[1:]
  if patterns:
      knot_fit_utils.process_all_slits(patterns)
  else:
      knot_fit_utils.process_all_slits()
#+END_SRC


Run this in the shell since it might take a long time
#+BEGIN_SRC shell :eval no
time python fit-all-knots.py
#+END_SRC

Do the same for the slow knots
#+BEGIN_SRC python :tangle fit-all-slow-knots.py
  import sys
  import knot_fit_utils

  knot_fit_utils.REGION_DIR = 'Will-Regions-2016-11/will-knots-blue-slow-SLITS'

  patterns = sys.argv[1:]
  if patterns:
      knot_fit_utils.process_all_slits(patterns)
  else:
      knot_fit_utils.process_all_slits()
#+END_SRC

Now try it with a different strategy.

#+BEGIN_SRC python :tangle fit-all-slow-knots-unified.py
  import sys
  import knot_fit_utils

  knot_fit_utils.REGION_DIR = 'Will-Regions-2016-11/will-knots-blue-slow-SLITS'
  knot_fit_utils.KNOTS_DIR = 'Knot-Fits-Unified'
  knot_fit_utils.STRATEGY = 'unified'

  patterns = sys.argv[1:]
  if patterns:
      knot_fit_utils.process_all_slits(patterns)
  else:
      knot_fit_utils.process_all_slits()
#+END_SRC

#+BEGIN_SRC python :tangle fit-all-fast-knots-unified.py
  import sys
  import knot_fit_utils

  knot_fit_utils.REGION_DIR = 'Will-Regions-2016-11/will-knots-blue-fast-SLITS'
  knot_fit_utils.KNOTS_DIR = 'Knot-Fits-Unified'
  knot_fit_utils.STRATEGY = 'unified'

  patterns = sys.argv[1:]
  if patterns:
      knot_fit_utils.process_all_slits(patterns)
  else:
      knot_fit_utils.process_all_slits()
#+END_SRC


** [2/3] Wrangling data from knot fits
*** DONE =knot_table_utils.py= - Merge knot info into big table
CLOSED: [2016-11-30 Wed 17:49]
:PROPERTIES:
:header-args: :tangle knot_table_utils.py :eval no
:END:

#+BEGIN_SRC python
  from collections import OrderedDict
  import json
  import glob
  import numpy as np
  import pandas as pd

  def data_from_json(fn):
      """Returns all data from json file named `fn` in form of dict"""
      with open(fn) as f:
          data = json.load(f)
      return data


  # Include 'Red other' component, since this often is quite bright and
  # probably isn't a knot at all
  CORE_COMPONENTS = ['G0', 'G1', 'G2',
                     'G3', 'G4', 'Red other']
  def find_core_moments(data):
      """Estimate moments from the fit parameters for the core

      Returns (mean, sigma)
      """
      vels = []
      fluxes = []
      sigmas = []
      for name, params in data.items():
          if name in CORE_COMPONENTS:
              vels.append(params['mean'])
              fluxes.append(params['amplitude'])
              sigmas.append(params['stddev'])

      vels = np.array(vels)
      fluxes = np.array(fluxes)
      sigmas = np.array(sigmas)

      m = np.isfinite(vels) & np.isfinite(fluxes) & np.isfinite(sigmas)

      vmean = np.average(vels[m], weights=fluxes[m])
      variance = np.average((vels[m]-vmean)**2, weights=fluxes[m])
      variance += np.average(sigmas[m]**2, weights=fluxes[m])

      return vmean, np.sqrt(variance)


  def summarise_data(d):
      """Summarise data from json file into form suitable for table

      Returns OrderedDict so we have control over the column order
      """
      out = OrderedDict()
      out['line'] = d['emission line']
      out['knot'] = d['knot']
      out['slit'] = d['slit']
      out['Vnom'] = d['nominal knot velocity']
      # out['Wc'] = d['core fit moments']['FWHM']
      # out['Vc'] = d['core fit moments']['mean velocity']
      u0, sigma = find_core_moments(d['core fit parameters'])
      out['Vc'] = u0
      out['Wc'] = np.sqrt(8*np.log(2.0)) * sigma
      out['Fc'] = d['core fit moments']['flux']
      out['F'] = d['knot fit moments']['flux']
      try:
          out['A'] = d['knot fit parameters']['amplitude'][0]
          out['dA-'] = d['knot fit parameters']['amplitude'][1]
          out['dA+'] = d['knot fit parameters']['amplitude'][2]
          out['V'] = d['knot fit parameters']['mean'][0]
          out['dV-'] = d['knot fit parameters']['mean'][1]
          out['dV+'] = d['knot fit parameters']['mean'][2]
          out['W'] = d['knot fit parameters']['FWHM'][0]
          out['dW-'] = d['knot fit parameters']['FWHM'][1]
          out['dW+'] = d['knot fit parameters']['FWHM'][2]
          out['chi2'] = d['knot fit parameters']['reduced chi^2']
          # Quality of fit: amplitude / amplitude error
          out['Q'] = 2*out['A']/(out['dA+'] - out['dA-'])
          out['chi2c'] = d['core fit parameters']['reduced chi^2']
      except KeyError:
          out['Q'] = 0.0
          for k in ['A', 'dA-', 'dA+',
                    'V', 'dV-', 'dV+',
                    'W', 'dW-', 'dW+',
                    'chi2', 'chi2c']:
              # Fill with NaN only those items that we failed to get
              if not k in out:
                  out[k] = np.nan

      return out

  JSON_FILE_GLOB = 'Knot-Fits/*/*.json'

  def _dictlist_from_json_files(debug=False):
      """Returns list of OrderedDict rows"""
      dictlist = []
      for fn in glob.glob(JSON_FILE_GLOB):
          if debug:
              print('Appending data from', fn)
          dictlist.append(summarise_data(data_from_json(fn)))
      return dictlist


  def _dataframe_from_dictlist(data):
      """Return a pandas dataframe"""
      df = pd.DataFrame(data=data, columns=data[0].keys())
      # Use a MultiIndex 
      df = df.set_index(['knot', 'slit', 'line'])
      # And move the line (ha or nii) to the columns
      df = df.unstack()
      return df


  def get_dataframe():
      return  _dataframe_from_dictlist(_dictlist_from_json_files())

#+END_SRC
*** DONE Write out big data table for Alba
CLOSED: [2017-01-20 Fri 14:58]
#+BEGIN_SRC python
  import os
  import knot_table_utils
  import pandas as pd
  import numpy as np
  from astropy.table import Table

  fitdir = 'Knot-Fits-Final'
  knot_table_utils.JSON_FILE_GLOB = fitdir + '/*/*.json'
  d = knot_table_utils.get_dataframe()
  # Switch over the levels in the column multiindex so that we can
  # easily extract the 'ha' and 'nii' parts
  d = d.swaplevel(0, 1, axis =1)
  for line in 'ha', 'nii':
      # Use reset_index() to move the pandas dataframe index to normal
      # columns so that the astropy table converter will pick them up
      t = Table.from_pandas(d[line].reset_index())
      t.meta['ID'] = fitdir
      tabfile = os.path.join(fitdir,  'all-knots-{}-table.fits'.format(line))
      t.write(tabfile, overwrite=True, format='fits')
      t.write(tabfile.replace('.fits', '.xml'),
              overwrite=True, format='votable')
      t.write(tabfile.replace('.fits', '.tab'),
              format='ascii.commented_header')

#+END_SRC

#+RESULTS:
: None

[[file:Knot-Fits-Final/all-knots-ha-table.tab]]

*** TODO Merge data from all slits for given knot
+ Only use the highest quality fits
** Make graphs of the new knot data 
+ Width-width
  + Select out the best-determined values
  + Does measured [N II] width increase for noisy data?
+ Correlation with velocities
+ Line ratios
  + Nebula versus knot

*** Histograms of different speed classes
:LOGBOOK:
CLOCK: [2016-11-30 Wed 17:50]--[2016-11-30 Wed 19:00] =>  1:10
:END:
+ We can divide the knots into 3 populations according to the fitted peak velocity:
  + Ultra-fast :: Vhel < -75 km/s
  + Fast :: Vhel = -75 \to -40 km/s
  + Slow :: Vhel = -40 \to -5 km/s
+ The fast/slow division is very clear, since there is a distinct lack of knots with V \approx -40 km/s
+ The Fast/ultrafast division is based on fact that there are no /bright/ knots with V < -75
+ The velocity differences cannot be due only to projection angle because the other properties also differ between the populations.  In particular:
  1. Linewidths
     + The ultra-fast population has narrowest linewidths, peaking around 10 km/s for the [N II] FWHM (after subtracting instrumental width)
     + The fast population has the majority of widths in range 12 \to 20
     + The slow population has a much broader range of widths.  About half of them are similar to fast population, but the other half are much broader: 25 \to 50 km/s
     + The Nebular widths should be (min, mean, max) = (14, 22, 30) km/s
       + [-] *TODO* They are currently much broader, but I can fix that in post
     + *Interpretation:*
       - From HRH, the FWZI is equal to the bowshock velocity, independent of orientation
       - For a triangular line profile: FWHM = 0.5 FWZI, but for other shapes this might vary.  For a very flat-nosed bowshock, the wings hardly contribute and so FWHM \ll FWZI
       - 
  2. Brightness
     + 
  3. [N II] / Ha ratio
**** PDF Files
+ [[file:knot-histogram-vel.pdf]]
+ [[file:knot-histogram-bright.pdf]]
+ [[file:knot-histogram-fwhm.pdf]]
+ [[file:knot-histogram-ratio.pdf]]


** TODO Revisiting making region files per slit 
+ Now that I am making more regions, I need to re-open this task
*** [0/2] Create high and low velocity region files 
+ [-] knots faster than -50 km/s
  + [X] Test it with the knots I have
  + [ ] Re-run when I have all the knots
+ [-] knots slower than -50 km/s
  + [X] Test it with the knots I have
  + [ ] Re-run when I have all the knots
*** DONE Adaptation for new Will region files
CLOSED: [2016-11-18 Fri 16:40]
+ [2016-11-18 Fri] There are a few minor issues with using =knot-regions-for-slits.py= for my new knot regions 
+ [X] Don't get velocities from the table any more
  + We parse the velocity from the =text= field
  + And use nominal widths
+ [X] Filter out the stars and arrows - anything that is not a knot
  + Add an =if= clause to the =knot_dict= comprehension
+ [X] Work around color parsing bug in pyregion 
  + Problem is with reading colors that contain hash symbols:
    #+BEGIN_SRC python :results output verbatim
      import pyregion
      badstring = 'fk5;ellipse(5:34:26.665,-5:26:16.18,6.62208",12.3556",345) # color=#6a8 width=4 text={4267-616 (-55)} tag={Fast blue}'
      goodstring = badstring.replace('#6a8', '6a8')

      badregion, =  pyregion.parse(badstring)
      goodregion, = pyregion.parse(goodstring)

      print('pyregion version', pyregion.__version__)
      print('Bad region:', badregion.attr)
      print('Good region:', goodregion.attr)
    #+END_SRC

      #+RESULTS:
      : pyregion version 2.0.dev275
      : Bad region: (['color'], {})
      : Good region: ([], {'width': '4 ', 'text': '4267-616 (-55)', 'color': '6a8', 'tag': {'Fast blue'}})
  + Works fine with the new =astropy.regions= package
    #+BEGIN_SRC python :results output verbatim
      import regions

      badstring = 'fk5;ellipse(5:34:26.665,-5:26:16.18,6.62208",12.3556",345) # color=#6a8 width=4 text={4267-616 (-55)} tag={Fast blue}'

      print('astropy.regions version', regions.__version__)

      region, = regions.ds9_string_to_region_list(badstring)
      print(region)
      
    #+END_SRC

    #+RESULTS:
      : astropy.regions version 0.1
      : ('ellipse', [<FK5 Coordinate (equinox=J2000.000): (ra, dec) in deg
      :     (83.61110417, -5.43782778)>, <Quantity 6.62208 arcsec>, <Quantity 12.3556 arcsec>, <Quantity 345.0 deg>], {'text': '{4267-616 (-55)} ', 'width': '4', 'tag': '{Fast blue}', 'include': '', 'color': '#6a8'})
  + Possible solutions:
    1. Switch to =astropy.regions=
       + But that would require major surgery
    2. *best* Remove the "#" symbols before parsing
       

** DONE Making region files of all the knots in each slit
CLOSED: [2016-10-26 Wed 16:41]
+ This will be a little complicated, but we should be able to do it:
  1. Read in the region file to get the shapes of each knot
  2. Read the table of velocities and widths of each knot too
  3. Create a mask in RA, Dec for each knot
  4. Loop over all the slits
     - (a) Initialize empty list of regions for this slit
     - (b) Find the intersection between slit and each knot region
     - (c) For each knot that overlaps the slit
       + I. Convert to our big image pixel coords: (X, Y)
       + II. Construct a region in P-V space
       + III. Append to list of regions for this slit
     - (d) Write out a region file for knots in the slit

*** knot-regions-for-slits.py
:PROPERTIES:
:header-args: :tangle knot-regions-for-slits.py :eval no
:END:
**** Imports and command line args
#+BEGIN_SRC python
  import sys
  import os
  import glob
  import numpy as np
  from astropy.io import fits
  from astropy.table import Table
  from astropy.wcs import WCS
  from astropy.wcs.utils import pixel_to_skycoord, skycoord_to_pixel
  import pyregion

  try: 
      knot_region_file = sys.argv[1]
      line_id = sys.argv[2]
      region_frame = sys.argv[3]
  except IndexError:
      sys.exit('Usage: {} KNOT_REGION_FILE (ha|nii) (linear|image)'.format(sys.argv[0]))
#+END_SRC
**** Step 1: Read in region file and turn into a dict of masks
First read in the file using =pyregion= 
#+BEGIN_SRC python
  with open(knot_region_file) as f:
      knot_region_string = f.read()
  # Workaround for bug in pyregion.parse when color is of form '#fff'
  knot_region_string = region_string.replace('color=#', 'color=')
  knot_regions = pyregion.parse(knot_region_string)
#+END_SRC

We now have a =pyregion.ShapeList= object, in which each element is a =pyregion.Shape= object.  We want to construct a dict keyed on the knot name, and with value being single-element =pyregion.ShapeList= that contains only one knot. 

#+BEGIN_SRC python
  knot_dict = {knot.attr[1]['text']: pyregion.ShapeList([knot])
               for knot in knot_regions
               if 'text' in knot.attr[1] and knot.name == 'ellipse'}
#+END_SRC

We can now use the =get_mask(hdu=XXX)= method on each value in =knot_dict= to get the mask corresponding to each knot for a particular FITS HDU. 

**** Step 2: Read table of velocities
#+BEGIN_SRC python
  tab = Table.read('alba-knots-frompdf.tab',
                   format='ascii', delimiter='\t')
  vcol = {'ha': 'V(Ha)', 'nii': 'V([N II])'}
  wcol = {'ha': 'W(Ha)', 'nii': 'W([N II])'}

#+END_SRC
The columns that we will need from this table are:
+ =knot=
+ =V(Ha)= and =V([N II])=
+ =W(Ha)= and =W([N II])=
**** Step 3: Load the image and all the PV spectra
+ We already have the regions from Step 1.  But we also need to set up the HDU for the slit positions on the plane of the sky.
+ We use a trimmed-down version of what we already did in [[id:20ADFA6F-DE49-454E-B433-D684CF3FB826][Program to generate spectral map: spectral-map.py]]
+ In this step, we just get the HDU from the image and construct a WCS object for good measure
  + The HDU is used to obtain the mask for each knot in image coordinates

#+BEGIN_SRC python
  imhdu = fits.open('new-slits-{}-allvels.fits'.format(line_id))['scaled']
  imwcs = WCS(imhdu.header)
#+END_SRC

+ We also will need 2D arrays that correspond to the image pixels (X, Y)

#+BEGIN_SRC python
  ny, nx = imhdu.data.shape
  Y, X = np.mgrid[0:ny, 0:nx]
#+END_SRC

+ And then get the list of spectra, which we wrangle into a dict
+ Note that we are using the ones that start =XX= or =YY=, which have a default WCS that has been calibrated in heliocentric velocity and in image pixels from the =new-slits= map. 

#+BEGIN_SRC python
  speclist = glob.glob('Calibrated/BGsub/*-{}-vhel.fits'.format(line_id))
  specdict = {fn.split('/')[-1].split('.')[0]: fits.open(fn)[0] for fn in speclist}
#+END_SRC

+ Setup the region files that we are going to write for each slit
  + We will write the knot regions as ellipses in image coordinates
#+BEGIN_SRC python
  region_template = 'ellipse({1:.1f},{2:.1f},{3:.1f},{4:.1f},0) # text={{{0}}}'
  region_header_lines = [
      'global color=green font="helvetica 10 normal"', 
      region_frame,
  ]
  slit_region_dir = knot_region_file.replace('.reg', '-SLITS')
  if not os.path.isdir(slit_region_dir):
      os.mkdir(slit_region_dir)
#+END_SRC
**** Step 4: Process each slit
***** Parse the =knot_id= to try and find a velocity
#+BEGIN_SRC python
  def look_for_velocity(knot_id, line_id):
      '''Try to parse something like "4299-524 (-70)"
      Returns (velocity, width)
      '''
      # Try and get something like "(-70)"
      maybe_parens = knot_id.split()[-1]
      if maybe_parens.startswith('(') and maybe_parens.endswith(')'):
          vstring = maybe_parens[1:-1]
          try:
              v0 = float(vstring)
              w = 30.0 if line_id == 'ha' else 20.0
          except ValueError:
              v0, w = None, None
      else:
          v0, w = None, None
      return v0, w
#+END_SRC
***** Find the mask that defines the slit in image pixels
:PROPERTIES:
:ID:       D83FE9CC-F31E-4E8F-9623-6DBB00864998
:END:
+ We want to find =specmask= which defines the slit position in the image pixel (X, Y) frame
#+name: get_specmask
#+BEGIN_SRC python
  def get_specmask(specwcs, imshape, slit_pix_width=4):
      """Find image mask that corresponds to a given slit

      `specwcs` is a WCS for the slit spectrum, which should have the second pixel dimension along the slit and the X, Y coords as the second and third world coordinates.  `imshape` is the shape (ny, nx) of the desired mask
      """

      # Length of slit in slit pixels
      ns = specwcs._naxis2
      # Shape of image mask
      ny, nx = imshape

      # Coord arrays along the slit
      V, X, Y = specwcs.all_pix2world([0]*ns, range(ns), [0]*ns, 0)

      # Initialize empty mask
      specmask = np.zeros(imshape).astype(bool)

      # Fill in the mask pixel-by-pixel along the slit
      for x, y in zip(X, Y):
          # Find output pixels corresponding to corners of slit pixel
          # (approximate as square)
          i1 = int(0.5 + x - slit_pix_width/2)
          i2 = int(0.5 + x + slit_pix_width/2)
          j1 = int(0.5 + y - slit_pix_width/2)
          j2 = int(0.5 + y + slit_pix_width/2)
          # Make sure we don't go outside the output grid
          i1, i2 = max(0, i1), max(0, i2)
          i1, i2 = min(nx, i1), min(nx, i2)
          j1, j2 = max(0, j1), max(0, j2)
          j1, j2 = min(ny, j1), min(ny, j2)

          specmask[j1:j2, i1:i2] = True

      return specmask
#+END_SRC
***** Loop over the individual slits to do the work
#+BEGIN_SRC python
  for specname, spechdu in specdict.items():
      print(specname)
      pvregions = []
      # WCS transform for the slit
      specwcs = WCS(spechdu.header, key='V')
      specmask = get_specmask(specwcs, imhdu.data.shape)
      if (X[specmask].max() - X[specmask].min()
          > Y[specmask].max() - Y[specmask].min()):
          orient = 'horizontal'
      else:
          orient = 'vertical'

      slit_region_file =  slit_region_dir + '/' + specname + '.reg'
      for knot_id, knot_region in knot_dict.items():
          # Find mask for knot and overlap with the slit mask
          knotmask = knot_region.get_mask(imhdu)
          overlap = knotmask & specmask
          # Number of pixels in overlap region
          n = overlap.sum()
          if n > 0:
              # New Will knots have velocity encoded in knot_id
              v0, dv = look_for_velocity(knot_id, line_id)
              if v0 is None:
                  # But fall back on table look-up for the original Alba knots
                  if not knot_id in tab['knot']:
                      # If not there either, then skip this region 
                      print('Warning: Knot', knot_id, 'not found in table!')
                      continue
                  # Extract row from table
                  knotrow = tab[tab['knot'] == knot_id][0]
                  v0, dv = knotrow[vcol[line_id]], knotrow[wcol[line_id]]
              if region_frame == 'image':
                  # Find j-pixel coordinates along the slit that correspond to this knot
                  _, jslit, _ = specwcs.all_world2pix([0]*n, X[overlap], Y[overlap], 0)
                  j1, j2 = jslit.min(), jslit.max()
                  # Find i-pixel coordinates coresponding to knot velocity +/- width
                  # Make sure to convert from km/s -> m/s since wcs is in SI
                  v1, v2 = 1000*(v0 - dv/2), 1000*(v0 + dv/2)

                  [i1, i2], _, _ = specwcs.all_world2pix([v1, v2], [0, 0], [0, 0], 0)
                  i0, w = 0.5*(i1 + i2), i2 - i1
                  j0, h = 0.5*(j1 + j2), j2 - j1
                  pvregions.append([knot_id, i0, j0, w, h])
              elif region_frame == 'linear':
                  # Regions written in x = km/s and y = map X or Y,
                  # depending on orientation
                  S = X if orient == 'horizontal' else Y
                  s1, s2 = S[overlap].min(), S[overlap].max()
                  s0, ds = 0.5*(s1 + s2), (s2 - s1)
                  pvregions.append([knot_id, v0, s0, dv, ds])    
              else:
                  raise NotImplementedError('Region frame must be "linear" or "image"')
      # If there are any knot regions for this slit, then write them out
      if pvregions:
          print(len(pvregions), 'regions found')
          region_lines = [region_template.format(*data) for data in pvregions]
          with open(slit_region_file, 'w') as f:
              f.write('\n'.join(region_header_lines + region_lines))

#+END_SRC

The box regions look like this
: box(39,239.5,13.8,8.5,0) # text={4280-551}
while the ellipse region looks like this
: ellipse(445.54987,1190.0392,41.5,12,3.4650748e-06) # color=yellow text={050-422}
*** Run it to make the region files
Takes a while, so do it in eshell
#+BEGIN_SRC sh
time python knot-regions-for-slits.py Alba-Regions-2016-10/blue_knots_final.reg ha image
#+END_SRC
** TODO Making plots of the PV spectra with knots indicated
+ This will be like the separate ds9 instances that I ran in [[id:C3FBB765-77B5-47FA-B02C-E6DE1BE929A2][Trying out the spectra display]]
+ But will be done with aplpy like for [[id:4AEF818A-267B-4B38-8D13-565F39053C74][The isovelocity images]]
+ Layout
  + [X] Ha and [N II] spectrum side by side
  + [X] With image of the slits underneath as a key, indicating which slit this is
  + [ ] Somehow incorporate coordinate info on the PV diagrams
    + Currently it is in map pixels
    + Put a OW linear scale to the coordinate key:
      + RA: 4240, 4360, 4480, (5)000, (5)120
      + Dec: 000, 200, 400, 600, 800
      + This is of course a nightmare because the numbers *are not decimal*
        + But rather some digits are in base-60!
*** owutil.py - Convert to and from OW96 coordinates
:PROPERTIES:
:header-args:python: :tangle owutil.py :eval no :noweb yes
:END:
#+BEGIN_SRC python
  def ra_ow(ra):
      """Convert astropy.coordinates RA to OW96 scheme"""
      h, m, s = ra.hms
      assert(int(h) == 5 and int(m/10) == 3)
      ra_code = "{:04d}".format(int((m - 30)*1000 + 10*(s + 0.05)))
      if ra_code.startswith('5'):
          ra_code = ra_code[1:]
      return ra_code

  def dec_ow(dec):
      """Convert astropy.coordinates Dec to OW96 scheme"""
      d, m, s = dec.dms
      assert(int(d) == -5)
      dec_code = "{:04d}".format(int(abs(m)*100 + abs(s) + 0.5))
      if dec_code.startswith('2'):
          dec_code = dec_code[1:]
      return dec_code


  def ow_from_coord(c):
      return "{}-{}".format(ra_ow(c.ra), dec_ow(c.dec))


  if __name__ == '__main__':
      from astropy import coordinates as coord
      import astropy.units as u

      # th1c
      c = coord.get_icrs_coordinates('tet01 ori c')
      print('theta 1 C Ori is', ow_from_coord(c))

      # LL2
      c = coord.SkyCoord('5:34:40.854 -5:22:42.58', unit=(u.hourangle, u.deg))
      print('LL Ori is', ow_from_coord(c))
  
#+END_SRC


#+BEGIN_SRC bash :results verbatim
python owutil.py
#+END_SRC

#+RESULTS:
: theta 1 C Ori is 165-323

*** multi-slit-pv-graphs.py - generate figures of each slit PV spectrum
:PROPERTIES:
:header-args:python: :tangle multi-slit-pv-graphs.py :eval no :noweb yes
:END:

**** Run the PV figure program
#+BEGIN_SRC bash :results verbatim
{ time date; } 2>&1
#+END_SRC

#+RESULTS:
: Tue Nov  1 11:49:55 CST 2016
: 
: real	0m0.002s
: user	0m0.001s
: sys	0m0.001s

#+BEGIN_SRC bash :results verbatim
{ time python multi-slit-pv-graphs.py vert; }  2>&1
#+END_SRC

#+RESULTS:
#+begin_example
WARNING: FITSFixedWarning: The WCS transformation has more axes (3) than the image it is associated with (2) [astropy.wcs.wcs]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: FITSFixedWarning: RADECSYS= 'FK5 ' / Astrometric system 
the RADECSYS keyword is deprecated, use RADESYSa. [astropy.wcs.wcs]
/Users/will/anaconda/lib/python3.5/site-packages/matplotlib/contour.py:1538: UserWarning: Log scale: values of z <= 0 have been masked
  warnings.warn('Log scale: values of z <= 0 have been masked')
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
/Users/will/anaconda/lib/python3.5/site-packages/aplpy/normalize.py:115: RuntimeWarning: invalid value encountered in less
  negative = result < 0.
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
WARNING: Cannot determine equinox. Assuming J2000. [aplpy.wcs_util]
Calibrated/BGsub/XX1523-2010-01-202-plot.jpg
Calibrated/BGsub/XX1540-2010-01-124-plot.jpg
Calibrated/BGsub/XX1549-2010-01-206-plot.jpg
Calibrated/BGsub/XX1557-2010-01-133-plot.jpg
Calibrated/BGsub/XX1558-2010-01-128-plot.jpg
Calibrated/BGsub/XX1568-2010-01-210-plot.jpg
Calibrated/BGsub/XX1575-2010-01-137-plot.jpg
Calibrated/BGsub/XX1585-2010-01-214-plot.jpg
Calibrated/BGsub/XX1595-2010-01-145-plot.jpg
Calibrated/BGsub/XX1601-2010-01-248-plot.jpg
Calibrated/BGsub/XX1609-2010-01-219-plot.jpg
Calibrated/BGsub/XX1616-2010-01-157-plot.jpg
Calibrated/BGsub/XX1620-2010-01-236-plot.jpg
Calibrated/BGsub/XX1633-2010-01-240-plot.jpg
Calibrated/BGsub/XX1646-2010-01-244-plot.jpg
Calibrated/BGsub/XX1656-2010-01-252-plot.jpg

real	13m1.026s
user	11m45.210s
sys	1m5.108s
#+end_example

#+BEGIN_SRC bash :results verbatim
python multi-slit-pv-graphs.py horiz
#+END_SRC

#+RESULTS:
: Calibrated/BGsub/YY0936-2013-02-165-plot.jpg

#+BEGIN_SRC bash :results verbatim
python multi-slit-pv-graphs.py ll2
#+END_SRC

#+RESULTS:
#+begin_example
Calibrated/BGsub/XX1141-2007-01b-2061-plot.jpg
Calibrated/BGsub/XX1150-2006-02-326-plot.jpg
Calibrated/BGsub/XX1154-2007-01b-2037-plot.jpg
Calibrated/BGsub/XX1156-2006-02-318-plot.jpg
Calibrated/BGsub/XX1162-2006-02-260-plot.jpg
Calibrated/BGsub/XX1166-2006-02-270-plot.jpg
Calibrated/BGsub/XX1170-2006-02-276-plot.jpg
Calibrated/BGsub/XX1176-2006-02-281-plot.jpg
Calibrated/BGsub/XX1180-2006-02-286-plot.jpg
Calibrated/BGsub/XX1182-2006-02-291-plot.jpg
Calibrated/BGsub/XX1189-2006-02-296-plot.jpg
Calibrated/BGsub/XX1189-2007-01b-2041-plot.jpg
Calibrated/BGsub/XX1197-2006-02-303-plot.jpg
Calibrated/BGsub/XX1204-2007-01b-2045-plot.jpg
Calibrated/BGsub/XX1218-2007-01b-2049-plot.jpg
Calibrated/BGsub/XX1232-2007-01b-2053-plot.jpg
Calibrated/BGsub/XX1251-2007-01b-2057-plot.jpg
Calibrated/BGsub/XX1259-2006-02-313-plot.jpg
Calibrated/BGsub/XX1389-2010-01-078-plot.jpg
#+end_example

#+BEGIN_SRC bash :results verbatim
python multi-slit-pv-graphs.py east
#+END_SRC

#+RESULTS:
: Calibrated/BGsub/YY1280-2015-02-0012-plot.jpg
: Calibrated/BGsub/YY1287-2013-12-116-plot.jpg
: Calibrated/BGsub/YY1289-2013-12-090-plot.jpg
: Calibrated/BGsub/YY1295-2013-12-111-plot.jpg
: Calibrated/BGsub/YY1308-2015-02-0003-plot.jpg
: Calibrated/BGsub/YY1312-2013-12-102-plot.jpg
: Calibrated/BGsub/YY1314-2013-12-086-plot.jpg
: Calibrated/BGsub/YY1401-2013-02-024-plot.jpg

#+BEGIN_SRC bash :results verbatim
python multi-slit-pv-graphs.py ll1
#+END_SRC

#+RESULTS:
: Calibrated/BGsub/XX0430-2007-01-054-plot.jpg
: Calibrated/BGsub/XX0443-2007-01-067-plot.jpg
: Calibrated/BGsub/XX0447-2007-01-072-plot.jpg

**** Imports and command line arg to choose dataset
#+BEGIN_SRC python
  import sys
  import os
  import glob
  import numpy as np
  from astropy.io import fits
  from astropy.table import Table
  from astropy.wcs import WCS
  from astropy.wcs.utils import pixel_to_skycoord, skycoord_to_pixel
  from astropy import coordinates as coord
  import astropy.units as u
  import owutil
  import pyregion
  import matplotlib
  matplotlib.use("Agg")
  import aplpy
  from matplotlib import pyplot as plt
  from matplotlib import cm, colors

  try: 
      dataset_id = sys.argv[1]
  except IndexError:
      sys.exit('Usage: {} DATASET_ID'.format(sys.argv[0]))
#+END_SRC


**** COMMENT Monkey patch aplpy to fix region plotting    :noexport:
+ There is a problem with =aplpy.regions.Regions.show_regions= in that it tries to select the =WCSSUB_CELESTIAL= portion of the WCS
  + This doesn't work for position-velocity diagrams
+ Solution - rewrite that function to use the unadulterated 
+ *CANCELED* Useless since pyregion does not properly support WCS for mixed axes

#+BEGIN_SRC python :tangle no
  def FIXED_show_regions(self, region_file, layer=False, **kwargs):
      """
      Overplot regions as specified in the region file.

      WJH 29 Oct 2016: Modify to not subset the WCS to celestial portion

      Parameters
      ----------

      region_file: string or pyregion.ShapeList
          Path to a ds9 regions file or a ShapeList already read
          in by pyregion.

      layer: str, optional
          The name of the layer

      kwargs
          Additional keyword arguments, e.g. zorder, will be passed to the
          ds9 call and onto the patchcollections.
      """

      ## WJH 29 Oct 2016: This is the only line changed
      PC, TC = ds9(region_file, wcs.WCS(self._header), **kwargs)

      # ffpc = self._ax1.add_collection(PC)
      PC.add_to_axes(self._ax1)
      TC.add_to_axes(self._ax1)

      if layer:
          region_set_name = layer
      else:
          self._region_counter += 1
          region_set_name = 'region_set_' + str(self._region_counter)

      self._layers[region_set_name] = PC
      self._layers[region_set_name + "_txt"] = TC


  ## Apply the monkey patch
  aplpy.regions.Regions.show_regions = FIXED_show_regions
  ## Other symbols that need to be defined for it to work
  ds9 = aplpy.regions.ds9
  from astropy import wcs

#+END_SRC
**** Read in all the spectra
+ Patterns for finding all the slits in each dataset
#+BEGIN_SRC python
  glob_patterns = {
      'll2': 'XX1[123]*',
      'horiz': 'YY[01][019]*',
      'vert': 'XX1[56]??-2010-01-*',
      'east': 'YY1[234]*',
      'll1': 'XX0[45]*',
  }
#+END_SRC

+ Generate list of FITS files
#+BEGIN_SRC python
  hfiles = glob.glob('Calibrated/BGsub/' + glob_patterns[dataset_id] + '-ha-vhel.fits')
  nfiles = glob.glob('Calibrated/BGsub/' + glob_patterns[dataset_id] + '-nii-vhel.fits')
  map_fn = 'new-slits-ha-allvels.fits'
#+END_SRC

+ Location of the region files:
#+BEGIN_SRC python
  slit_region_dir = 'Alba-Regions-2016-10/blue_knots_final-SLITS'
#+END_SRC

+ Figure layout parameters: 
  + Spectra above, map below
  + Ha and [N II] spectra side by side
#+BEGIN_SRC python
  figwidth, figheight = 12, 12
  subplot_windows = { 
      # x0, y0, dx, dy in fractions of figure size
      'ha': [0.08, 0.4, 0.44, 0.58],
      'nii': [0.54, 0.4, 0.44, 0.58],
      'map': [0.15, 0.06, 0.7, 0.28]
  }
#+END_SRC

+ Where to center the slits in each dataset
+ And how long the total window needs to be, so that we do not cut anything off
+ These are used in the =recenter= method below.
#+BEGIN_SRC python
  XYcenter = {
      'll2': 1290.0,
      'horiz': 1475.0,
      'vert': 1050.0,
      'east': 800.0,
      'll1': 925.0,
  }
  XYlength = {
      'll2': 720.0,
      'horiz': 720.0,
      'vert': 720.0,
      'east': 1200.0,
      'll1': 720.0,
  }
#+END_SRC

+ Style for slit PV plots
  + Contour levels show the bright parts
  + Color scale shows the faint parts
#+BEGIN_SRC python
  pv_contour_style = {
      'levels': [0.05, 0.0707, 0.1, 0.141, 0.2, 0.282, 0.4, 0.564],
      'colors': 'k',
  }
  pv_colorscale_style = {
      'aspect': 'auto', 'cmap': 'CMRmap', 'stretch': 'sqrt',
      'vmin': -0.0003, 'vmax': 0.05}
#+END_SRC

+ A black box to make the labels stand out better
#+BEGIN_SRC python
blackbox = {'facecolor': 'black', 'alpha': 0.7}
#+END_SRC

+ Fix up the WCS of the slit spectra
  1. [X] Convert m/s -> km/s
     - For this, it was only necessary to fool WCSlib by changing the coordinate tpe from =VOPT= to =offset=, so that =astropy.wcs= wouldn't apply any "fixes"
  2. [X] Convert pixels -> RA or Dec
     - This is difficult to get to work with aplpy since we can't have a strictly 2D wcs in which only one of the axes is celestial.
     - There might be a way to get it to work with a pseudo-3d wcs and slicing it, but it seems that would only work if the pixel axes are orthogonal and in same order as the ra, dec axes
     - Might be better to use WCSaxes instead
     - So for the moment, we will ditch this
  3. [X] The horizontal slits come out upside down.  This seems to be because CDELT2 is negative.
     - The only way to fix this would seem to be to
       + flip the data array
       + change CRPIX2 to be 1 + NAXIS2 - CRPIX2
       + change sign of CDELT2
     - But of course this causes a problem with the region files if they are in image coordinates
       + [2016-10-29 Sat 20:02] I tried to switch to world coordinates for the region file
         + But that was a can of worms and I am abandoning it
           1. There was a problem with aplpy for non-celestial frames, which I have fixed by monkey-patching
           2. But pyregion also has problems with these, which I can't easily fix
       + So, back to the image coordinates
         + Which means that I have to apply the axis inversion to the regions too
         + /FIXED/ [2016-10-29 Sat 23:58]

#+BEGIN_SRC python
  def fix_pv_wcs(hdr, use_celestial=False):
      newhdr = hdr.copy()

      newhdr['CTYPE1'] = 'offset'

      if use_celestial:
          for k in 'CTYPE', 'CRVAL', 'CRPIX', 'CDELT':
              newhdr[k+'2'] = hdr[k+'3A']
          newhdr['CDELT2'] *= hdr['PC3_2A']

      return newhdr

  def invert_second_fits_axis(hdu):
      """Flip the second (Y) axis of a FITS image in `hdu`

  Modifies the HDU in place.  Does not return a value

      """
      # Flip the y-axis of the data array, which is the first python axis
      hdu.data = hdu.data[::-1, :]
      # We need to also operate on the alternative 'A' WCS because we
      # use it for placing the OW labels
      for key in '', 'A':
          # Move reference pixel
          hdu.header['CRPIX2' + key] = (1 + hdu.header['NAXIS2']
                                        - hdu.header['CRPIX2' + key])
          # Change sign of pixel scale
          hdu.header['CDELT2' + key] *= -1.0

      return None

  def invert_second_region_axis(regions, ny):
      """Flip the second (Y) axis of RegionList `regions`.  

  Second argument, `ny` is length of the y-axis.  

  All y coordinates are transformed to 1 + ny - y

  Modifies the HDU in place.  Does not return a value

      """
      for region in regions:
          region.coord_list[1] = 1 + ny - region.coord_list[1]
      return None
#+END_SRC

+ Re-use the function to [[id:D83FE9CC-F31E-4E8F-9623-6DBB00864998][Find the mask that defines the slit in image pixels]]
#+BEGIN_SRC python
  <<get_specmask>>
#+END_SRC

+ Loop over the spectra
  + Read in the HDUs from the FITS files
    + For map of slits, make one mask for all slits and another mask for only this slit
    + For slit PV diagrams, fix the WCS info
  + Set up the figure sub-panels
  + Plot into each sub-panel
    + Slit spectra:
      1. colorscale
      2. contours
      3. Regions on Ha only
      4. Coordinate grid
      5. [ ] Label of which emission line
    + Map of slit positions
      + [X] Zoom in on region of interest
      + [X] Highlight the current slit
  + Save figure file
#+BEGIN_SRC python
  for hfn, nfn in zip(hfiles, nfiles):
      fig = plt.figure(figsize=(figwidth, figheight))

      hhdu = fits.open(hfn)[0]
      nhdu = fits.open(nfn)[0]
      map_hdu = fits.open(map_fn)['scaled']
      hregfile = os.path.basename(hfn).replace('.fits', '.reg')
      try:
          regions = pyregion.open(os.path.join(slit_region_dir, hregfile))
      except FileNotFoundError:
          regions = None

      all_slits = np.isfinite(map_hdu.data)
      this_slit = get_specmask(WCS(hhdu.header, key='V'), map_hdu.data.shape)
      map_hdu.data[all_slits] = 1.0
      map_hdu.data[this_slit] = 10.0

      hhdu.header = fix_pv_wcs(hhdu.header)
      nhdu.header = fix_pv_wcs(nhdu.header)

      if hhdu.header['CDELT2'] < 0.0:
          invert_second_fits_axis(hhdu)
          invert_second_fits_axis(nhdu)
          if regions is not None:
              invert_second_region_axis(regions, ny=hhdu.header['NAXIS2'])

      hf = aplpy.FITSFigure(data=hhdu, figure=fig, subplot=subplot_windows['ha'])
      nf = aplpy.FITSFigure(data=nhdu, figure=fig, subplot=subplot_windows['nii'])
      mf = aplpy.FITSFigure(data=map_hdu, figure=fig, subplot=subplot_windows['map'])

      for f in hf, nf:
          f.recenter(25.0, XYcenter[dataset_id],
                     width=300.0, height=XYlength[dataset_id])
          f.show_colorscale(**pv_colorscale_style)
          f.show_contour(**pv_contour_style)
          f.add_grid()
          f.grid.set_alpha(0.3)

      if regions is not None:
          hf.show_regions(regions, text_offset=0.0)

      nf.hide_yaxis_label()
      nf.hide_ytick_labels()

      # Add labels for OW coords at y tick points
      w = WCS(nhdu.header, key='A').celestial
      yticks = nf._ax1.get_yticks()
      cc = coord.SkyCoord.from_pixel(yticks, np.zeros_like(yticks), w)
      ows = [owutil.ow_from_coord(c) for c in cc]
      x = nf._ax1.get_xticks()[-1] 
      for y, ow in zip(yticks, ows):
          nf._ax1.text(x, y, ow,
                       bbox=blackbox, color='orange', ha='right', va='center')

      # Add labels for each emission line
      hf.add_label(0.95, 0.95, 'H alpha', relative=True,
                   bbox=blackbox, size='large',
                   horizontalalignment='right', color='yellow')
      nf.add_label(0.05, 0.95, '[N II]', relative=True,
                   bbox=blackbox, size='large',
                   horizontalalignment='left', color='yellow')

      # Deal with the slit position map at the bottom
      mf.recenter(83.6875, -5.4167, width=0.15, height=0.15)
      mf.show_colorscale(aspect='equal', vmin=0.0, vmax=5.0, cmap='RdPu')
      mf.add_grid()
      mf.grid.set_color('black')
      mf.grid.set_alpha(0.1)
      # Include the WFI map for orientation
      mf.show_contour('WFI-Images/Orion_H_A_deep.fits',
                      levels=[3, 4.5, 6, 9, 12, 15, 20, 40, 80, 160, 320],
                      filled=True, alpha=0.3, cmap='Blues',
                      norm=colors.LogNorm(), vmin=3.0, vmax=400.0, overlap=True,
      )

      figfile = hfn.replace('-ha-vhel.fits', '-plot.jpg')
      fig.savefig(figfile, dpi=300)
      print(figfile) 

#+END_SRC

#+RESULTS:

* Slits we haven't used

** Spatial alignment of [O III] slit in W region
+ spec228-oiii.fits
  + Peak brightness at y = 401.6
+ spm231.fits (image + slit in [O III] filter)
  + Peak brightness at y = 339.9
  + Declination: -5:24:05.49
  + 
+ Difference: 61.7

** Message from Alba [2016-04-04 Mon]
#+BEGIN_QUOTE
ya revisÃ© todas las observaciones que tenemos. Tengo algunas dudas de
posiciones que no han sido usadas para los cubos de Ha y [NII] y no
sÃ© porquÃ©. Te resumo:

-En observaciones de 2007a hay 9 posiciones si usar:
spec014-transf.fits
spec016-transf.fits
spec021-transf.fits
spec025-transf.fits
spec029-transf.fits
spec036-transf.fits
spec040-transf.fits
spec044-transf.fits
spec078-transf.fits

-En 2007b solo una sin usar (spec023-transf.fits) que es horizontal y todas
las demas son verticales. Imagino que es por eso que no se usÃ³?

-En 2013b sin usa la spm087_bcrx.fits.



Respecto a las observaciones en [OIII] y [SII] hay 6 espectros tomados
en la zona del oeste que nos pueden ser Ãºtiles. Son estas:

-Del 2007a
spec060-transf.fits en [OIII]
spec065-transf.fits en [SII]

-Del 2010:
spm082-083h.fits en SII
spm086-088h.fits en SII
spm225-226h.fits en SII
spm228-229h.fits en OIII

No son suficientes como para hacer un cubo, pero los espectros si pueden ser
Ãºltiles para el analisis de los knots (de los red bow shocks no porque ninguno
cruza esas posiciones). Te mando un .reg con las seis las posiciones (algunas
se solapan!).


QuÃ© opinas? Lo miras y lo discutimos maÃ±ana?

#+END_QUOTE
* New figures for the paper

** The calibration figures
+ Alba didn't like the color scheme (all pinks and purples)
+ But to change it I need to re-run the calibration program
  + Although I only need to do it for the slits that we are going to show
  + [ ] So find out from Alba what they are 

** The isovelocity images
:PROPERTIES:
:ID:       4AEF818A-267B-4B38-8D13-565F39053C74
:END:
+ Use Aplpy to make 3-color plots
+ This seems to be more involved than I remember it, but never mind


*** Get file names and brightness limits from ds9
:PROPERTIES:
:ID:       AC163DBA-B745-4115-BBCE-B2AAE1C6FAAE
:END:
+ These are the ones that I have saved in [[file:velmaps-2015-10-16.bck]]

**** Utility script for getting info from DS9 about current frame
#+name: get-rgb-info-from-ds9
#+BEGIN_SRC sh :results verbatim
  for chan in red green blue; do
      echo "#### $chan channel ####"
      xpaset -p ds9 rgb $chan
      xpaget ds9 file
      xpaget ds9 scale limits
  done
#+END_SRC

**** Ha line core 
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha+030+050-multibin.fits[SCALED]
: 0.5 2.3659673
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha+010+030-multibin.fits[SCALED]
: 1 6.4149385
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-010+010-multibin.fits[SCALED]
: 0.4 3.9079967

**** [N II] line core 
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii+030+050-multibin.fits[SCALED]
: 0.1 0.77765025
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii+010+030-multibin.fits[SCALED]
: 0.4 3.5500289
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-010+010-multibin.fits[SCALED]
: 0.06 1.0112845


**** H a near blue 
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-030-010-multibin.fits[SCALED]
: 0.05 0.95784455
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-050-030-multibin.fits[SCALED]
: 0.004 0.29859652
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-070-050-multibin.fits[SCALED]
: 0.003 0.21029883


**** H a far blue
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-070-050-multibin.fits[SCALED]
: 0.0097773644 0.24906631
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-090-070-multibin.fits[SCALED]
: 0.0042288617 0.16265318
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-110-090-multibin.fits[SCALED]
: 0.00070055394 0.022560317


**** H a wide blue
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-040-010-multibin.fits[SCALED]
: 0.05 1.2033879
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-070-040-multibin.fits[SCALED]
: 0 0.5
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-120-070-multibin.fits[SCALED]
: 0 0.12073733


**** [N II] wide blue
#+call: get-rgb-info-from-ds9()

#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-040-010-multibin.fits[SCALED]
: 0 0.4
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-070-040-multibin.fits[SCALED]
: 0 0.2
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-120-070-multibin.fits[SCALED]
: 0 0.05

*** DONE Make RGB isovelocity image with AplPy
CLOSED: [2016-03-09 Wed 11:44]

+ Center of FOV convert to degrees: 
  + RA src_calc{deg(15*(5@34'45"))} {{{results(=83.6875=)}}}
  + Dec src_calc{deg(-5@25'00")} {{{results(=-5.41666666667=)}}}
+ Box size
  + RA 1 minute: src_calc{deg(15*(0@1'0"))} {{{results(=0.25=)}}}
  + Dec 10 arcmin: src_calc{deg(0@10'0")} {{{results(=0.166666666667=)}}}


#+name: rgb-isovel-map
#+header: :var RANGES="+030+050 +010+030 -010+010"
#+header: :var LIMTAB=rgb-limits-nii-core
#+header: :var SPECIES="nii" SUFFIX="core" STRETCH="linear"
#+header: :var REGIONS=""
#+BEGIN_SRC python :return figfile :results file
  from astropy.io import fits
  import aplpy
  figfile = 'rgb-isovel-{}-{}.pdf'.format(SPECIES, SUFFIX)
  rgbfiles = ['new-slits-{}{}-multibin.fits'.format(SPECIES, vrange)
              for vrange in RANGES.split()]

  # Unpack the channel brightness limits from table
  [r1, r2], [g1, g2], [b1, b2] = LIMTAB

  # aplpy can only deal with the primary headers, so sort that out first
  template = 'rgb-for-aplpy-{}.fits'
  channels = ['red', 'green', 'blue']
  newfiles = [template.format(chan) for chan in channels]
  for newfn, fn in zip(newfiles, rgbfiles):
      hdu = fits.open(fn)['SCALED']
      hdu.writeto(newfn, clobber=True)

  aplpy.make_rgb_image(newfiles, 'rgb-for-aplpy.png',
                       vmin_r=r1, vmin_g=g1, vmin_b=b1,
                       vmax_r=r2, vmax_g=g2, vmax_b=b2,
                       stretch_r=STRETCH, stretch_g=STRETCH, stretch_b=STRETCH, 
                       make_nans_transparent=True)
  f = aplpy.FITSFigure(newfiles[0])
  f.show_rgb('rgb-for-aplpy.png')
  f.recenter(83.6875, -5.4167, width=0.25, height=0.167)
  if '.reg' in REGIONS:
      f.show_regions(REGIONS)
  f.add_grid()
  f.grid.set_color('white')
  f.grid.set_alpha(0.2)
  f.save(figfile)
#+END_SRC


#+name: rgb-limits-nii-core
| 0.075 | 0.7 |
|   0.3 | 3.3 |
| 0.045 | 1.5 |

#+call: rgb-isovel-map(STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-nii-core.pdf]]

Now we have a sqrt stretch on the intensity
#+name: rgb-limits-ha-core
| 0.55 |  4 |
|  1.2 | 12 |
| 0.45 |  7 |

Old limits when we had a linear stretch
| 0.5 | 2.4 |
| 1.0 | 6.4 |
| 0.4 | 3.9 |

#+call: rgb-isovel-map(SPECIES="ha", LIMTAB=rgb-limits-ha-core, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-core.pdf]]

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-030-010 -050-030 -070-050", SUFFIX="blue") :results file

#+RESULTS:
[[file:rgb-isovel-ha-blue.pdf]]

#+call: rgb-isovel-map(SPECIES="nii", RANGES="-030-010 -050-030 -070-050", SUFFIX="blue") :results file

#+RESULTS:
[[file:rgb-isovel-nii-blue.pdf]]

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-070-050 -090-070 -110-090", SUFFIX="far-blue") :results file

#+RESULTS:
[[file:rgb-isovel-ha-far-blue.pdf]]

#+call: rgb-isovel-map(SPECIES="nii", RANGES="-070-050 -090-070 -110-090", SUFFIX="far-blue") :results file

#+RESULTS:
[[file:rgb-isovel-nii-far-blue.pdf]]

#+name: rgb-limits-ha-wide-blue
| 0.05 | 1.0 |
|  0.0 | 0.3 |
|  0.0 | 0.1 |

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-040-010 -070-040 -120-070", SUFFIX="wide-blue", LIMTAB=rgb-limits-ha-wide-blue, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-wide-blue.pdf]]

#+name: rgb-limits-nii-wide-blue
|  0.01 |  0.3 |
| 0.002 | 0.12 |
| 0.001 | 0.05 |

#+call: rgb-isovel-map(SPECIES="nii", RANGES="-040-010 -070-040 -120-070", SUFFIX="wide-blue", LIMTAB=rgb-limits-nii-wide-blue, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-nii-wide-blue.pdf]]


#+name: rgb-limits-ha-near-red
| 0.0 | 0.1 |
| 0.0 | 0.2 |
| 0.1 | 0.6 |

#+call: rgb-isovel-map(SPECIES="ha", RANGES="+090+110 +070+090 +050+070", SUFFIX="near-red", LIMTAB=rgb-limits-ha-near-red, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-near-red.pdf]]

#+name: rgb-limits-ha-wide-red
| 0.0 | 0.03 |
| 0.0 |  0.1 |
| 0.1 |  0.6 |

#+call: rgb-isovel-map(SPECIES="ha", RANGES="+130+170 +090+130 +050+090", SUFFIX="wide-red", LIMTAB=rgb-limits-ha-wide-red, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-wide-red.pdf]]

#+name: rgb-limits-nii-wide-red
|  0.0 | 0.02 |
|  0.0 | 0.05 |
| 0.02 |  0.2 |

#+call: rgb-isovel-map(SPECIES="nii", RANGES="+130+170 +090+130 +050+090", SUFFIX="wide-red", LIMTAB=rgb-limits-nii-wide-red, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-nii-wide-red.pdf]]

[2016-10-13 Thu] New versions of these images with the knot regions superimposed.  First, Alba's version of the knot regions in [[file:Alba-Regions-2016-10/blue_knots_final.reg]], which have somewhat random colors. 

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-040-010 -070-040 -120-070", REGIONS="Alba-Regions-2016-10/blue_knots_final.reg", SUFFIX="wide-blue-regions", LIMTAB=rgb-limits-ha-wide-blue, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-wide-blue-regions.pdf]]

Next, my original version in [[file:blue-knots.reg]], which have a somewhat logical color scheme, but no labels

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-040-010 -070-040 -120-070", REGIONS="blue-knots.reg", SUFFIX="wide-blue-will-regions", LIMTAB=rgb-limits-ha-wide-blue, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-wide-blue-will-regions.pdf]]

And thirdly, another version I found in [[file:new_blue-knots_id.reg]]

#+call: rgb-isovel-map(SPECIES="ha", RANGES="-040-010 -070-040 -120-070", REGIONS="new_blue-knots_id.reg", SUFFIX="wide-blue-will2-regions", LIMTAB=rgb-limits-ha-wide-blue, STRETCH="sqrt") :results file

#+RESULTS:
[[file:rgb-isovel-ha-wide-blue-will2-regions.pdf]]

*** Figure showing the slit positions
:PROPERTIES:
:ID:       54E9B988-D5C5-4EF2-9A14-1DBBDACE896C
:END:
#+BEGIN_SRC python :eval no :tangle fov-with-slits.py
  import matplotlib
  matplotlib.use("Agg")
  from astropy.io import fits
  from astropy.wcs import WCS
  import aplpy
  import numpy as np
  from matplotlib import cm, colors

  def extract_window_hdu(hdu, x1=0.0, x2=0.6, y1=0.3, y2=1.0):
      """Extract a window from the image in `hdu`

      The window is specified by corners `x1`, `x2`, `y1`, `y2` in
      fractional coordinates. 
      Returns a new `astropy.io.fits.ImageHDU`

      """
      ny, nx = hdu.data.shape
      xslice = slice(int(x1*nx), int(x2*nx))
      yslice = slice(int(y1*ny), int(y2*ny))
      w = WCS(hdu.header)
      newdata = hdu.data[yslice, xslice]
      newheader = w.slice((yslice, xslice)).to_header()
      return fits.ImageHDU(data=newdata, header=newheader)



  fn = 'WFI-Images/Orion_H_A_deep.fits'
  slit_fn = 'new-slits-ha-allvels.fits'
  # cmap = cm.PuRd
  # cmap = cm.magma_r
  cmap = cm.copper_r
  slit_hdu = fits.open(slit_fn)['scaled']
  shallow_hdu = fits.open(fn.replace('deep', 'shallow'))[0]
  m = np.isfinite(slit_hdu.data)
  slit_hdu.data[m] = 1.0
  slit_hdu.data[~m] = 0.0
  figfile = 'fov-with-slits.pdf'
  f = aplpy.FITSFigure(fn)
  f.recenter(83.7375, -5.4167, width=0.35, height=0.25)
  f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
  f.show_contour(extract_window_hdu(shallow_hdu),
                 levels=[20.0, 30.0, 40.0, 50.0,
                         70.0, 100.0, 200.0, 400.0, 800.0],
                 norm=colors.LogNorm(), vmin=0.3, vmax=1000.0,
                 cmap=cmap, filled=True, alpha=0.5, overlap=True)
  f.show_contour(slit_hdu,
                 levels=[0.01, 10.0],
                 filled=True, alpha=0.4, colors='#00a0ff', overlap=True)
  f.add_grid()
  f.grid.set_color('white')
  f.grid.set_alpha(0.2)
  f.save(figfile)
  f.save(figfile.replace('.pdf', '.jpg'), dpi=300, format='jpeg')
  print(figfile)
#+END_SRC

Run this in the shell since it can take 2 minutes if using filled contours
#+BEGIN_SRC sh :eval no
  time python fov-with-slits.py
#+END_SRC

+ Resulting figure file: [[file:fov-with-slits.pdf]]
+ Also a jpg version [[file:fov-with-slits.jpg]]


** Finding charts
*** TODO Finding chart for Red Arcs
+ This is going to use the WFI image as a backdrop, so it is similar to the [[id:54E9B988-D5C5-4EF2-9A14-1DBBDACE896C][above figure]]
+ How do we want to put the regions on?
#+BEGIN_SRC python :tangle red-bow-finding-chart.py :eval no
  import sys
  import matplotlib
  matplotlib.use("Agg")
  from astropy.io import fits
  import aplpy
  import numpy as np
  from matplotlib import cm, colors

  fn = 'WFI-Images/Orion_H_A_deep.fits'
  figfile = sys.argv[0].replace('.py', '.pdf')
  regfile = 'Alba-Regions-2016-10/bowshocks_arcs.reg'
  f = aplpy.FITSFigure(fn)
  f.recenter(83.6458, -5.4167, width=0.15, height=0.15)
  f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
  f.add_grid()
  f.grid.set_color('white')
  f.grid.set_alpha(0.2)
  f.show_regions(regfile)
  f.save(figfile)
  print(figfile)
#+END_SRC

#+BEGIN_SRC bash :results file :exports both
python red-bow-finding-chart.py
#+END_SRC

#+RESULTS:
| INFO:                     | Auto-setting | vmin       | to | 3.191e+00 | [aplpy.core] |              |
| INFO:                     | Auto-setting | vmax       | to | 2.112e+01 | [aplpy.core] |              |
| INFO:                     | Auto-setting | resolution | to |   292.762 | dpi          | [aplpy.core] |
| red-bow-finding-chart.pdf |              |            |    |           |              |              |

*** DONE Finding chart for blue knots
CLOSED: [2017-01-20 Fri 15:02]

#+BEGIN_SRC python :tangle blue-knot-finding-chart.py :eval no
  import sys
  import matplotlib
  matplotlib.use("Agg")
  from astropy.io import fits
  import aplpy
  import numpy as np
  from matplotlib import cm, colors

  fn = 'WFI-Images/Orion_H_A_deep.fits'
  figfile = sys.argv[0].replace('.py', '.pdf')
  regfile = 'Alba-Regions-2016-10/blue_knots_final.reg'
  f = aplpy.FITSFigure(fn)
  f.recenter(83.6458, -5.4167, width=0.15, height=0.15)
  f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
  f.add_grid()
  f.grid.set_color('white')
  f.grid.set_alpha(0.2)
  f.show_regions(regfile)
  f.save(figfile)
  print(figfile)
#+END_SRC

#+BEGIN_SRC bash :results output file :exports both
python blue-knot-finding-chart.py
#+END_SRC

#+RESULTS:
[[file:blue-knot-finding-chart.pdf]]


*** Finding chart for new Will knots
#+BEGIN_SRC python :tangle new-knot-finding-chart.py :eval no
  import sys
  import logging
  logging.disable(logging.INFO)
  import matplotlib
  matplotlib.use("Agg")
  from astropy.io import fits
  import aplpy
  import numpy as np
  from matplotlib import cm, colors

  try:
      vclass = sys.argv[1]
  except IndexError:
      vclass = 'fast'

  fn = 'WFI-Images/Orion_H_B_deep.fits'
  figfile = sys.argv[0].replace('.py', '-{}.pdf'.format(vclass))
  # regfile = 'Will-Regions-2016-12/knots-{}-wcs.reg'.format(vclass)
  regfile = 'Will-Regions-2016-12/bars-from-boxes-{}-groups-wcs.reg'.format(vclass)
  f = aplpy.FITSFigure(fn)
  f.recenter(83.6458, -5.4167, width=0.15, height=0.15)
  f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
  f.add_grid()
  f.grid.set_color('red')
  f.grid.set_alpha(0.2)
  f.show_regions(regfile)
  f.save(figfile)
  print(figfile, end='')
#+END_SRC

#+BEGIN_SRC bash :results output file :exports both
python new-knot-finding-chart.py ultra
#+END_SRC

#+RESULTS:
[[file:new-knot-finding-chart-ultra.pdf]]

#+BEGIN_SRC bash :results output file :exports both
python new-knot-finding-chart.py fast
#+END_SRC

#+RESULTS:
[[file:new-knot-finding-chart-fast.pdf]]

#+BEGIN_SRC bash :results output file :exports both
python new-knot-finding-chart.py slow
#+END_SRC

#+RESULTS:
[[file:new-knot-finding-chart-slow.pdf]]


**** Color the regions according to velocity
+ If we use aplpy's =FitsFigure.show_regions=, then we have the problem that pyregions cannot deal with the colors of the form =#fff=
+ Possible plan to get round this
  - Read the region file first with =load_regions= from [[file:boxbar_utils.py]], which removes hash from colors (see [[id:D2C4A57A-352D-4EE3-8A8E-33A4DA9B8D34][down here]])
  - But then we have to decide between options:
    1. Somehow work out how to represent the colors in the =pyregion.ShapeList= so that =FitsFigure.show_regions= will automatically do the right thing
    2. Or, use =FitsFigure.show_polygons= instead, in which case we would have to do the work of extracting the coordinates and attributes from the =ShapeList=
    3. Or even, ditch aplpy entirely and use =wcsaxes= instead. In that case, we would just use matplotlib's normal =ax.add_patch= with a =matplotlib.patches.Polygon(xy, ..., transform=ax.get_transform('world'))=
       - Note that this is now incorporated as =astropy.visualization= 
  - I think that 2 or 3 would be easier and more robust
**** Re-implementation using wcsaxes
#+BEGIN_SRC python :tangle alt-knot-finding-chart.py
  import sys
  import logging
  logging.disable(logging.INFO)
  import matplotlib
  matplotlib.use("Agg")
  from astropy.io import fits
  from astropy.wcs import WCS
  import numpy as np
  from matplotlib import cm, colors

  try:
      vclass = sys.argv[1]
  except IndexError:
      vclass = 'fast'

  fn = 'WFI-Images/Orion_H_B_deep.fits'
  figfile = sys.argv[0].replace('.py', f'-{vclass}.pdf')
  regfile = f'Will-Regions-2016-12/knots-{vclass}-wcs.reg'

  hdu, = fits.open(fn)
  wcs = WCS(hdu)
  fig, ax = plt.subplots(projection=wcs)

  f.recenter(83.6458, -5.4167, width=0.15, height=0.15)
  f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
  f.add_grid()
  f.grid.set_color('red')
  f.grid.set_alpha(0.2)
  f.show_regions(regfile)
  f.save(figfile)
  print(figfile, end='')

#+END_SRC


* Large scale structures in Orion

** TODO The giant red bow
+ Connection with red-shifted "bar" to the S of LL 1?
  + You can sort of imagine the continuation of the lower wing of the bow raching this feature
  + But to be honest I do not think they are related
    + So far in the wing of the bowshock, the verlocities should not be significantly redshifted anyway
+ Connection to foreground scattering clouds
  + There is a bright line of scattering cloud that runs parallel to the N wing of the bow, but offset to the east by a few arc minutes
  + Perhaps it is related
  + We could maybe do an image of F435W / F555W to highlight the scattering 

* Knot measurements by Alba
[2016-01-14 Thu]

** Plan of things to do 
:LOGBOOK:
CLOCK: [2016-01-26 Tue 09:41]--[2016-01-26 Tue 10:41] =>  1:00
:END:

*** DONE Tasks for will
CLOSED: [2016-01-26 Tue 14:16]
+ [X] Move all the original spectra to somewhere that Alba can find them
+ [X] Show Alba where to find the HST images



*** TODO More tasks for Will
DEADLINE: <2016-02-12 Fri>
+ [X] Check positions of red bowshock from Alba region files
+ [ ] Look for previous mentions of the "wall"
+ [X] Look into Alba's other region files, such as the new_X.reg files
+ [ ] try out google hangouts


*** Identify coherent structures in the map
+ [ ] Plot positions of Alba's knots


** COMMENT Constructing ACS mosaics of the Western region
+ We will combine three strips of Robberto's ACS data
  1. strip1r
  2. strip0r
  3. strip2r
+ Maybe also combine with the WFI image
+ *UNFINISHED* [2016-10-18 Tue 08:37]
  + It is too slow to do it the way I am doing it

#+BEGIN_SRC python :eval no :tangle make-acs-mosaic.py
  import sys
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS

  try:
      fname = sys.argv[1]
  except IndexError:
      sys.exit('Usage: {} FILTERNAME'.format(sys.argv[0]))

  acs_dir = '/Volumes/SSD-1TB/OrionTreasury/acs/'
  acs_fmt = acs_dir + 'hlsp_orion_hst_acs_strip{field}_{fname}_v1_drz.fits'


  # Map all the images to a common grid

  # Use the WCS from the 1r image

  hdu1 = fits.open(acs_fmt.format(field=field, fname=fname))['SCI']
  w1 = WCS(hdu1.header)
  nx, ny = w1._naxis1, w._naxis2
  ipix = np.arange(nx).reshape((1, nx))
  jpix = np.arange(ny).reshape((ny, 1))
  ra, dec = w1.all_pix2world(ipix, jpix, 0)


  for field in '0r', '2r':
      hdu = fits.open(acs_fmt.format(field=field, fname=fname))['SCI']
      w = WCS(hdu.header)

      ii, jj = w.all_world2pix(ra, dec, 0)
    
#+END_SRC

#+BEGIN_SRC bash :results output verbatim
python make-acs-mosaic.py f658n
#+END_SRC

#+RESULTS:
#+begin_example
WCS Keywords

Number of WCS axes: 2
CTYPE : 'RA---TAN'  'DEC--TAN'  
CRVAL : 83.654999000000004  -5.4249999999999998  
CRPIX : 9000.0  3750.0  
CD1_1 CD1_2  : -1.3887357154999239e-05  0.0  
CD2_1 CD2_2  : 0.0  1.3887357154999239e-05  
NAXIS    : 18000 7500
WCS Keywords

Number of WCS axes: 2
CTYPE : 'RA---TAN'  'DEC--TAN'  
CRVAL : 83.650002000000001  -5.3700000000000001  
CRPIX : 9000.0  3750.0  
CD1_1 CD1_2  : -1.388726171857651e-05  0.0  
CD2_1 CD2_2  : 0.0  1.388726171857651e-05  
NAXIS    : 18000 7500
WCS Keywords

Number of WCS axes: 2
CTYPE : 'RA---TAN'  'DEC--TAN'  
CRVAL : 83.704964000000004  -5.4800000000000004  
CRPIX : 9000.0  3750.0  
CD1_1 CD1_2  : -1.388939947712629e-05  0.0  
CD2_1 CD2_2  : 0.0  1.388939947712629e-05  
NAXIS    : 18000 7500
#+end_example

** New tables [2016-01-19 Tue]

*** Dealing with the ajustes files
**** Clean up and rationalize the data
:PROPERTIES:
:TABLE_EXPORT_FILE: alba-knots-ratios.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:END:


First convert it to tab-separated and strip out the anomalous lines with metadata about each knot's fit
#+BEGIN_SRC python :tangle clean_ajustes_data.py :eval no
  for emline in 'nii', 'ha':
      rslt = []
      print('Cleaning', emline, 'ajustes data')
      with open('ajustes_{}.dat'.format(emline)) as f:
          stanzas = f.read().split('\n\n')
          print('Found {} stanzas'.format(len(stanzas)))
          col_labels = stanzas[0].split('\n')[0].split()
          rslt.append('\t'.join(col_labels))
          for stanza in stanzas[1:]:
              # skip first line since it is only metadata
              lines = stanza.split('\n') 
              for line in lines[1:]:
                  values = line.split()
                  # pad short lines
                  values += '-'*(len(col_labels) - len(values))
                  rslt.append('\t'.join(values))

      with open('ajustes_{}_cleaned.tab'.format(emline), 'w') as f:
          f.write('\n'.join(rslt))
  
#+END_SRC


#+BEGIN_SRC sh :results verbatim
python clean_ajustes_data.py
#+END_SRC

#+RESULTS:
: Cleaning nii ajustes data
: Found 49 stanzas
: Cleaning ha ajustes data
: Found 49 stanzas

+ [[file:ajustes_ha_cleaned.tab]]
+ [[file:ajustes_nii_cleaned.tab]]

#+name: make-knot-table
#+BEGIN_SRC python :return outtab
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.table import Table
  import seaborn as sns
  hatab = Table.read('ajustes_ha_cleaned.tab',
                   format='ascii.tab'
  )
  niitab = Table.read('ajustes_nii_cleaned.tab',
                   format='ascii.tab'
  )
  outtab = [
      ['knot', 'knot flux Ha', 'BG flux Ha', 'knot flux N II', 'BG flux N II', 'knot ratio', 'BG ratio'], None,
  ]
  knots = sorted(set(hatab['KNOT']))
  for knot in knots:
      haflux = 0.0
      bghaflux = 0.0
      niiflux = 0.0
      bgniiflux = 0.0
      for _, zona, _, _, flux, _, _ in hatab[hatab['KNOT']==knot]:
          if zona.startswith('Core'):
              bghaflux += flux
          else:
              haflux += flux
      for _, zona, _, _, flux, _, _ in niitab[niitab['KNOT']==knot]:
          if zona.startswith('Core'):
              bgniiflux += flux
          else:
              niiflux += flux
      knot_ratio = niiflux/haflux
      bg_ratio = bgniiflux/bghaflux

      outtab.append([knot,
                     '{:.2f}'.format(haflux),
                     '{:.1f}'.format(bghaflux),
                     '{:.2f}'.format(niiflux),
                     '{:.1f}'.format(bgniiflux),
                     '{:.3f}'.format(knot_ratio),
                     '{:.3f}'.format(bg_ratio)])

#+END_SRC

#+RESULTS: make-knot-table
|     knot | knot flux Ha | BG flux Ha | knot flux N II | BG flux N II | knot ratio | BG ratio |
|----------+--------------+------------+----------------+--------------+------------+----------|
|  050-422 |         2.14 |      186.6 |          -1.00 |         17.8 |     -0.467 |    0.095 |
| 4242-458 |         4.21 |       98.4 |           0.81 |         32.3 |      0.191 |    0.328 |
| 4244-554 |        12.33 |      163.1 |          10.00 |         54.4 |      0.811 |    0.334 |
| 4245-742 |         0.47 |       21.5 |           0.12 |          7.3 |      0.254 |    0.339 |
| 4252-608 |         0.99 |       42.2 |           0.39 |         15.6 |      0.388 |    0.369 |
| 4252-616 |        10.19 |       80.2 |           6.39 |         30.3 |      0.627 |    0.377 |
| 4254-551 |         6.41 |       70.6 |           1.99 |         23.3 |      0.310 |    0.330 |
| 4258-744 |         2.01 |       36.6 |           0.58 |         12.4 |      0.289 |    0.339 |
| 4260-624 |        18.63 |      175.8 |           8.11 |         74.7 |      0.435 |    0.425 |
| 4261-633 |         6.14 |      149.6 |           3.27 |         65.7 |      0.532 |    0.439 |
| 4261-656 |         0.49 |       23.0 |           0.16 |          7.2 |      0.332 |    0.314 |
| 4263-460 |         1.36 |       57.8 |           0.24 |         17.2 |      0.178 |    0.298 |
| 4265-637 |         6.00 |       39.9 |           1.80 |          9.8 |      0.300 |    0.246 |
| 4266-615 |        18.44 |       77.7 |           5.78 |         23.9 |      0.313 |    0.308 |
| 4268-413 |         1.26 |       68.8 |           0.36 |         22.7 |      0.286 |    0.330 |
| 4272-545 |         3.66 |       69.8 |           0.98 |         23.4 |      0.267 |    0.336 |
| 4272-628 |         0.48 |       18.3 |           0.08 |          6.1 |      0.159 |    0.330 |
| 4273-625 |         2.52 |       32.4 |           0.78 |         10.4 |      0.310 |    0.321 |
| 4274-439 |         1.14 |       54.9 |           0.14 |         15.7 |      0.126 |    0.286 |
| 4277-539 |         0.98 |       22.4 |           0.21 |          5.8 |      0.210 |    0.259 |
| 4280-551 |         5.47 |       44.5 |           1.69 |         12.3 |      0.309 |    0.276 |
| 4280-658 |         0.42 |       21.8 |           0.09 |          7.5 |      0.220 |    0.344 |
| 4284-308 |         3.42 |       73.5 |           1.46 |         21.0 |      0.426 |    0.286 |
| 4285-444 |         0.59 |       36.6 |           0.11 |         10.3 |      0.186 |    0.282 |
| 4289-524 |         0.82 |       52.0 |           0.22 |         16.7 |      0.272 |    0.320 |
| 4292-323 |         3.30 |       76.9 |           2.02 |         22.3 |      0.613 |    0.290 |
| 4293-557 |         1.11 |       27.3 |           0.22 |          8.0 |      0.195 |    0.295 |
| 4320-626 |         1.54 |       39.7 |           0.24 |         11.4 |      0.156 |    0.288 |
| 4331-453 |         1.63 |       47.6 |           0.31 |         13.0 |      0.191 |    0.273 |
| 4332-401 |         0.15 |       24.8 |           0.06 |          6.3 |      0.392 |    0.255 |
| 4335-207 |        94.23 |      179.3 |          22.59 |         54.3 |      0.240 |    0.303 |
| 4359-521 |         1.90 |       52.1 |           0.31 |         14.2 |      0.164 |    0.273 |
| 4374-457 |         1.84 |       34.7 |           0.48 |          8.5 |      0.261 |    0.243 |
| 4376-329 |         0.52 |       38.7 |           0.09 |         10.8 |      0.172 |    0.279 |
| 4377-526 |         0.52 |       33.7 |           0.06 |          7.4 |      0.125 |    0.219 |
| 4378-414 |         0.44 |       25.3 |           0.05 |          6.1 |      0.105 |    0.243 |
| 4378-434 |         0.22 |       43.8 |          -1.00 |         11.2 |     -4.545 |    0.256 |
| 4383-411 |         0.39 |       37.1 |           0.04 |         10.0 |      0.099 |    0.270 |
| 4385-243 |         0.33 |       36.8 |          -1.00 |          9.1 |     -3.054 |    0.248 |
| 4389-327 |         0.59 |       68.1 |           0.08 |         17.9 |      0.129 |    0.263 |
| 4396-541 |         0.87 |       74.4 |          -1.00 |         14.6 |     -1.155 |    0.196 |
| 4402-400 |         0.54 |       55.5 |           0.10 |         12.1 |      0.190 |    0.219 |
| 4405-349 |         0.14 |       36.1 |          -1.00 |          8.1 |     -7.052 |    0.225 |
| 4406-330 |         0.24 |       39.4 |           0.03 |          9.0 |      0.131 |    0.229 |
| 4407-229 |         0.19 |       29.3 |           0.03 |          7.7 |      0.168 |    0.261 |
| 4409-243 |         0.18 |       48.5 |          -1.00 |         14.1 |     -5.522 |    0.291 |
| 4456-324 |         0.74 |       79.3 |          -1.00 |         19.0 |     -1.354 |    0.239 |

+ We export this with =C-c t e= to [[file:alba-knots-ratios.tab]]
+ And the graph the ratios in [[id:95640CFC-6797-418E-9A7C-CD52A3DCF1FA][Plot {N II}/Ha ratio in knots vs nebula]]


*** Original files
+ [[file:ajustes_ha.dat]]
+ [[file:ajustes_nii.dat]]
+ [[file:tamagno.dat]]
*** Message from Alba [2016-01-18 Mon]
#+BEGIN_QUOTE
te mando todos los ajustes (diferenciando Ha y [NII]). En cada knot especifico
si ajusto knot junto con el core (cuando estÃ¡n cerca en v) o si los ajusto por
separado. TambiÃ©n el numero total de gaussianas usadas.

Te mando tambiÃ©n el fichero con los tamaÃ±os. Los he calculado teniendo en
cuenta la apertura utilizada y la resoluciÃ³n indicada en las cabeceras de cada
espectro 2D. La tercera columna indica si la redija estÃ¡ en vertical u
horizontal.

Por cierto, se me olvidÃ³ comentarte que hay dos knots medio conflictivos:
   4272-628 que tiene velocidad muy diferente en Ha y [NII] y quizÃ¡s no estÃ©
midiendo lo mismo en ambos
   4335-207 donde el knot y el core no se resuelven y el ajuste de lo que
considera el knot en cada linea es muy diferente. No me parece muy bueno
comparar las dos lÃ­neas

Por Ãºltimo el programa que uso para ajustar los parametros no da como salida
los errores de los parametros,solo el chi2.
#+END_QUOTE
** Things that are missing
+ [X] Error estimates
  + /not available/
+ [X] Sizes of knots
  + How many pixels were taken along slit?
  + Do any cross multiple slits?
    + only measured in brightest slit
+ [X] Background brightness
** Table of velocity, fwhm, flux
:PROPERTIES:
:TABLE_EXPORT_FILE: alba-knots-cleaned.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:ID:       B1C1A90E-0640-49F4-BAA6-88E9E7D0007F
:END:

+ Original data is [[file:alba_resultado_final.txt]]
+ But best to use the export of this table
  + Regenerate with (=C-c t e=)
  + [[file:alba-knots-cleaned.tab]]


|     knot |   V Ha | V [NII] |  W Ha | W [NII] |  F Ha |   F [NII] | NOTAS:    | [N II]/Ha |
|----------+--------+---------+-------+---------+-------+-----------+-----------+-----------|
|  050-422 | -38.91 |         | 27.06 |         |  2.14 | 7.47E-004 | [NII]=ms  |    3.5e-4 |
| 4242-458 | -20.90 |  -22.54 | 30.59 |   17.71 |  4.21 |      0.81 |           |      0.19 |
| 4244-554 | -20.02 |  -12.31 | 27.03 |   23.53 | 12.33 |     10.00 |           |      0.81 |
| 4245-742 | -61.27 |  -62.00 | 32.27 |   14.96 |  0.47 |      0.12 |           |      0.26 |
| 4252-608 | -80.00 |  -82.25 | 29.17 |   19.31 |  0.99 |      0.39 |           |      0.39 |
| 4252-616 | -21.62 |  -18.73 | 28.24 |   28.24 | 10.19 |      6.39 |           |      0.63 |
| 4254-551 | -68.29 |  -68.67 | 26.12 |   17.48 |  6.41 |      1.99 |           |      0.31 |
| 4258-744 | -59.53 |  -62.18 | 33.56 |   27.97 |  2.01 |      0.58 |           |      0.29 |
| 4260-624 | -58.57 |  -60.41 | 35.15 |   33.22 | 18.63 |      8.11 |           |      0.44 |
| 4261-633 | -59.68 |  -60.86 | 31.01 |   26.47 |  6.14 |      3.27 |           |      0.53 |
| 4261-656 | -58.25 |  -64.69 | 25.29 |   18.58 |  0.49 |      0.16 |           |      0.33 |
| 4263-460 | -31.88 |  -32.05 | 32.94 |   23.53 |  1.36 |      0.24 |           |      0.18 |
| 4265-637 | -53.71 |  -55.21 | 37.65 |   21.99 |  6.00 |      1.80 |           |      0.30 |
| 4266-615 | -57.04 |  -57.68 | 31.83 |   23.17 | 18.44 |      5.78 |           |      0.31 |
| 4268-413 | -63.15 |  -64.41 | 28.02 |   16.38 |  1.26 |      0.36 |           |      0.29 |
| 4272-545 | -71.89 |  -73.00 | 28.32 |   19.28 |  3.66 |      0.98 |           |      0.27 |
| 4272-628 | -65.06 |  -75.11 | 32.94 |   18.28 |  0.48 |      0.08 |           |      0.17 |
| 4273-625 | -53.35 |  -55.76 | 28.24 |   27.47 |  2.52 |      0.78 |           |      0.31 |
| 4274-439 | -37.60 |  -44.98 | 28.24 |   12.59 |  1.14 |      0.14 |           |      0.12 |
| 4277-539 | -77.01 |  -77.05 | 28.24 |   14.41 |  0.98 |      0.21 |           |      0.21 |
| 4280-551 | -64.00 |  -64.11 | 30.26 |   20.76 |  5.47 |      1.69 |           |      0.31 |
| 4280-658 | -61.88 |  -63.76 | 28.24 |   24.65 |  0.42 |      0.09 |           |      0.21 |
| 4284-308 | -36.73 |  -39.87 | 28.24 |   20.12 |  3.42 |      1.46 |           |      0.43 |
| 4285-444 | -60.10 |  -60.23 | 25.87 |   22.01 |  0.59 |      0.11 |           |      0.19 |
| 4289-524 | -71.51 |  -73.52 | 25.16 |   17.25 |  0.82 |      0.22 |           |      0.27 |
| 4292-323 | -54.91 |  -56.00 | 28.58 |   23.53 |  3.30 |      2.02 |           |      0.61 |
| 4293-557 | -40.98 |  -41.06 | 32.94 |   18.83 |  1.11 |      0.22 |           |      0.20 |
| 4320-626 | -64.73 |  -65.89 | 27.27 |   12.33 |  1.54 |      0.24 |           |      0.16 |
| 4331-453 | -30.21 |  -32.39 | 28.24 |   18.83 |  1.63 |      0.31 |           |      0.19 |
| 4332-401 | -70.99 |  -69.93 | 15.27 |   13.83 |  0.15 |      0.06 |           |      0.40 |
| 4335-207 | -19.36 |  -21.52 | 27.50 |   15.61 | 94.23 |     22.59 |           |      0.24 |
| 4359-521 | -37.00 |  -38.58 | 31.18 |   16.00 |  1.90 |      0.31 |           |      0.16 |
| 4374-457 | -20.08 |  -16.17 | 23.53 |   18.86 |  1.84 |      0.48 |           |      0.26 |
| 4376-329 | -63.16 |  -66.86 | 32.94 |   19.15 |  0.52 |      0.09 |           |      0.17 |
| 4377-526 | -70.96 |  -71.50 | 28.24 |   13.30 |  0.52 |      0.06 |           |      0.12 |
| 4378-414 | -67.13 |  -69.64 | 31.14 |   17.17 |  0.44 |      0.05 |           |      0.11 |
| 4378-434 | -68.21 |         | 28.24 |         |  0.22 |      0.01 | [NII]=FBL |      0.05 |
| 4383-411 | -60.48 |  -62.30 | 37.26 |   11.48 |  0.39 |      0.04 |           |      0.10 |
| 4385-243 | -77.62 |         | 31.38 |         |  0.33 |      0.02 | [NII]=FBL |      0.06 |
| 4389-327 | -63.34 |         | 34.58 |         |  0.59 | 5.68E-004 | [NII]=ms  |    9.6e-4 |
| 4396-541 | -90.00 |  -91.25 | 23.59 |   13.72 |  0.87 |      0.10 |           |      0.11 |
| 4402-400 | -75.26 |  -78.97 | 23.53 |   13.15 |  0.54 |      0.10 |           |      0.19 |
| 4405-349 | -78.13 |         | 20.73 |         |  0.14 | 7.93E-004 | [NII]=ms  |    5.7e-3 |
| 4406-330 | -74.93 |  -77.70 | 23.53 |   10.03 |  0.24 |      0.03 |           |      0.13 |
| 4407-229 | -78.61 |  -80.39 | 25.93 |   11.72 |  0.19 |      0.03 |           |      0.16 |
| 4409-243 | -67.17 |         | 22.16 |         |  0.18 | 5.41E-004 | [NII]=ms  |    3.0e-3 |
| 4456-324 | -68.95 |         | 19.23 |         |  0.74 | 8.39E-004 | [NII]=ms  |    1.1e-3 |
#+TBLFM: $9=$7/$6;f2::

** Key to Notes column
+ [NII]=FBL :: Flujo bajo lÃ­nea
+ [NII]=ms :: Â¿lÃ­mite superior?



** New version of the table, copy-pasted from PDF
:PROPERTIES:
:TABLE_EXPORT_FILE: alba-knots-frompdf.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:END:

+ Flux upper limits are indicated by =0.0= in the =F(Ha)= or =F([N II])= column, with the limit appearing in the =dF= column
+ Exported to [[file:alba-knots-frompdf.tab]]

|     knot |  V(Ha) | V([N II]) | W(Ha) | W([N II]) | F(Ha) | dF(Ha) | F([N II]) | dF([N II]) | size |
|----------+--------+-----------+-------+-----------+-------+--------+-----------+------------+------|
|  050-422 | -38.91 |    -38.21 | 27.06 |     15.99 |  2.14 |   0.16 |       0.0 |       0.10 |  4.4 |
| 4242-458 | -20.90 |    -22.54 | 30.59 |     17.71 |  4.21 |   0.42 |      0.91 |       0.04 |  9.8 |
| 4244-554 | -16.55 |    -15.23 | 28.24 |     21.23 | 15.85 |   1.49 |      8.26 |       0.27 | 14.2 |
| 4245-742 | -61.27 |    -61.96 | 32.27 |     14.96 |  0.47 |   0.07 |      0.13 |       0.06 |  3.1 |
| 4252-608 | -80.10 |    -82.25 | 29.17 |     19.31 |  0.99 |   0.10 |      0.44 |       0.02 |  3.7 |
| 4252-616 | -16.75 |    -17.62 | 37.65 |     30.12 | 13.83 |   1.02 |      7.71 |       0.79 |  6.9 |
| 4254-551 | -68.29 |    -68.67 | 26.12 |     17.48 |  6.41 |   0.11 |      2.25 |       0.12 |  8.1 |
| 4258-744 | -59.53 |    -62.18 | 33.56 |     27.97 |  2.01 |   0.17 |      0.66 |       0.09 |  6.9 |
| 4260-612 | -64.32 |    -63.24 | 38.75 |     34.10 |  3.59 |   0.34 |      1.43 |       0.26 |  4.4 |
| 4261-352 | -48.29 |    -47.96 | 22.98 |     14.99 |   0.0 |   0.42 |       0.0 |       0.11 | 14.3 |
| 4261-422 | -57.81 |    -57.74 | 35.09 |     28.40 |  1.31 |   0.11 |      0.30 |       0.04 |  3.1 |
| 4261-626 | -59.67 |    -61.19 | 35.22 |     26.62 |  5.05 |   0.30 |      2.99 |       0.22 |  5.6 |
| 4263-460 | -31.88 |    -32.05 | 32.94 |     23.53 |  1.36 |   0.22 |      0.27 |       0.06 |  5.7 |
| 4265-630 | -54.69 |    -55.00 | 34.06 |     29.13 | 10.08 |   0.74 |      3.77 |       0.42 | 10.6 |
| 4266-615 | -57.04 |    -57.68 | 31.83 |     23.17 | 18.44 |   0.62 |      6.53 |       0.44 | 16.9 |
| 4268-414 | -42.08 |    -41.91 | 37.92 |     22.98 |  0.50 |   0.13 |       0.0 |       0.13 |  3.1 |
| 4271-440 | -60.68 |    -64.06 | 30.20 |     16.39 |  1.26 |   0.24 |      0.40 |       0.03 |  5.6 |
| 4272-545 | -64.20 |    -63.92 | 28.33 |     19.96 |  7.31 |   0.28 |      2.64 |       0.27 | 10.0 |
| 4272-622 | -54.43 |    -55.64 | 31.17 |     21.42 |  2.53 |   0.15 |      0.84 |       0.09 |  6.9 |
| 4273-639 | -65.21 |    -64.84 | 32.94 |     19.99 |  0.48 |   0.05 |       0.0 |       0.12 |  4.4 |
| 4273-704 | -57.61 |    -64.84 | 33.26 |     21.98 |  1.40 |   0.25 |       0.0 |       0.31 | 16.8 |
| 4277-539 | -77.01 |    -77.05 | 28.24 |     14.41 |  0.98 |   0.09 |      0.23 |       0.05 |  4.4 |
| 4280-551 | -72.92 |    -76.29 | 27.42 |     22.45 |  0.63 |   0.06 |      0.21 |       0.02 |  3.7 |
| 4284-308 | -36.73 |    -39.87 | 28.24 |     20.12 |  3.42 |   0.44 |      1.65 |       0.13 |  5.6 |
| 4285-444 | -60.15 |    -59.97 | 25.87 |     22.01 |  0.59 |   0.08 |      0.12 |       0.04 |  4.4 |
| 4289-524 | -71.51 |    -73.52 | 25.16 |     17.25 |  0.82 |   0.08 |      0.25 |       0.04 |  4.4 |
| 4289-647 | -32.43 |    -28.28 | 28.24 |     20.71 |  0.50 |   0.17 |      0.18 |       0.03 |  4.4 |
| 4292-323 | -54.91 |    -56.00 | 28.58 |     23.53 |  3.30 |   0.26 |      2.29 |       0.19 |  6.9 |
| 4293-557 | -41.21 |    -41.14 | 32.94 |     18.83 |  1.11 |   0.08 |      0.24 |       0.03 |  4.8 |
| 4320-626 | -64.73 |    -65.89 | 27.27 |     12.33 |  1.54 |   0.10 |      0.27 |       0.02 |  6.9 |
| 4331-453 | -30.21 |    -32.39 | 28.24 |     18.83 |  1.63 |   0.21 |      0.35 |       0.08 |  6.8 |
| 4332-401 | -71.00 |    -69.93 | 15.27 |     13.83 |  0.15 |   0.05 |      0.07 |       0.02 |  3.1 |
| 4334-560 | -67.06 |    -72.08 | 16.64 |     17.10 |  0.16 |   0.04 |      0.09 |       0.04 |  5.6 |
| 4335-207 | -19.36 |    -21.52 | 27.50 |     15.61 | 94.23 |   1.29 |     25.53 |       0.55 | 23.0 |
| 4359-521 | -37.34 |    -38.58 | 31.18 |     16.00 |  1.90 |   0.32 |      0.35 |       0.05 |  6.9 |
| 4374-457 | -66.67 |    -67.16 | 24.58 |     14.99 |  0.19 |   0.07 |       0.0 |       0.03 |  2.6 |
| 4376-329 | -79.92 |    -81.66 | 26.27 |     15.68 |  0.49 |   0.10 |      0.13 |       0.02 |  4.3 |
| 4377-526 | -70.96 |    -71.50 | 28.24 |     13.30 |  0.52 |   0.06 |      0.07 |       0.02 |  3.7 |
| 4378-434 | -68.00 |    -68.44 | 28.24 |     16.99 |  0.22 |   0.04 |       0.0 |       0.03 |  4.3 |
| 4381-411 | -67.31 |    -69.64 | 30.71 |     17.17 |  0.44 |   0.05 |      0.05 |       0.01 |  3.1 |
| 4383-343 | -63.12 |    -65.41 | 38.22 |     16.46 |  0.40 |   0.08 |      0.07 |       0.02 |  3.1 |
| 4385-243 | -77.62 |    -78.31 | 31.38 |     18.99 |  0.33 |   0.05 |       0.0 |       0.03 |  5.6 |
| 4389-327 | -63.03 |    -65.38 | 44.71 |     15.99 |  0.67 |   0.20 |      0.15 |       0.01 |  6.8 |
| 4396-541 | -90.00 |    -91.25 | 23.59 |     13.72 |  0.87 |   0.12 |      0.11 |       0.02 |  8.1 |
| 4402-400 | -75.26 |    -78.97 | 23.53 |     13.15 |  0.54 |   0.08 |      0.12 |       0.03 |  5.6 |
| 4405-349 | -78.13 |    -77.93 | 20.73 |     15.99 |  0.14 |   0.03 |       0.0 |       0.04 |  4.3 |
| 4406-330 | -68.93 |    -69.20 | 23.53 |     13.99 |  0.27 |   0.05 |       0.0 |       0.03 |  5.6 |
| 4407-229 | -78.61 |    -80.39 | 25.93 |     11.72 |  0.19 |   0.04 |      0.04 |       0.01 |  4.4 |
| 4409-243 | -67.17 |    -66.78 | 22.16 |     12.99 |  0.18 |   0.04 |       0.0 |       0.02 |  5.6 |
| 4456-324 | -68.95 |    -71.43 | 19.23 |      8.99 |  0.74 |   0.20 |      0.14 |       0.01 |  6.8 |

** Graphs of Alba's knots
*** Plot Ha width versus [N II] width
:PROPERTIES:
:ID:       81DFDBCE-233B-48D1-8B85-5C77BCF85F99
:END:
#+BEGIN_SRC python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.table import Table
  import seaborn as sns
  sns.set_style('whitegrid')
  sns.set_context('talk')
  sns.set_color_codes()
  tab = Table.read('alba-knots-frompdf.tab',
                   format='ascii', delimiter='\t',
  )

  tab['[N II]/Ha'] = tab['F([N II])'] / tab['F(Ha)']
  tab['dW([N II])'] = tab['W([N II])'] * tab['dF([N II])'] / tab['F([N II])']
  tab['dW(Ha)'] = tab['W(Ha)'] * tab['dF(Ha)'] / tab['F(Ha)']
  tab.sort('W(Ha)')

  wmax = 48.0
  mask = np.isfinite(tab['[N II]/Ha']) 
  figfile = 'alba-knots-widths.pdf'
  sns.set_palette("Oranges_d")
  fig, ax = plt.subplots(1, 1)
  w0 = np.linspace(0.0, wmax)
  fwhm_over_sigma = 2*np.sqrt(2*np.log(2.0))
  sig2_fs = 10.233
  Te_factor = 82.5*(1.0 - 1.0/14.0)
  for T4 in [0.0, 0.5, 1.0, 1.5, 2.0]:
      ax.plot(w0, np.sqrt(w0**2 + Te_factor*T4*fwhm_over_sigma**2 + sig2_fs*fwhm_over_sigma**2),
              label='T = {:.0f} K'.format(1e4*T4),
              lw=4,
              alpha=0.6)
  s = 5*(20 + 20*np.log10(tab[mask]['F(Ha)']))
  # cmap = sns.diverging_palette(240, 10, as_cmap=True)
  # cmap = 'coolwarm'
  cmap = 'Blues'
  ax.scatter('W([N II])', 'W(Ha)', s=s, c='[N II]/Ha', data=tab[mask], 
             cmap=cmap, zorder=100, alpha=0.95, label=None)
  ax.errorbar('W([N II])', 'W(Ha)', xerr='dW([N II])', yerr='dW(Ha)',
              fmt='none', ecolor='b', data=tab[mask], alpha=0.3, errorevery=2, label=None)
  ax.set_xlim(0, wmax)
  ax.set_ylim(0, wmax)
  ax.set_xlabel('[N II] FWHM, km/s')
  ax.set_ylabel('Ha FWHM, km/s')
  ax.legend(loc='lower right', frameon=True)
  fig.set_size_inches(6, 6)
  fig.tight_layout()
  fig.savefig(figfile)
#+END_SRC

#+RESULTS:
[[file:alba-knots-widths.pdf]]

**** Empirical description of the width-width plot :4paper:
+ The symbol color indicates the knot [N II]/Ha ratio (darker colors = higher ratio)
+ The symbol size indicates the log of the Ha flux from the knot
+ The relative error on width is assumed to be equal to the relative error in the flux
  + To reduce confusion, error bars are only shown on every second point
+ The curves account for the different atomic weight of H and N, together with the fine-structure broadening of H alpha
**** Interpretation of the width-width plot       :4paper:
+ Given the width uncertainties, all the points are consistent with a constant thermal width for all the knots, corresponding to T ~= 10,000 K
+ The [N II]/Ha ratio tends to be higher in knots with higher non-thermal linewidths, as measured by W([N II]).

*** Plot [N II]/Ha ratio in knots vs nebula
:PROPERTIES:
:ID:       95640CFC-6797-418E-9A7C-CD52A3DCF1FA
:END:

#+BEGIN_SRC python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.table import Table, join
  from astropy.io import fits
  import seaborn as sns
  sns.set_style('whitegrid')
  sns.set_context('talk')
  sns.set_color_codes()
  rtab = Table.read('alba-knots-ratios.tab',
                   format='ascii', delimiter='\t',
  )
  vtab = Table.read('alba-knots-cleaned.tab',
                   format='ascii', delimiter='\t',
  )
  ptab = Table.read('alba-knots-frompdf.tab',
                   format='ascii', delimiter='\t',
  )
  tab = join(join(rtab, vtab, keys='knot'), ptab, keys='knot', join_type='outer')


  ## Read in the new tables from Alba 24 Oct 2016
  ## These have only the ratios - no errors or anything
  ktab = Table.read('Alba-Ratios-2016-10/NIIHa_knot.dat',
                    format='ascii.no_header', names=['knot', 'Alba ratio'], 
  )
  ntab = Table.read('Alba-Ratios-2016-10/NIIHa_neb.dat',
                    format='ascii.no_header', names=['knot', 'Alba BG ratio'], 
  )

  ## Merge Alba's tables into the big table
  tab = join(join(tab,
                  ktab, keys='knot', join_type='outer'),
             ntab, keys='knot', join_type='outer')

  ## Calculate contrast with BG and estimate error in ratio
  tab['log Ha contrast'] = np.log10(tab['knot flux Ha']/tab['BG flux Ha'])
  tab['[N II]/Ha new'] = tab['F([N II])'] / tab['F(Ha)']
  tab['error'] = tab['[N II]/Ha new']*np.sqrt(
      (tab['dF([N II])']/tab['F([N II])'])**2 + (tab['dF(Ha)']/tab['F(Ha)'])**2
  )
  # The upper limits are for cases where F([N II]) = 0.0
  mask = tab['F([N II])'] == 0.0
  tab['upper limit'] = tab['dF([N II])'] / tab['F(Ha)']
  tab['upper limit'].mask = ~mask

  ## Save the big table with all the columns
  selected_columns = ['knot',
                      'BG ratio', 'Alba BG ratio',
                      '[N II]/Ha new', 'knot ratio', 'Alba ratio', 'upper limit']
  tab[selected_columns].write('big-ratio-table.tab', format='ascii.tab',
                              formats={'[N II]/Ha new': '{:0.3f}',
                                       'upper limit': '{:0.3f}'})

  ## Potentially switch between the old values and the new tables from Alba
  if False:
      bgratio_name = 'BG ratio'
      ratio_name = '[N II]/Ha new'
  else:
      bgratio_name = 'Alba BG ratio'
      ratio_name = 'Alba ratio'

  figfile = 'alba-knots-ratios.pdf'
  sns.set_palette("Oranges_r")
  fig, ax = plt.subplots(1, 1)

  s = 20*np.sqrt(tab['BG flux Ha'])
  sv = (-10 - tab['V(Ha)'])*2
  sd = 150*np.sqrt(tab['F(Ha)']/tab['size'])
  # cmap = sns.diverging_palette(240, 10, as_cmap=True)
  cmap = 'Oranges'

  # Deal with upper limits - take 3 x sigma
  #mask = tab['NOTAS:'] == '[NII]=ms'

  ax.scatter(bgratio_name, ratio_name, s=sd[~mask], c='log Ha contrast',
             data=tab[~mask],
             cmap=cmap, zorder=100, alpha=0.8)
  ax.errorbar(bgratio_name, ratio_name, yerr='error', fmt='none',
              data=tab[~mask],
              alpha=0.3, errorevery=2)
  # and plot the upper limits separately
  ax.scatter(bgratio_name, 'upper limit', s=sd[mask], c='log Ha contrast',
             data=tab[mask],
             cmap='Purples', zorder=100, alpha=0.6, marker='v')
  ax.plot([0, 1], [0, 1], c='k', ls=':', alpha=0.6)

  # Plot histogram of values from the inner nebula
  hdu = fits.open('../Ratios-for-Alba/ratio-6583-6563.fits')[0]
  H, edges = np.histogram(hdu.data, bins=300, range=[0.0, 0.71], density=True)
  x = 0.5*(edges[:-1] + edges[1:])
  ax.fill_between(x, H/10, alpha=0.1, color=(0.15, 0.05, 0.3))

  ax.set_xlim(0.0, 0.81)
  ax.set_ylim(0.0, 0.81)
  ax.set_xlabel('Nebula [N II]/Ha')
  ax.set_ylabel('Knot [N II]/Ha')
  fig.set_size_inches(6, 6)
  fig.tight_layout()
  fig.savefig(figfile)
#+END_SRC

#+RESULTS:
[[file:alba-knots-ratios.pdf]]
**** DONE Apparent discrepancy in the nebula ratios
CLOSED: [2016-10-24 Mon 18:26]
:LOGBOOK:
CLOCK: [2016-10-24 Mon 09:20]--[2016-10-24 Mon 18:26] =>  9:06
:END:
+ [2016-10-24 Mon] Alba's new ratios for the BG nebula are different from the ones I had calculated from her earlier fits
+ The table with all the relevant columsn is
  + [[file:big-ratio-table.tab]]
+ There is a general trend of Alba's values being larger
+ The original correction factor was 1.8 for the [N II]/Ha correction
  + Which was based in part on the WFPC2 mosaic
  + I am comparing this with the MUSE dataset, and in general the MUSE ratios are significantly  smaller
+ Comparing the overlap, we get a correction factor of 1.13 between the two
+ [X] It turns out that it was all because we had two errors in the original calibration
  1. By using the WFPC2 ratios, we had a calibration factor of 1.8 when it should have been 1.13
  2. We had never actually applied the calibration factor to the images anyway
+ All is now resolved to my satisfaction
+ Additionally, everything is now consistent with O'Dell & Harris
  + They find that the ratio increases from about 

#+BEGIN_SRC python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.table import Table
  import seaborn as sns
  sns.set_style('whitegrid')
  sns.set_context('talk')
  sns.set_color_codes()
  tab = Table.read('big-ratio-table.tab',
                   format='ascii', delimiter='\t', fill_values=[('--', 'nan')])

  upper_mask = tab['[N II]/Ha new'] == 0.0

  figfile = 'alba-ratios-discrepancy.pdf'
  fig, ax = plt.subplots(1, 1)

  ax.scatter('BG ratio', 'Alba BG ratio', data=tab,
             label='Nebula [N II]/Ha',
             s=100, alpha=0.6, c='y')
  ax.scatter('[N II]/Ha new', 'Alba ratio', data=tab[~upper_mask],
             label='Knot [N II]/Ha',
             s=100, alpha=0.6, c='c')
  ax.scatter('upper limit', 'Alba ratio', data=tab[upper_mask],
             label='Upper limit [N II]/Ha',
             s=50, c='k', alpha=0.3)
  m = np.isfinite(tab['knot ratio']) & (tab['knot ratio'] > 0.0)
  ax.scatter('knot ratio', 'Alba ratio', data=tab[m],
             label='Original knot [N II]/Ha',
             s=50, alpha=0.6, c='r')

  ax.plot([0.0, 1.0], [0.0, 1.0], '--', c='k', alpha=0.2, label=None)
  ax.plot([0.0, 1.0], [0.0, 1.13], ':', c='k', alpha=0.4, label=None)
  ax.legend(frameon=True, loc='lower right')
  ax.set(xlabel='Will ratio', ylabel='Alba ratio',
         xlim=[0.0, 0.81], ylim=[0.0, 0.81])

  fig.set_size_inches(6, 6)
  fig.tight_layout()
  fig.savefig(figfile)

#+END_SRC

#+RESULTS:
[[file:alba-ratios-discrepancy.pdf]]

**** Empirical description of the ratio-ratio plot :4paper:
+ The symbol color indicates the Knot/BG brightness contrast ratio (darker colors = higher contrast)
+ The symbol size indicates tha knot density, as estimated from sqrt(F(Ha)/size)
+ The downward pointing triangles are upper limits on the knot [N II]/Ha ratio
+ *Out of date* 
  + The symbol size /USED TO/ indicate the knot velocity (larger symbols = more blue-shifted)
**** Correlations apparent in the ratio-ratio plot :4paper:
+ Use Rneb and Rknot for the two ratios:
  - Rknot shows a much larger range of variation than Rneb:
    - Rneb = 0.2 \to 0.45
    - Rknot = <0.05 \to 0.8
  - There is a tendency for Rknot to be higher when Rneb is higher
  - Also, higher Rneb correlates with higher contrast
  - And correlates with higher density
  - There is no apparent correlation with knot velocity
  - We can divide the points into 3 clusters
    1) Rknot <= 0.23
    2) Rknot = 0.23 \to 0.35
    3) Rknot >= 0.35
  - The min, median, max value of Rneb for each group is
    1) 0.19, 0.28, 0.34
    2) 0.24, 0.32, 0.34
    3) 0.25, 0.35, 0.43
  - Alternatively, we can divide according to Rneb
    - Rneb < 0.3 ::
      - N = 27 (quartiles 25, 50, 75 = 7, 14, 28 )
      - Rknot/Rneb quartiles: 25, 50, 75 = 0.4, 0.5, 0.9
    - Rneb > 0.3 ::
      - N = 22 (quartiles 25, 50, 75 = 6, 11, 16 )
      - Rknot/Rneb quartiles: 25, 50, 75 = 0.85, 0.9, 1.1
+ The general behavior is consistent with what we see in Alba's Fig 9:
  + The majority of knots show Rknot < Rneb
  + Some knots with high Rneb show Rknot > Rneb
**** Possible explanations for the behavior of the ratios :4paper:
+ The [N II]/Ha ratio depends on
  1. Local ionization parameter: \(U = F / c\, n\)
     - [N II]/Ha is decreasing function of \(U\) as N^{+}/N^{++} goes down
  2. Temperature
     - For temperatures increasing above 10^4 K, [N II]/Ha will increase with T due to the increased collisional excitation rate and reduced recombination rate
     - But at high enough temperatures (T > 40,000 K), collisional ionization will convert N^{+} in N^{++}, so [N II]/Ha will start to go down again.
       - This requires a shock Mach number > 3.5 or so. 
+ If density goes up, then \(U\) should go down, so [N II]/Ha should go up
  * /if the flux is equal/
  * For the knots with measured [S II] ratios, knots are higher density than the nebula
    + Although there are only 3 with measured densities, most are upper or lower limits
    + Typically n(knot) \approx 2-3 n(neb)
    + [ ] We should try and estimate densities from H\alpha surface brightness
    + [ ] For knot 4261-422 in Table 5, the errors on N_e are too small, given the stated errors on 6716/6731
+ So we can easily explain the cases where [N II]/Ha goes up
  + It could be either decreased \(U\) due to compression, or could be contribution from cooling zone
  + For the one knot in this category that also has [O III], the [O III]/Ha is also increased in knot
    + Implying that it is not a change in \(U\) in this case
+ Harder to explain [N II]/Ha going down
  + Lower [N II]/Ha in knot seems to be associated with lower contrast: knot/nebula in H alpha
  + Also with lower densities
  + Also with lower W([N II])
  + Lower [N II]/Ha in knot is correlated with higher T determined from linewidths
    + This is shown in the following plot: [[id:D5737968-9E52-4D6B-92D3-EA78CAD39D50][Plot Kinematic T vs {N II}/Ha ratio]]
    + But given that these are also the fainter knots, I suspect that t may just be an increase in uncertainty in the T estimates
      + Unfortunately, we have no estimate of thr uncertainty in the linewidths
+ Explanation of larger range in [N II]/Ha for knots, as compared with nebula:
  + Nebula is an average over a long line of sight (ionization bounded) that samples regions of varying ionization parameter
  + Knots are more compact -> small range of z -> selecting a partiicular value of U
    + In particular the low [N II]/Ha ratios must come from knots in the more highly ionized interior of the nebula, where He is ionized and F is significantly higher than on average for that line of sight, such that even with the extra compression, U is still high.
    + This seems more likely than collisional ionization as an explanation. 
*** Plot Kinematic T vs [N II]/Ha ratio
:PROPERTIES:
:ID:       D5737968-9E52-4D6B-92D3-EA78CAD39D50
:END:
#+BEGIN_SRC python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.table import Table
  import seaborn as sns
  sns.set_style('whitegrid')
  sns.set_context('talk')
  sns.set_color_codes()
  tab = Table.read('alba-knots-frompdf.tab',
                   format='ascii', delimiter='\t',
  )
  tab['[N II]/Ha'] = tab['F([N II])'] / tab['F(Ha)']

  mupper = tab['F([N II])'] == 0.0
  tab['upper limits'] = tab['dF([N II])'] / tab['F(Ha)']

  fwhm_over_sigma = 2*np.sqrt(2*np.log(2.0))

  sig2_ha = (tab['W(Ha)']/fwhm_over_sigma)**2
  sig2_n2 = (tab['W([N II])']/fwhm_over_sigma)**2
  sig2_fs = 10.233
  Te_factor = 82.5*(1.0 - 1.0/14.0)
  tab['Te'] = 1e4*(sig2_ha - sig2_n2 - sig2_fs)/Te_factor
  mask = np.isfinite(tab['[N II]/Ha']) & np.isfinite(tab['Te'])
  figfile = 'alba-knots-Te-Nrat.pdf'
  sns.set_palette("Purples_r")
  fig, ax = plt.subplots(1, 1)
  # s = 10 + 30*np.sqrt(tab['F(Ha)'])
  s = 10*tab['size']
  s = 100*np.sqrt(tab['F(Ha)']/tab['size'])
  # cmap = sns.diverging_palette(240, 10, as_cmap=True)
  # cmap = 'coolwarm'
  cmap = 'Oranges'
  m = mask & (~mupper)
  ax.scatter('[N II]/Ha', 'Te', s=s[m], c='W([N II])', data=tab[m], 
             cmap=cmap, zorder=100, alpha=0.8, label=None)
  m = mask & (mupper)
  ax.scatter('upper limits', 'Te', s=s[m], c='W([N II])', data=tab[m], 
             cmap='Purples', zorder=100, alpha=0.6, label=None, marker='<')
  ax.set_xlim(0, 0.85)
  ax.set_ylim(0, 3.e4)
  ax.set_xlabel('[N II] / H a')
  ax.set_ylabel('Temperature, K')
  ax.legend(loc='lower right')
  fig.set_size_inches(6, 6)
  fig.tight_layout()
  fig.savefig(figfile)
#+END_SRC

#+RESULTS:
[[file:alba-knots-Te-Nrat.pdf]]

+ We currently have the symbol size set to a proxy for the density:
  + \(\sqrt{F / \ell}\)
  + It looks like higher density correlates with higher [N II]/Ha, which is what we would expect
*** Histogram of [N II]/Ha ratio from MUSE data of inner Orion Nebula
#+BEGIN_SRC python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  from astropy.io import fits
  import seaborn as sns
  sns.set_style('whitegrid')
  sns.set_context('talk')
  sns.set_color_codes()

  figfile = 'nii-ha-histogram-muse.pdf'
  sns.set_palette("Purples_r")
  fig, ax = plt.subplots(1, 1)

  huygens_ratios = fits.open('../Ratios-for-Alba/ratio-6583-6563.fits')[0].data
  H, edges = np.histogram(huygens_ratios, bins=300, range=[0.0, 0.71], density=True)
  x = 0.5*(edges[:-1] + edges[1:])
  # ax.plot(x, H, drawstyle='steps-mid', c='y')
  ax.fill_between(x, H, alpha=0.3, color='y', label='Huygens')

  eon_ha = fits.open('new-slits-ha-allvels.fits')['scaled']
  eon_nii = fits.open('new-slits-nii-allvels.fits')['scaled']
  eon_ratios = 1.13*eon_nii.data / eon_ha.data

  # Also write out the ratio image
  fits.PrimaryHDU(header=eon_nii.header,
                  data=eon_ratios).writeto('new-slits-nii-ha-ratio-allvels.fits',
                                           clobber=True)


  H, edges = np.histogram(eon_ratios, bins='auto', range=[0.0, 0.71], density=True)
  x = 0.5*(edges[:-1] + edges[1:])
  # ax.plot(x, H, drawstyle='steps-mid')
  ax.fill_between(x, H, alpha=0.3, color='g', label='EON')
  #ax.set(xlim=[0.05, 0.8], xscale='log')
  ax.legend()

  fig.set_size_inches(6, 6)
  fig.tight_layout()
  fig.savefig(figfile)
#+END_SRC


#+RESULTS:
[[file:nii-ha-histogram-muse.pdf]]


So the Western region covered by our slits has a tendency for slightly higher [N II]/Ha ratios than in the inner nebula.   But there is considerable overlap in the distributions.  The positions of the knots seem to be entirely representative of the area as a whole in terms of the nebular ratio. 
*** Correlation between [N II]-Ha velocity difference and line ratio
**** Create velocity difference map from MUSE
#+name: muse-nii-ha-velocity-difference
#+BEGIN_SRC python
  import os
  from astropy.io import fits

  mapdir = '../OrionMuse/LineMaps'
  outdir = '../Ratios-for-Alba'

  nhdu, = fits.open(os.path.join(mapdir, 'mean-N_II-6583.fits'))
  hhdu, = fits.open(os.path.join(mapdir, 'mean-H_I-6563.fits'))

  nhdu.data -= hhdu.data

  nhdu.writeto(os.path.join(outdir, 'delta-V-6583-6563.fits'), clobber=True)


#+END_SRC

#+RESULTS: muse-nii-ha-velocity-difference
: None
**** Snippet for making 2d histogram figure 
#+BEGIN_SRC python
  from astropy.io import fits

  rhdu, = fits.open('../Ratios-for-Alba/ratio-6583-6563.fits')
  dhdu, = fits.open('../Ratios-for-Alba/delta-V-6583-6563.fits')
  hhdu, = fits.open('../Ratios-for-Alba/linesum-H_I-6563.fits')
  vhdu, = fits.open('../Ratios-for-Alba/mean-H_I-6563.fits')

  m = hhdu.data > 0.0*np.nanmedian(hhdu.data)
  m = m & (rhdu.data > 0.0) & np.isfinite(rhdu.data)
  m = m & np.isfinite(dhdu.data)
  m = m & (vhdu.data > 10.0)
  xdata = rhdu.data[m]
  ydata = dhdu.data[m]

  xmin, xmax = 0.0, 0.5
  ymin, ymax = -5.0, 10.0


  dx = 0.03
  xgrid = np.arange(xmin, xmax, dx) + 0.5*dx

  def make_ygrid(xdata, ydata, threshold=0.7):
      ygrid, dygrid = [], []
      for x in xgrid:
          mm = np.abs(xdata -x) <= 0.5*dx
          importance = len(xgrid)*mm.sum()/len(xdata)
          if importance > threshold:
              ygrid.append(ydata[mm].mean())
              dygrid.append(ydata[mm].std())
          else:
              ygrid.append(np.nan)
              dygrid.append(np.nan)
      return ygrid, dygrid

  ygrid, dygrid = make_ygrid(xdata, ydata)
  yygrid, dyygrid = make_ygrid(Xc, Yc)

  H, xedges, yedges = np.histogram2d(xdata, ydata, 
                                     bins=[200, 200],
                                     range=[[xmin, xmax], [ymin, ymax]],
                                     weights=None#hhdu.data[m]
                                    )

  fig, ax = plt.subplots(figsize=(10, 10))
  gamma = 1.0
  ax.imshow((H.T)**(1.0/gamma), 
            extent=[xmin, xmax, ymin, ymax], 
            interpolation='none', aspect='auto', 
            origin='lower', cmap=plt.cm.gray_r)

  ax.plot(xgrid, ygrid, '-', c='y')
  ax.errorbar(xgrid, ygrid, yerr=dygrid, fmt='none', c='y')

  ax.scatter(Xc, 1.5 + Yc, alpha=0.4, c='r')
  ax.plot(xgrid, yygrid, '-', c='k')
  ax.errorbar(xgrid, yygrid, yerr=dyygrid, fmt='none', c='k')

  ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax])

#+END_SRC
* TODO Yet more datasets to look at
** Orion S horizontal slits
+ These are the =os000.fits= files from 2007-01-11
+ In [[file:~/Work/SPM2007/][file:~/Work/SPM2007/]]
+ I think these are ha+nii
** LL Ori later slits
+ [[file:~/Work/SPM2007/2009/TereReduce/bitacora::LL%20Ori]]
+ Seem to be 3 positions spm060, 064, 069
+ From 2009-01-15
+ How far N do they go?
* Final products of calibration

** Spectral images
+ =new-slits-*.fits=
** Calibrated slit spectra
+ =Calibrated/BGsub/{XX,YY}*-vhel.fits=


* DONE New general version of the slit flux calibration and astrometry
CLOSED: [2015-10-06 Tue 23:02]
+ It would be better to use the [[file:~/Work/OrionTreasury/wfi/][WFI images]] to flux calibrate the spectra
  + As well as being more reliable, this is necessary in the case of some of the LL2 slits, since the Image+slit was taken in [S II] instead of H alpha
+ We will apply it first to the LL2 slits, plus any other odd slits that are lying around
  + With the plan being to add in the original horizontal and vertical slits afterwards
+ As well as flux calibration, it will also help with the offset along the slit


** General policy for the workflow                                 :noexport:
+ The previous version had used org-babel source blocks that read directly from org-mode tables.
  - This is convenient for rapid development
  - But it makes the overall logic hard to follow
  - And hard to share with anyone not using emacs
+ So for this implementation I plan to do the following:
  1. Tangle all python scripts to files
  2. Write all data tables to files
     - Initial input table can be written as TSV from org table
     - Read in with astropy tables 

** Outline of steps

1. We use the image+slit in order to find the slit reference position
   + The image-spectrum offset along the slit has to be found iteratively through a later step
2. Compare the spectrum profile (=spec=) with a synthetic slit (=image=) on the WFI image
   + Similar to [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][Application to the vertical slits]] and [[id:6CE33437-BC17-49AA-B048-5BACCBB8C99B][Repeat for the horizontal slits]]
   + Find the =jshift= value that best matches up the profiles
   + Find brightness normalization
     + Check for calibration gradients along the slit by plotting =spec/image= against =s= (distance along slit)
       + [2015-09-08 Tue] It appears that the trends are not linear.  They tend to either curve down near the left hand edge, or curve up at the right hand edge, combined with a more linear increase from left to right
       + A cubic would probably capture the behavior well
       + [X] Fit a chebychev polynomial to the ratio
     + Check for zero point errors by plotting  =spec= against =image=
     + [X] One problem will be disentangling the above two effects, because if there is a strong systematic brightness gradient along the slit then their effects will be degenerate
       + It turns out this is not too difficult in most cases, so long as we assume that the along-slit variation is a low-order polynomial
       + Some slits have a compact region with strong brightness gradients near the middle of the slit, which allows one to clearly see if a zero-point offset is present
   + Write out the slit astrometry and flux calibration to a table, similar to how we did [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][here]] for the vertical slits and [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]] for the horizontal slits 
3. Project the calibrated spectra onto a common spatial grid
   + For different velocity ranges
     + This requires finding the heliocentric correction
   + This is what we already did for the [[id:23C29E96-4471-454E-A463-D365731119C0][vertical]] and [[id:60833550-A462-4F18-86DE-895625FF3E7A][horizontal]] slits
     + We need to generalise this slightly so we can treat any PA (maybe that will work out of the box) and both cases for the dimension order of the spectra files (Y-V, or V-Y)

** Table of all slits 
:PROPERTIES:
:TABLE_EXPORT_FILE: all-slits-input.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:ID:       38EBF0CA-1CA6-4420-A9D8-F784FEB57BCC
:END:
:LOGBOOK:
- Note taken on [2015-09-01 Tue 15:20] \\
  I haven't quite decide what is going into this table yet.  
  + It will at least have the dataset (YYYY-MM) and the ids for the image+slit and/or the spectrum.
  + Currently it also has a column for notes, so I can remember what is what.
  + Do I want to add the values if we determine them by hand?
    + Position of slit on image
    + Offset image-spectrum
    + Flux calibration
  + Or alternatively, could we determine all of those automatically?
    + Probably not
:END:
+ This does not have all the slits yet, but it will eventually (I hope)
  + [2015-09-16 Wed] Adding the original horizontal slits 
+ The Notes column is just to remind us of stuff
+ After editing, remember to export the table to file with =C-c t e=
+ [2015-09-04 Fri] Added some new columns:
  - saxis :: dimension along the slit length in IMAGE coordinates (1 for x-axis; 2 for y-axis)
    + This is checked by hand in DS9
  - islit :: pixel position of slit along the perpendicular axis (y-axis for saxis=1, x-axis for saxis=2)
    + This is measured by hand in DS9
  - shift :: pixel offset along the slit between image+slit and spectrum
    + This has to be found by trial and error (from plotting slit profile from spectrum and comparing with synthetic slit)
  - norm :: the factor we divide the spectrum by so that it is equal to the flux calibration image
    + This is for the center of the slit, since we will need to include a polynomial correction term later
    + Also found by trial and error - it does not need to be exact since any inaccuracy will get compensated by the leading term of the Chebyshev fit
  - zero :: Correction to the zero point of the spectra
    - Found by looking at the background in the ha and nii spectra, and a little bit of trial and error so that the upper graph panel of spectrum versus image passes through the origin

|   Dataset | imid |    specid | saxis | islit | shift | norm | zero | r(nii) | Notes                |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2006-02 |  326 |       324 |     2 | 283.5 |   74. | 1000 |  1.0 |    1.8 | LL2 first epoch      |
|   2006-02 |  318 |       319 |     2 | 280.0 |   78. | 3300 |    3 |    1.8 | LL2 first epoch      |
|   2006-02 |  260 |       261 |     2 | 251.4 |   55. | 3600 |    1 |    1.8 | LL2 first epoch      |
|   2006-02 |  270 |       271 |     2 | 253.5 |   60. | 6500 |    4 |    1.8 | LL2 first epoch      |
|   2006-02 |  276 |       277 |     2 | 256.0 |   60. | 7000 |    6 |    1.8 | LL2 first epoch      |
|   2006-02 |  281 |       282 |     2 | 257.7 |   64. | 3600 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  286 |       287 |     2 | 261.0 |   64. | 4000 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  291 |       292 |     2 | 262.7 |   65. | 6000 |    6 |    1.8 | LL2 first epoch      |
|   2006-02 |  296 |       297 |     2 | 267.0 |   66. | 3000 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  303 |       304 |     2 | 270.5 |   70. | 3300 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  313 |       312 |     2 | 278.0 |   70. | 2600 |    6 |    1.8 | Image follows spec!  |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2007-01b | 2061 |    2062-c |     2 | 256.0 |   65. | 7000 |   20 |    1.8 | LL2 second epoch     |
|  2007-01b | 2037 | 2038-2040 |     2 | 249.0 |   60. | 7000 |   16 |    1.8 | LL2 second epoch     |
|  2007-01b | 2041 | 2042-2044 |     2 | 250.0 |   63. | 7000 |   21 |    1.8 | LL2 second epoch     |
|  2007-01b | 2045 | 2046-2048 |     2 | 251.5 |   64. | 6500 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2049 | 2050-2052 |     2 | 253.0 |   65. | 7000 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2053 | 2054-2056 |     2 | 254.5 |   68. | 7000 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2057 | 2058-2060 |     2 | 254.5 |   66. | 7000 |   25 |    1.8 | LL2 second epoch     |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2007-01 |  054 |       055 |     2 | 262.5 |   68. | 5000 |   10 |    1.9 | LL1 extreme N        |
|   2007-01 |  067 |       068 |     2 | 273.0 |   72. | 5000 |   10 |    1.9 | LL1 extreme N        |
|   2007-01 |  072 |       073 |     2 | 277.5 |   74. | 5200 |   10 |    1.8 | LL1 extreme N        |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2010-01 |  078 |   079-080 |     2 | 248.0 |   62. | 5500 |  2.0 |    1.8 | Vertical W of LL2    |
|   2010-01 |  202 |   203-204 |     2 | 233.6 |  52.5 | 6500 |  2.0 |    1.8 | Vertical Far West    |
|   2010-01 |  124 |   125-127 |     2 | 235.5 |  54.5 | 3400 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  206 |   207-208 |     2 | 234.6 |    54 | 7700 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  128 |   129-130 |     2 | 237.5 |    57 | 3500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  133 |   134-135 |     2 | 239.4 |    58 | 5500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  210 |   211-212 |     2 | 236.4 |    55 | 7000 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  137 |   138-139 |     2 | 241.3 |    60 | 3600 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  214 |   215-216 |     2 | 238.4 |    60 | 7500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  145 |   146-147 |     2 | 244.3 |    65 | 1000 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  248 |   249-250 |     2 | 254.9 |    68 | 3300 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  219 |   220-221 |     2 | 240.0 |  57.5 | 7700 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  157 |   158-159 |     2 | 252.2 |    65 | 1600 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  236 |   237-238 |     2 | 247.0 |    63 | 7200 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  240 |   241-242 |     2 | 249.5 |    65 | 5500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  244 |   245-246 |     2 | 251.6 |    64 | 4500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  252 |   253-254 |     2 | 258.2 |    69 | 5700 |   2. |    1.8 | Vertical Far West    |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2013-02 |  024 |       025 |     1 | 465.0 |  -73. | 1500 |  4.5 |    1.8 | Horizontal LL2       |
|   2013-02 |  165 |   166-167 |     1 | 468.5 |  -67. | 3500 |  5.5 |    1.8 | Horizontal West      |
|   2013-02 |  169 |   170-171 |     1 | 468.5 |  -65. | 3200 |  5.5 |    1.8 | Horizontal West      |
|   2013-02 |  237 |   238-239 |     1 | 467.0 |  -74. | 4500 |    7 |    1.8 | Horizontal West      |
|   2013-02 |  232 |   233-234 |     1 | 468.5 |  -78. | 4800 |    9 |    1.8 | Horizontal West      |
|   2013-02 |  226 |   227-228 |     1 | 468.5 |  -75. | 4200 |   10 |    1.8 | Horizontal West      |
|   2013-02 |  149 |   150-151 |     1 | 468.0 |  -70. | 3600 |  3.5 |    1.8 | Horizontal West      |
|   2013-02 |  154 |   155-156 |     1 | 467.2 |  -67. | 3600 |  4.5 |    1.8 | Horizontal West      |
|   2013-02 |  159 |   160-161 |     1 | 467.5 |  -70. | 3600 |  5.0 |    1.8 | Horizontal West      |
|   2013-02 |  033 |   034-035 |     1 | 467.0 |  -70. | 3800 |  6.0 |    1.8 | Horizontal West      |
|   2013-02 |  029 |   030-031 |     1 | 465.2 |  -76. | 3800 |  4.5 |    1.8 | Horizontal West      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2013-12 |  116 |   117-118 |     1 | 395.0 | -160. |  400 | 10.5 |    1.8 | Horizontal below LL2 |
|   2013-12 |  086 |       088 |     1 | 404.0 | -155. |  300 | 11.0 |    1.8 | W of HH269           |
|   2013-12 |  090 |       089 |     1 | 404.5 | -160. |  400 | 10.5 |    1.8 | Image follows spec   |
|   2013-12 |  102 |   103-104 |     1 | 402.5 | -150. |  350 | 10.5 |    1.8 | V faint image        |
|   2013-12 |  111 |   112-113 |     1 | 400.0 | -145. |  400 | 10.5 |    1.8 | W of HH269           |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2015-02 | 0003 |      0004 |     1 | 463.0 |  -80. | 1300 |    0 |    1.8 |                      |
|   2015-02 | 0012 |      0013 |     1 | 464.0 |  -60. | 1300 |    0 |    1.8 |                      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2007-sii |  063 |       065 |     2 | 269.0 |  70.5 | 5000 |    0 |   1.17 | [S II] LL1           |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2010-sii |  078 |       082 |     2 |   248 |    63 | 5500 |    0 |   1.17 | [S II] west          |
|  2010-sii |  085 |       086 |     2 | 252.7 |    66 | 5500 |    0 |   1.17 |                      |
|  2010-sii |  224 |       225 |     2 |   243 |    61 | 7700 |    0 |   1.17 |                      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
| 2007-oiii |  059 |       060 |     2 |   265 |    71 | 5000 |    0 |    1.6 | [O III] LL1          |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
| 2010-oiii |  224 |       228 |     2 |   243 |    62 | 7700 |    0 |    1.6 | [O III] west         |


Run it for a single slit
#+BEGIN_SRC sh :results verbatim
python slit-calibration.py 2015-02 # 1>&2
#+END_SRC

#+RESULTS:
#+begin_example
<Row 54 of table
 values=(2015-02, 0003, 0004, 1, 463.0, -80.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0003-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-nii.fits
iarr = [  80.  180.  280.  380.  480.  580.  680.  780.  880.  980.] jarr = [ 463.  463.  463.  463.  463.  463.  463.  463.  463.  463.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76300486, -5.38914842), (83.75317756, -5.38920898),
     (83.74335024, -5.38926939), (83.73352293, -5.38932964),
     (83.72369561, -5.38938973), (83.71386829, -5.38944967),
     (83.70404097, -5.38950944), (83.69421365, -5.38956906),
     (83.68438632, -5.38962852), (83.674559, -5.38968782)]>
Binning along slit: image = 2 spectrum = 2
[ 83.7629988   83.75317149  83.74334418  83.73351686  83.72368954
  83.71386222  83.7040349   83.69420758  83.68438026  83.67455293] [-5.3891432  -5.38920377 -5.38926417 -5.38932442 -5.38938451 -5.38944445
 -5.38950422 -5.38956384 -5.3896233  -5.38968261]
[ 4255.  4403.  4551.  4699.  4847.  4995.  5143.  5291.  5439.  5587.] [ 5222.  5221.  5220.  5219.  5218.  5218.  5217.  5216.  5215.  5214.]
Wav: [6559.29, 6566.29] Pixel: [  12.45186057  134.32298985]
Wav: [6579.95, 6586.95] Pixel: [  10.14579358  132.01692287]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2                c3       
    -------------- ---------------- ---------------- -----------------
    0.968088496551 -0.0353020238319 -0.0368421106332 0.000390521891842
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
<Row 55 of table
 values=(2015-02, 0012, 0013, 1, 464.0, -60.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0012-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-nii.fits
iarr = [  60.  160.  260.  360.  460.  560.  660.  760.  860.  960.] jarr = [ 464.  464.  464.  464.  464.  464.  464.  464.  464.  464.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76323814, -5.3929956), (83.75342282, -5.39306366),
     (83.7436075, -5.39313156), (83.73379217, -5.3931993),
     (83.72397685, -5.39326688), (83.71416152, -5.39333431),
     (83.70434619, -5.39340158), (83.69453086, -5.39346869),
     (83.68471553, -5.39353565), (83.6749002, -5.39360244)]>
Binning along slit: image = 2 spectrum = 2
[ 83.76323207  83.75341675  83.74360143  83.73378611  83.72397078
  83.71415545  83.70434012  83.69452479  83.68470946  83.67489413] [-5.39299038 -5.39305844 -5.39312634 -5.39319408 -5.39326167 -5.39332909
 -5.39339636 -5.39346348 -5.39353043 -5.39359723]
[ 4252.  4399.  4547.  4695.  4843.  4991.  5138.  5286.  5434.  5582.] [ 5164.  5163.  5162.  5161.  5160.  5159.  5158.  5157.  5156.  5155.]
Wav: [6559.29, 6566.29] Pixel: [  13.23643219  135.38568331]
Wav: [6579.95, 6586.95] Pixel: [   3.75122191  125.90047303]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.910890984261 -0.0345993965867 -0.0231613499696 0.0155135592095
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
#+end_example




*** Different binning between image and spectrum
+ Note that binning along the slit axis differs between image+slit and spectrum for these 2013-12 datasets:
  + 086
  + 090
  + 102
  + 111
+ It is x2 for the image+slit, but x3 for the spectrum
+ This is now dealt with in the [[id:1D9200A9-45BA-4128-894B-4D4DF84FC2F2][find_slit_coords]] function


*** DONE Allow for offsets perpendicular to slit
CLOSED: [2015-10-06 Tue 23:02]
+ In some cases, the pointing may have drifted in between the image+slit exposure and the spectrum exposure
+ I suspect this is happening with the 2013-12 spectra at least
+ [2015-10-06 Tue] *Cancel* this since it is not that important
*** DONE Problems with the flux zero-point of the spectra
CLOSED: [2015-09-10 Thu 18:00]
:LOGBOOK:
CLOCK: [2015-09-10 Thu 10:37]--[2015-09-10 Thu 18:00] =>  7:23
:END:
+ The original way I was dealing with this was to use the =zero= column in the table to finesse things by hand so that the "calib image" versus "integrated spectrum" plot goes through the origin
  + However, I don't like this approach because there is no check that the "continuum" parts of the spectrum (in between the emission lines) still have a sensible value (at the very least, non-negative!)
+ We can do better.  By looking at vignetted edge of the untrimmed spectra exposures, we can see whether the "continuum" values are real continuum or not.
  + In many cases, it is obvious that there is still a residual constant value that needs to be subtracted
  + For instance, with 2013-12-086 dataset:
    + [[file:~/Dropbox/papers/LL-Objects/SPMDIC13/][file:~/Dropbox/papers/LL-Objects/SPMDIC13/]]
    + The raw spectrum is spm088.fits
    + The reduced spectrum is spm088_bcrx.fits, spec088-ha.fits, spec088-nii.fits
    + Unfortunately, they are not all the same
      + spm088_bcrx.fits looks like its flux zero point is 16
      + spec088-ha.fits looks like its flux zero point is 11
      + spec088-nii.fits looks like its flux zero point is 12
    + We will try using 11.0
+ So plan is to re-use the =zero= column to be the value that we subtract from the ha and nii spectra pixels *before* summing in wavelength.
+ This works more or less well for 2013-12 and 2010
+ [X] Linear trend in zero-point for 2007-01 LL1 slits
  + The "continuum" goes negative at the N end of the slits
  + This would be best dealt with by modifying the images before using them
  + The problem is seen in all the spectra - it seems to be due to having subtracted the image in superbias.fits, which is obviously wrong, since it has a linear gradient from 1150 to 1230, which is a delta of 80
    + I thing the real value should be about 1160 to 1170
    + So if we map the y-axis onto [0, 1], then we need to add 80*y - 10
    + This is done [[id:4335A38B-52C8-4F0E-8F92-308DC4DBC4F6][below]]
+ Now that we have fixed up the LL1 slits, we still get reasonable calibrations, even when we determine =zero= directly from the spectral images
  + The only problem is that the Bright Bar is slightly less prominent on the spectra than it is on the calibration image
  + It can be largely fixed by pushing =zero= up to about 10
  + This is fine for Ha, but is a bit low for nii in the S end of the slit
  + But the high vel components are in the N end and not seen in nii, so it doesn't matter

**** Script to fix the 2007 bias subtractions
:PROPERTIES:
:dir:      /Users/will/Work/SPM2007/Reduced
:ID:       4335A38B-52C8-4F0E-8F92-308DC4DBC4F6
:END:
#+BEGIN_SRC python :results output verbatim
import glob
import numpy as np
from astropy.io import fits
fnlist = glob.glob('spec*-ha.fits') + glob.glob('spec*-nii.fits')
for fn in fnlist:
    print(fn)
    hdu, = fits.open(fn)
    ny, nx = hdu.data.shape
    y = np.linspace(0.0, 1.0, ny).reshape((ny, 1))
    hdu.data += 0.5*(80*y - 5.0)
    hdu.writeto(fn.replace('.fits', '-fix.fits'), clobber=True)
#+END_SRC

#+RESULTS:
#+begin_example
spec014-ha.fits
spec016-ha.fits
spec021-ha.fits
spec025-ha.fits
spec029-ha.fits
spec036-ha.fits
spec040-ha.fits
spec044-ha.fits
spec055-ha.fits
spec068-ha.fits
spec073-ha.fits
spec078-ha.fits
spec016-nii.fits
spec021-nii.fits
spec025-nii.fits
spec029-nii.fits
spec036-nii.fits
spec040-nii.fits
spec044-nii.fits
spec055-nii.fits
spec068-nii.fits
spec073-nii.fits
spec078-nii.fits
#+end_example




**** DONE Script to cut out the ha and nii spectra from the 2015 slits
CLOSED: [2015-09-11 Fri 08:32]
:PROPERTIES:
:dir:      /Users/will/Dropbox/SPMFEB15/archivos
:END:

+ We only have a lamp spectrum for the 0013 setting
  + So I calculate an offset by hand for the 0004 exposure
  + 656.76 - 529.148 = 127.612
  + 654.275 - 525.139 = 129.136
  + Tweaked it by hand by aligning on WCS in ds9
    + Strangely, the shift was slightly different for nii and ha


#+BEGIN_SRC python :results output verbatim
import numpy as np
from astropy.io import fits
jwin = 160
for slitid, lineid, j0 in  [['0004', 'ha', 570], ['0004', 'nii', 930],
                            ['0013', 'ha', 440], ['0013', 'nii', 810],]:
    fn = 'spm{}o_sub.fits'.format(slitid)
    hdu, = fits.open(fn)
    hdu.data = hdu.data[j0:j0+jwin]
    hdu.header['CRPIX2'] -= j0
    # if (slitid, lineid) == ('0004', 'nii'):
    #     hdu.data *= 3.0         # forced to use weaker doublet component
    if (slitid, lineid) == ('0004', 'ha'):
        hdu.header['CRPIX2'] += 127.0
    if (slitid, lineid) == ('0004', 'nii'):
        hdu.header['CRPIX2'] += 125.0
    hdu.writeto(                                                                
        fn.replace('.fits', '-{}.fits'.format(lineid)),
        clobber=True
    )

#+END_SRC

#+RESULTS:

** Program to perform flux calibration: slit-calibration.py
:PROPERTIES:
:header-args: :tangle slit-calibration.py :comments link
:END:

*** Imports
#+name: slit-calib-imports
#+BEGIN_SRC python
import os
import sys
import numpy as np
import astropy
from astropy.table import Table
from astropy.io import fits
from astropy.wcs import WCS
from astropy.wcs.utils import pixel_to_skycoord
from matplotlib import pyplot as plt
import seaborn as sns
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.modeling import models, fitting
#+END_SRC

*** Read in the table of all slits
+ We want the ID columns to be read as strings since they contain leading zeros in some cases, which need to be preserved
+ This was not happening automatically for the =imid= column so I use a custom converter
#+name: read-slit-table
#+BEGIN_SRC python
converters = {'imid': [astropy.io.ascii.convert_numpy(np.str)]}
tab = Table.read('all-slits-input.tab',
                 format='ascii.tab', converters=converters)
#+END_SRC

*** Fits files for the spectra and image+slit
+ These are kept in nested dicts of dicts of template formats, which are keyed
  1. By the file type (see below)
  2. By the date of observations (YYYY-MM)
     - with a suffix b to distinguish different sets from same temporada
+ The file types are:
  + fullspec :: The original full spectrum file, which includes ha and nii
    - This is only used for the flux calibration and positioning, summing up in the wavelength direction
    - [2015-09-11 Fri] /UPDATE: I don't use these any more/
    - So it doesn't matter that it isn't rectified
    - [X] Ideally it will be CR-rejected and bias-subtracted, but I am not sure I have those for all datasets
      - [2015-09-11 Fri] This wasn't important since I have ended up using the ha and nii spectra instead
    - Note that some of the datasets where two exposures are summed use a format like =117-118= for the file name for the full spectrum
    - Also note that for the 2013-02 dataset I have made symbolic links into the =WesternShocks/= folder for the full spectrum files, so that we don't have to know about the individual night folders (=150213/= and =160213/=) any more. 
  + ha :: The extracted Ha line
    - In cases where the full spectrum has form like =117-118=, then the extracted H\alpha spectrum just uses =117=
    - This is implemented in the function =find_fits_filepath()=
  + nii :: The extracted [N II] line
    - Same as for H\alpha
  + image :: The image+slit exposure
    - I only use this for finding the ra, dec of the slit center
#+name: slit-calib-filenames
#+BEGIN_SRC python
file_templates = {
    'fullspec' : {
        '2006-02': 'Work/SPM2005/pp{}.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2007-oiii': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spm{}_bcr.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spm{}_bcrx.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_bcrx.fits',
    },
    'siis' : {
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-siis.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spec{}-siis.fits',
    },
    'siil' : {
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-siil.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spec{}-siil.fits',
    },
    'oiii' : {
        '2007-oiii': 'Work/SPM2007/Reduced/spec{}-oiii.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/spec{}-oiii.fits',
    },
    'ha' : {
        '2006-02': 'Work/SPM2007/Reduced/HH505/slits/SPMha/spec{}-halpha.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}-ha.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-ha-fix.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spec{}-ha.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spec{}-ha.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spec{}-ha.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_sub-ha.fits',
    },
    'nii' : {
        '2006-02': 'Work/SPM2007/Reduced/HH505/slits/SPMnii/spec{}-nii.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}-nii.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-nii-fix.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spec{}-nii.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spec{}-nii.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spec{}-nii.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_sub-nii.fits',
    },
    'image' : {
        '2006-02': 'Dropbox/Papers/LL-Objects/feb2006/pp{}-ardec.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spm{}-ardec.fits',
        '2007-01': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2007-sii': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2007-oiii': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spm{}_ardec.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spm{}-ardec.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}-ardec.fits',
    },
}

def find_fits_filepath(db, filetype):
    """Return path to the FITS file for an image or spectrum 
    """
    id_ = db['imid'] if filetype == 'image' else db['specid']
    id_ = str(id_)
    if filetype in ('ha', 'nii') and db['Dataset'] not in ['2013-12']:
        id_ = id_.split('-')[0]
    template = file_templates[filetype][db['Dataset']]
    path = template.format(id_)
    print('~/'+path)
    homedir = os.path.expanduser('~')
    return os.path.join(homedir, path)
#+END_SRC


*** Construct the synthetic slit from the reference image
:PROPERTIES:
:ID:       28077E60-1BFE-4AD4-8DDE-5C292C252564
:END:
A function to trace the profile of a slit
+ Input are arrays of RA and Dec coordinates
+ Together with the image itself and its WCS object
+ Output is an array of the profile along the slit
  + Although the function makes no assumption about the geometry of the coordinate arrays, so it doesn't /need/ to be a slit
+ [ ] Currently the output profile is simply calculated from the nearest pixel, but I have grander plans for this eventually:
  - I should construct a logical mask for each slit pixel, based on the pixel size, and then average all the image pixels for which the mask is True
  - This will be pretty slow if I am using the entire reference image array every time
  - So I should first extract a sub-image, given by the limits of the slit
#+BEGIN_SRC python
def slit_profile(ra, dec, image, wcs):
    """
    Find the image intensity for a list of positions (ra and dec)
    """
    xi, yj = wcs.all_world2pix(ra, dec, 0)
    # Find nearest integer pixel
    ii, jj = np.floor(xi + 0.5), np.floor(yj + 0.5)
    print(ra[::100], dec[::100])
    print(ii[::100], jj[::100])
    return np.array([image[j, i] for i, j in zip(ii, jj)])
#+END_SRC

The actual photometric standard image we are going to use.  This is from Massimo's ground-based program.  The pixel size is 0.238 arcsec 
#+BEGIN_SRC python
wfi_dir = '/Users/will/Work/OrionTreasury/wfi'
photom, = fits.open(os.path.join(wfi_dir, 'Orion_H_A_deep.fits'))
wphot = WCS(photom.header)
#+END_SRC


*** Find the world coordinates of each pixel along the slit 
:PROPERTIES:
:ID:       1D9200A9-45BA-4128-894B-4D4DF84FC2F2
:END:
+ [2015-09-06 Sun] To make this more useful, I will return the entire array of RA and Dec for each pixel along the slit (instead of just RA0, Dec0 for the slit center)
  + This means that the =ds= and =PA= parameters will no longer be needed, but I will leave them in anyway. 
+ Similar to what I did [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][here]] and [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]]
  + But simpler really
+ We need to find the following:
  + (=RA0=, =Dec0=) of the slit center
    + This comes from the WCS header of the image+slit, together with the =islit= and =shift= values from the [[id:38EBF0CA-1CA6-4420-A9D8-F784FEB57BCC][table above]]
  + Pixel scale along the slit =ds=
  + =PA= of the slit
+ Note that we do the conversion to ICRS frame.  Some of the earlier images are in FK4, which is 1950 epoch!
  + We fix this using =astropy.coordinates.SkyCoord= with the coordinate frame taken from the =radesys= WCS parameter. 

#+BEGIN_SRC python
def find_slit_coords(db, hdr, shdr):
    """Find the coordinates of all the pixels along a spectrograph slit

    Input arguments are a dict-like 'db' of hand-measured values (must
    contain 'saxis', 'islit' and 'shift') and a FITS headers 'hdr' from
    the image+slit exposure and 'shdr' from a spectrum exposure

    Returns a dict of 'ds' (slit pixel scale), 'PA' (slit position
    angle), 'RA' (array of RA values in degrees along slit), 'Dec'
    (array of Dec values in degrees along slit)

    """
    jstring = str(db['saxis'])  # which image axis lies along slit
    dRA_arcsec = hdr['CD1_'+jstring]*3600*np.cos(np.radians(hdr['CRVAL2']))
    dDEC_arcsec = hdr['CD2_'+jstring]*3600
    ds = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))

    # Pixel coords of each slit pixel on image (in 0-based convention)
    if jstring == '1':
        # Slit is horizontal in IMAGE coords
        ns = shdr['NAXIS1']
        iarr = np.arange(ns) - float(db['shift'])
        jarr = np.ones(ns)*float(db['islit'])
        try:
            image_binning = hdr['CBIN']
            spec_binning = shdr['CBIN']
        except KeyError:
            image_binning = hdr['CCDXBIN']
            spec_binning = shdr['CCDXBIN']

        # correct for difference in binning between the image+slit and the spectrum
        iarr *= spec_binning/image_binning
    elif jstring == '2':
        # Slit is vertical in IMAGE coords
        ns = shdr['NAXIS2']
        iarr = np.ones(ns)*float(db['islit'])
        jarr = np.arange(ns) - float(db['shift'])
        try:
            image_binning = hdr['RBIN']
            spec_binning = shdr['RBIN']
        except KeyError:
            image_binning = hdr['CCDYBIN']
            spec_binning = shdr['CCDYBIN']

        jarr *= spec_binning/image_binning
    else:
        raise ValueError('Slit axis (saxis) must be 1 or 2')

    print('iarr =', iarr[::100], 'jarr =', jarr[::100])
    # Also correct the nominal slit plate scale
    ds *= spec_binning/image_binning

    # Convert to world coords, using the native frame
    w = WCS(hdr)
    observed_frame = w.wcs.radesys.lower()
    # Note it is vital to ensure the pix2world transformation returns
    # values in the order (RA, Dec), even if the image+slit may have
    # Dec first
    coords = SkyCoord(*w.all_pix2world(iarr, jarr, 0, ra_dec_order=True),
                      unit=(u.deg, u.deg), frame=observed_frame)
    print('coords =', coords[::100])
    print('Binning along slit: image =', image_binning, 'spectrum =', spec_binning)
    # Make sure to return the coords in the ICRS frame
    return {'ds': ds, 'PA': PA,
            'RA': coords.icrs.ra.value,
            'Dec': coords.icrs.dec.value}
#+END_SRC


*** Package up the slit coordinates for use in a FITS header
:PROPERTIES:
:ID:       B59C08A8-8FE0-4A36-B55C-97CC92A25A69
:END:
We also need to create the WCS keywords so that the slit coordinates can be reconstructed from a FITS header.  The general approach is as follows: 

+ We use the standard FITS notation for axes: i, j
  + i = 1, 2, ... are the world coordinate axes
  + j = 1, 2, ... are the image (data array) coordinate axes
  + Python arrays have the order reversed
  + Reference pixel has =CRPIXj= and =CRVALi=
  + Scale is specified with =CDELTi= and =PCi_j=
    + =CDELTi= has the pixel scale in arcsec and wavelength
    + =PCi_j= just has the rotation matrix according to the PA of the slit
+ The calibrated FITS spectra will be regularized so that the image x-axis (j=1 in FITS parlance) is wavelength, and the image y-axis (j=2) is displacement along slit.
  - Any necessary transpose of the data array is done [[id:C7D141C2-85FF-427D-AF2D-DCC34B14E1A4][in the main loop]]
  - [ ] We could also have a degenerate third image axis that is perpendicular to the slit (dimension of 1 along this axis).  Is this necessary? Is it wise?
+ We use 3 world coordinate axes, even though there are only two true image axes, so we can specify the variation of both RA and Dec along the slit
  - The /provisional/ order of the axes is
    - i = 1 :: Wavelength
    - i = 2 :: RA
    - i = 3 :: Dec
  - This is to have the best mapping between the i and j axis orderings
+ We get all the wavelength info directly from the WCS of the original spectrum
  + [ ] Later, we will want to put it in velocity units, possibly as an alternate WCS axis 
+ We get the celestial coordinate info from the list of =slit_coords=
  + We convert these to =astropy.coord.SkyCoord= form and use the =separation()= and =position_angle()= methods between each pair of adjacent pixels
  + We then check that each pair has the same separation and PA as for the first pair
    + This works fine for the separations using the =np.allclose= default relative tolerance of 1e-5, but for the PAs I had to relax it to 1e-4
    + Then we use the separation to set =CDELTi= values and the PA to set elements of the =PCi_j= matrix
+ We set a load of extra WCS keywords
  + The coordinate types and units
  + The reference frame and date of observations
+ At the end, we calculate the coordinates of the slit pixels using this WCS that we have created
  + In theory these should be the same as the =slit_coords= values that were fed in
  + I see differences of order 0.01 arcsec by the end of the slit
    + Not sure why, but I'm not too worried

#+BEGIN_SRC python
def make_slit_wcs(db, slit_coords, spechdu):
    # Input WCS from original spectrum
    wspec = WCS(spechdu.header)
    wspec.fix()

    #
    # First find wavelength scale from the spectrum  
    #

    # For original spectrum, the wavelength and slit axes are 0-based,
    # but in FITS axis order instead of python access order, since
    # that is the way that that the WCS object likes to do it
    ospec_wavaxis = 2 - db['saxis']
    ospec_slitaxis = db['saxis'] - 1

    # The rules are that CDi_j is used if it is present, and only if
    # it is absent should CDELTi be used
    if wspec.wcs.has_cd():
        dwav = wspec.wcs.cd[ospec_wavaxis, ospec_wavaxis]
        # Check that the off-diagonal terms are zero
        assert(wspec.wcs.cd[0, 1] == wspec.wcs.cd[1, 0] == 0.0)
    else:
        dwav = wspec.wcs.cdelt[ospec_wavaxis]
        if wspec.wcs.has_pc():
            # If PCi_j is also present, make sure it is identity matrix
            assert(wspec.wcs.pc == np.eye(2))
    wav0 = wspec.wcs.crval[ospec_wavaxis]
    wavpix0 = wspec.wcs.crpix[ospec_wavaxis]

    #
    # Second, find the displacement scale and ref point from the slit_coords
    #
    # The slit_coords should already be in ICRS frame
    c = SkyCoord(slit_coords['RA'], slit_coords['Dec'], unit=u.deg)
    # Find vector of separations between adjacent pixels
    seps = c[:-1].separation(c[1:])
    # Ditto for the position angles
    PAs = c[:-1].position_angle(c[1:])
    # Check that they are all the same as the first one
    assert(np.allclose(seps/seps[0], 1.0))
    # assert(np.allclose(PAs/PAs[0], 1.0, rtol=1.e-4))
    # Then use the first one as the slit pixel size and PA
    ds, PA, PA_deg = seps[0].deg, PAs.mean().rad, PAs.mean().deg
    # And for the reference values too
    RA0, Dec0 = c[0].ra.deg, c[0].dec.deg

    #
    # Now make a new shiny output WCS, constructed from scratch
    #
    w = WCS(naxis=3)

    # Make use of all the values that we calculated above
    w.wcs.crpix = [wavpix0, 1, 1]
    w.wcs.cdelt = [dwav, ds, ds]
    w.wcs.crval = [wav0, RA0, Dec0]
    # PC order is i_j = [[1_1, 1_2, 1_3], [2_1, 2_2, 2_3], [3_1, 3_2, 3_3]]
    w.wcs.pc = [[1.0, 0.0, 0.0],
                [0.0, np.sin(PA), -np.cos(PA)],
                [0.0, np.cos(PA), np.sin(PA)]]

    #
    # Finally add in auxillary info
    #
    w.wcs.radesys = 'ICRS'
    w.wcs.ctype = ['AWAV', 'RA---TAN', 'DEC--TAN']
    w.wcs.specsys = 'TOPOCENT'
    w.wcs.cunit = [u.Angstrom, u.deg, u.deg]
    w.wcs.name = 'TopoWav'
    w.wcs.cname = ['Observed air wavelength', 'Right Ascension', 'Declination']
    w.wcs.mjdobs = wspec.wcs.mjdobs
    w.wcs.datfix()              # Sets DATE-OBS from MJD-OBS

    # Check the new pixel values
    npix = len(slit_coords['RA'])
    check_coords = pixel_to_skycoord(np.arange(npix), [0]*npix, w, 0)
    # These should be the same as the ICRS coords in slit_coords
    print('New coords:', check_coords[::100])
    print('Displacements in arcsec:', check_coords.separation(c).arcsec[::100])
    # 15 Sep 2015: They seem to be equal to within about 1e-2 arcsec

    return w
#+END_SRC

Unfortunately, DS9 does not understand this lovely conformant and informative WCS structure that we have devised, so we need to dumb it down:
+ Actually I don't use this any more
#+BEGIN_SRC python
def fixup4ds9(w):
    w.wcs.ctype  = ['LINEAR', 'LINEAR', 'LINEAR']
    # w.wcs.cdelt[1:] *= 3600
    # w.wcs.units[1:] = 'arcsec', 'arcsec'
    w.wcs.crval[1], w.wcs.crval[2] = 0.0, 0.0
    w.wcs.name = 'TopoWavDS9'
    return w
#+END_SRC

*** Fit Chebyshev polynomials to along-slit variation
#+BEGIN_SRC python
 def fit_cheb(x, y, npoly=3, mask=None):
    """Fits a Chebyshev poly to y(x) and returns fitted y-values"""
    fitter = fitting.LinearLSQFitter()
    p_init = models.Chebyshev1D(npoly, domain=[x.min(), x.max()])
    if mask is None:
        mask = np.ones_like(x).astype(bool)
    p = fitter(p_init, x[mask], y[mask])
    print(p)
    return p(x)
#+END_SRC
*** Make some useful and pretty plots
+ Three-pane plot that we use for manually adjusting the calibration parameters
+ [2015-09-22 Tue] Add the nii/ha ratio to third pane
#+BEGIN_SRC python
sns.set_palette('RdPu_d', 3)
def make_three_plots(spec, calib, prefix, niirat=None):
    assert spec.shape == calib.shape
    fig, axes = plt.subplots(3, 1)

    vmin, vmax = 0.0, np.median(calib) + 5*calib.std()

    ypix = np.arange(len(calib))
    ratio = spec/calib
    mask = (ypix > 10.0) & (ypix < ypix.max() - 10.0) \
           & (ratio > np.median(ratio) - 2*ratio.std()) \
           & (ratio < np.median(ratio) + 2*ratio.std()) 
    try:
        ratio_fit = fit_cheb(ypix, ratio, mask=mask)
    except:
        ratio_fit = np.ones_like(ypix)

    alpha = 0.8

    # First, plot two profiles against each other to check for zero-point offsets
    axes[0].plot(calib, spec/ratio_fit, '.', alpha=alpha)
    axes[0].plot([vmin, vmax], [vmin, vmax], '-', alpha=alpha)
    axes[0].set_xlim(vmin, vmax)
    axes[0].set_ylim(vmin, vmax)
    axes[0].set_xlabel('Calibration Image')
    axes[0].set_ylabel('Corrected Integrated Spectrum')

    # Second, plot each against slit pixel to check spatial offset
    axes[1].plot(ypix, calib, alpha=alpha, label='Calibration Image')
    axes[1].plot(ypix, spec/ratio_fit, alpha=alpha, lw=1.0, label='Corrected Integrated Spectrum')
    axes[1].plot(ypix, spec, alpha=alpha, lw=0.5, label='Uncorrected Integrated Spectrum')
    axes[1].set_xlim(0.0, ypix.max())
    axes[1].set_ylim(vmin, vmax)
    axes[1].legend(fontsize='xx-small', loc='lower right')
    axes[1].set_xlabel('Slit pixel')
    axes[1].set_ylabel('Profile')

    # Third, plot ratio to look for spatial trends
    axes[2].plot(ypix, ratio, alpha=alpha)
    axes[2].plot(ypix, ratio_fit, alpha=alpha)
    if niirat is not None:
        axes[2].plot(ypix, niirat, 'b')
    axes[2].set_xlim(0.0, ypix.max())
    axes[2].set_ylim(0.0, 1.5)
    axes[2].set_xlabel('Slit pixel')
    axes[2].set_ylabel('Ratio: Spec / Calib')


    fig.set_size_inches(5, 8)
    fig.tight_layout()
    fig.savefig(prefix+'.png', dpi=300)

    return ratio_fit
#+END_SRC

*** Use command line argument to restrict which datasets are processed
:PROPERTIES:
:ID:       1A6F05F0-32BA-4906-9C0D-27A8B7D5BD69
:END:
+ Read a single command line argument to choose which datasets to process
  + It can be as specific as a single position:
    + E.g, 2006-02-281
  + Or all positions from one set:
    + E.g, 2007-01b
  + Or all from one year:
    + E.g, 2013
  + Or whatever
+ The purpose of this is to speed things up when iterating to find the offsets and norms
#+BEGIN_SRC python
if len(sys.argv) > 1:
    selector_pattern = sys.argv[1]
else:
    selector_pattern = ''
#+END_SRC

*** DONE Remove background and sum over wavelength across line
CLOSED: [2015-10-06 Tue 23:01]
:PROPERTIES:
:ID:       2A668A05-2A03-401C-A0D9-441821699E60
:END:
:LOGBOOK:
CLOCK: [2015-09-22 Tue 21:52]--[2015-09-28 Mon 11:53] => 134:01
:END:
+ Although in principal some of the "background" is real continuum, most of it is not
+ We can get better results by simply removing it, as I did [[id:74998E9B-988D-4378-9465-DAC5EE6E15A0][down here]]
+ But for the time being we will stick to the original simple version
#+BEGIN_SRC python
def extract_profile(data, wcs, wavrest, dw=7.0):
    data = remove_bg_and_regularize(data, wcs, wavrest)
    # pixel limits for line extraction
    lineslice = wavs2slice([wavrest-dw/2, wavrest+dw/2], wcs)
    return data[:, lineslice].sum(axis=1)
#+END_SRC

New version, adapted from what I did in the ratio section

#+BEGIN_SRC python
def wavs2slice(wavs, wcs):
    """Convert a wavelength interval `wavs` (length-2 sequence) to a slice of the relevant axis`"""
    assert len(wavs) == 2
    isT = row['saxis'] == 1
    if isT:
        _, xpixels = wcs.all_world2pix([0, 0], wavs, 0)
    else:
        xpixels, _ = wcs.all_world2pix(wavs, [0, 0], 0)
    print('Wav:', wavs, 'Pixel:', xpixels)
    i1, i2 = np.maximum(0, (xpixels+0.5).astype(int))
    return slice(min(i1, i2), max(i1, i2))

def remove_bg_and_regularize(data, wcs, wavrest, dwbg_in=7.0, dwbg_out=10.0):
    '''
    Transpose data if necessary, and then subtract off the background (blue and red of line)
    '''
    isT = row['saxis'] == 1
    # Make sure array axis order is (position, wavelength)
    if isT:
        data = data.T
    if row['Dataset'] == '2015-02':
        # Don't try this for the newest data, I already removed the BG
        return data
    # pixel limits for blue, red bg extraction
    bslice = wavs2slice([wavrest-dwbg_out/2, wavrest-dwbg_in/2], wcs)
    rslice = wavs2slice([wavrest+dwbg_in/2, wavrest+dwbg_out/2], wcs)
    # extract backgrounds on blue and red sides
    bgblu = data[:, bslice].mean(axis=1)
    bgred = data[:, rslice].mean(axis=1)
    # take weighted average, accounting for cases where the bg region
    # does not fit in the image
    weight_blu = data[:, bslice].size
    weight_red = data[:, rslice].size
    print('Background weights:', weight_blu, weight_red)
    bg = (bgblu*weight_blu + bgred*weight_red)/(weight_blu + weight_red)
    return data - bg[:, None]



#+END_SRC


**** Original version
#+BEGIN_SRC python :tangle no
def extract_profile(data):
    return remove_background(data).sum(axis=wavaxis)


def remove_background(data):
    return data - row['zero']
#+END_SRC


*** Loop over the slit positions and do the stuff
:PROPERTIES:
:ID:       C7D141C2-85FF-427D-AF2D-DCC34B14E1A4
:END:
#+BEGIN_SRC python
  # Emission lines included in each type of full spectrum
  linesets  = {
      'sii' : ['siil', 'siis'],
      'oiii': ['oiii'],
      'default': ['ha', 'nii'],
  }

  restwavs = {
      'ha': 6562.79,
      'nii': 6583.45,
      'siis': 6716.44,
      'siil': 6730.816,
      'oiii': 5006.84,
  }

  for row in tab:
      if row['Dataset'].endswith('sii'):
          lineset = linesets['sii']
      elif row['Dataset'].endswith('oiii'):
          lineset = linesets['oiii']
      else:
          lineset = linesets['default']
      
      full_id = row['Dataset'] + '-' + row['imid']
      if not full_id.startswith(selector_pattern):
          continue
      print(row)
      imslitfile = find_fits_filepath(row, 'image')


      line_hdus = []
      for line_id in lineset:
          line_hdus.append(fits.open(find_fits_filepath(row, line_id))[0])
      
      imhdu = fits.open(imslitfile)[0]

      # World coordinates along slit
      slit_coords = find_slit_coords(row, imhdu.header, line_hdus[0].header)

      # Find synthetic profile from calibration image
      calib_profile = slit_profile(slit_coords['RA'], slit_coords['Dec'],
                                   photom.data, wphot)

      ratio = None
      if lineset == ['ha', 'nii']:
          # This part is too difficult to generalise to other lines for the moment
          hahdu, niihdu = line_hdus
          # Find actual profile along slit from spectrum
          wavaxis = row['saxis'] - 1  # This always seems to be true
          ha_profile = extract_profile(hahdu.data, WCS(hahdu.header), 6562.79)
          # Take the nii/ha calibration correction factor  from the table
          nii_profile = row['r(nii)']*extract_profile(niihdu.data, WCS(niihdu.header), 6583.45)
          spec_profile = (ha_profile+1.333*nii_profile)/row['norm']
          plt_prefix = 'plots/{:03d}-{}-calib'.format(row.index, full_id)
          ratio = make_three_plots(spec_profile, calib_profile, plt_prefix, niirat=nii_profile/ha_profile)

      #
      # Save calibrated spectra to files
      #

      for lineid, hdu in zip(lineset, line_hdus):
          restwav = restwavs[lineid]
          print('Saving', lineid, 'calibrated spectrum')
          # Apply basic calibration zero-point and scale
          hdu.data = remove_bg_and_regularize(hdu.data, WCS(hdu.header), restwav)/row['norm']
          # Regularize spectral data so that wavelength is x and pos is y
          # This is now done by the bg subtraction function

          # Apply polynomial correction along slit
          if ratio is not None:
              hdu.data /= ratio[:, None]
          # Extend in the third dimension (degenerate axis perp to slit)
          hdu.data = hdu.data[None, :, :]

          # Create the WCS object for the calibrated slit spectra
          wslit = make_slit_wcs(row, slit_coords, hdu)
          # Set the rest wavelength for this line
          wslit.wcs.restwav = (restwav*u.Angstrom).to(u.m).value
          # # Remove WCS keywords that might cause problems
          # for i in 1, 2:
          #     for j in 1, 2:
          #         kwd = 'CD{}_{}'.format(i, j)
          #         if kwd in hdu.header:
          #             hdu.header.remove(kwd) 
          # Then update the header with the new WCS structure as the 'A'
          # alternate transform
          hdu.header.update(wslit.to_header(key='A'))
          # Also save the normalization factor as a per-slit weight to use later
          hdu.header['WEIGHT'] = row['norm']

          # And better not to change the original WCS at all
          # Unless we have transposed the array, which we have to compensate for
          if row['saxis'] == 1:
              for k in ['CRPIX{}', 'CRVAL{}', 'CDELT{}', 'CD{0}_{0}']:
                  hdu.header[k.format('1')], hdu.header[k.format('2')] = hdu.header[k.format('2')], hdu.header[k.format('1')] 
          # # And write a bowdlerized version that DS9 can understand as the main WCS
          # hdu.header.update(fixup4ds9(wslit).to_header(key=' '))
          calibfile = 'Calibrated/{}-{}.fits'.format(full_id, lineid)
          hdu.writeto(calibfile, clobber=True)

#+END_SRC
*** Test what is going on 
#+BEGIN_SRC python
# print(wphot.wcs)
# for row in tab:
#     print([row[x] for x in ('Dataset', 'imid', 'specid', 'Notes')])
#+END_SRC

** Run slit-calibration.py
:PROPERTIES:
:ID:       06237754-EC3C-476C-8DA2-AA881CFB0410
:END:
+ For debugging we can redirect stdout to stderr with =1>&2=
  + This means that the normal output (e.g., print statements) will show up in the =*Org-Babel Error Output*= buffer 

#+BEGIN_SRC sh :exports code :results verbatim
python slit-calibration.py  # 1>&2
#+END_SRC

#+RESULTS:
#+begin_example
<Row 0 of table
 values=('2006-02', '326', '324', 2, 283.5, 74.0, 1000, 1.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp326-ardec.fits
~/Work/SPM2005/pp324.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec324-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec324-nii.fits
iarr = [ 283.5  283.5  283.5  283.5  283.5  283.5] jarr = [ -74.   26.  126.  226.  326.  426.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05872963, -5.46776112), (83.0584093, -5.45046954),
     (83.05808898, -5.43317795), (83.05776868, -5.41588636),
     (83.0574484, -5.39859478), (83.05712814, -5.38130321)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67290928  83.67267318  83.67243709  83.67220102  83.67196496
  83.67172891] [-5.43558101 -5.41828808 -5.40099516 -5.38370224 -5.36640932 -5.34911642]
[ 5612.  5615.  5619.  5622.  5626.  5630.] [ 4520.  4781.  5043.  5304.  5566.  5827.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    ------------- --------------- ---------------- ----------------
    1.03654560373 0.0552079560052 -0.0480102937533 -0.0205920904115
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67290928, -5.43558101), (83.67267319, -5.41828809),
     (83.67243713, -5.40099517), (83.67220107, -5.38370226),
     (83.67196503, -5.36640936), (83.671729, -5.34911647)]>
Displacements in arcsec: [  8.58749764e-12   6.20268567e-05   1.26808548e-04   1.96898220e-04
   2.74517678e-04   3.61494280e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67290928, -5.43558101), (83.67267319, -5.41828809),
     (83.67243713, -5.40099517), (83.67220107, -5.38370226),
     (83.67196503, -5.36640936), (83.671729, -5.34911647)]>
Displacements in arcsec: [  8.58749764e-12   6.20268567e-05   1.26808548e-04   1.96898220e-04
   2.74517678e-04   3.61494280e-04]
<Row 1 of table
 values=('2006-02', '318', '319', 2, 280.0, 78.0, 3300, 3.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp318-ardec.fits
~/Work/SPM2005/pp319.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec319-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec319-nii.fits
iarr = [ 280.  280.  280.  280.  280.  280.] jarr = [ -78.   22.  122.  222.  322.  422.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.67221103, -5.4345169), (83.67193445, -5.4172216),
     (83.67165789, -5.3999263), (83.67138134, -5.382631),
     (83.67110482, -5.3653357), (83.6708283, -5.34804041)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67220496  83.67192838  83.67165182  83.67137528  83.67109875
  83.67082223] [-5.43451169 -5.41721639 -5.39992109 -5.38262578 -5.36533049 -5.3480352 ]
[ 5622.  5627.  5631.  5635.  5639.  5643.] [ 4536.  4797.  5059.  5321.  5582.  5844.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0            c1             c2               c3       
    ------------- ------------- ---------------- ----------------
    1.03501516229 0.10923769379 -0.0233531261762 -0.0359008858877
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67220496, -5.43451169), (83.6719284, -5.41721639),
     (83.67165186, -5.3999211), (83.67137534, -5.38262581),
     (83.67109883, -5.36533053), (83.67082234, -5.34803526)]>
Displacements in arcsec: [  1.43124961e-11   7.29112642e-05   1.50078204e-04   2.35399109e-04
   3.32129432e-04   4.42805597e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67220496, -5.43451169), (83.6719284, -5.41721639),
     (83.67165186, -5.3999211), (83.67137534, -5.38262581),
     (83.67109883, -5.36533053), (83.67082234, -5.34803526)]>
Displacements in arcsec: [  1.43124961e-11   7.29112642e-05   1.50078204e-04   2.35399109e-04
   3.32129432e-04   4.42805597e-04]
<Row 2 of table
 values=('2006-02', '260', '261', 2, 251.4, 55.0, 3600, 1.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp260-ardec.fits
~/Work/SPM2005/pp261.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec261-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec261-nii.fits
iarr = [ 251.4  251.4  251.4  251.4  251.4  251.4] jarr = [ -55.   45.  145.  245.  345.  445.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05691874, -5.46408808), (83.05663285, -5.44687129),
     (83.05634697, -5.42965451), (83.05606112, -5.41243772),
     (83.05577528, -5.39522094), (83.05548945, -5.37800417)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67111639  83.67091437  83.67071236  83.67051036  83.67030837
  83.6701064 ] [-5.43189927 -5.41468131 -5.39746336 -5.3802454  -5.36302746 -5.34580952]
[ 5639.  5642.  5645.  5648.  5651.  5654.] [ 4575.  4836.  5096.  5357.  5617.  5877.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0            c1              c2              c3       
    ------------- -------------- --------------- ----------------
    0.97695198007 0.152122951372 0.0216968685733 -0.0165160919713
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67111639, -5.43189927), (83.67091438, -5.41468131),
     (83.67071239, -5.39746336), (83.6705104, -5.38024542),
     (83.67030843, -5.36302748), (83.67010647, -5.34580956)]>
Displacements in arcsec: [  2.28999937e-11   5.27844711e-05   1.07824904e-04   1.67211516e-04
   2.32772508e-04   3.06021538e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67111639, -5.43189927), (83.67091438, -5.41468131),
     (83.67071239, -5.39746336), (83.6705104, -5.38024542),
     (83.67030843, -5.36302748), (83.67010647, -5.34580956)]>
Displacements in arcsec: [  2.28999937e-11   5.27844711e-05   1.07824904e-04   1.67211516e-04
   2.32772508e-04   3.06021538e-04]
<Row 3 of table
 values=('2006-02', '270', '271', 2, 253.5, 60.0, 6500, 4.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp270-ardec.fits
~/Work/SPM2005/pp271.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec271-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec271-nii.fits
iarr = [ 253.5  253.5  253.5  253.5  253.5  253.5] jarr = [ -60.   40.  140.  240.  340.  440.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05647681, -5.4640169), (83.0561316, -5.44675464),
     (83.0557864, -5.42949239), (83.05544123, -5.41223013),
     (83.05509608, -5.39496789), (83.05475095, -5.37770565)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67067483  83.67041372  83.67015261  83.66989153  83.66963045
  83.6693694 ] [-5.43182595 -5.41456224 -5.39729853 -5.38003483 -5.36277113 -5.34550743]
[ 5645.  5649.  5653.  5657.  5661.  5665.] [ 4576.  4838.  5099.  5360.  5621.  5882.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2              c3       
    -------------- -------------- --------------- ----------------
    0.994425136971 0.163518687642 0.0342168885265 -0.0152008823235
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67067483, -5.43182595), (83.67041373, -5.41456224),
     (83.67015265, -5.39729854), (83.66989158, -5.38003484),
     (83.66963053, -5.36277115), (83.66936949, -5.34550748)]>
Displacements in arcsec: [  2.57624929e-11   6.82297013e-05   1.38214523e-04   2.11619850e-04
   2.89979386e-04   3.74655076e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67067483, -5.43182595), (83.67041373, -5.41456224),
     (83.67015265, -5.39729854), (83.66989158, -5.38003484),
     (83.66963053, -5.36277115), (83.66936949, -5.34550748)]>
Displacements in arcsec: [  2.57624929e-11   6.82297013e-05   1.38214523e-04   2.11619850e-04
   2.89979386e-04   3.74655076e-04]
<Row 4 of table
 values=('2006-02', '276', '277', 2, 256.0, 60.0, 7000, 6.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp276-ardec.fits
~/Work/SPM2005/pp277.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec277-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec277-nii.fits
iarr = [ 256.  256.  256.  256.  256.  256.] jarr = [ -60.   40.  140.  240.  340.  440.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05603409, -5.46389959), (83.05568586, -5.44664967),
     (83.05533766, -5.42939975), (83.05498947, -5.41214983),
     (83.05464131, -5.39489992), (83.05429317, -5.37765002)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67023271  83.66996852  83.66970435  83.66944019  83.66917604
  83.66891191] [-5.43170651 -5.41445512 -5.39720373 -5.37995234 -5.36270096 -5.34544959]
[ 5652.  5656.  5660.  5664.  5668.  5672.] [ 4578.  4839.  5100.  5361.  5622.  5883.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- --------------- -----------------
    0.991568343571 0.157710423915 0.0215012499446 -0.00662717002486
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67023271, -5.43170651), (83.66996854, -5.41445512),
     (83.66970439, -5.39720373), (83.66944025, -5.37995236),
     (83.66917612, -5.36270099), (83.66891201, -5.34544963)]>
Displacements in arcsec: [  1.71749953e-11   6.89723111e-05   1.39654810e-04   2.13670512e-04
   2.92519406e-04   3.77538912e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67023271, -5.43170651), (83.66996854, -5.41445512),
     (83.66970439, -5.39720373), (83.66944025, -5.37995236),
     (83.66917612, -5.36270099), (83.66891201, -5.34544963)]>
Displacements in arcsec: [  1.71749953e-11   6.89723111e-05   1.39654810e-04   2.13670512e-04
   2.92519406e-04   3.77538912e-04]
<Row 5 of table
 values=('2006-02', '281', '282', 2, 257.7, 64.0, 3600, 8.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp281-ardec.fits
~/Work/SPM2005/pp282.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec282-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec282-nii.fits
iarr = [ 257.7  257.7  257.7  257.7  257.7  257.7] jarr = [ -64.   36.  136.  236.  336.  436.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05515786, -5.4639996), (83.05481115, -5.44673089),
     (83.05446446, -5.42946218), (83.05411778, -5.41219347),
     (83.05377113, -5.39492477), (83.0534245, -5.37765608)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66935606  83.66909347  83.6688309   83.66856834  83.6683058
  83.66804327] [-5.43180229 -5.41453212 -5.39726194 -5.37999177 -5.36272161 -5.34545146]
[ 5665.  5669.  5673.  5677.  5681.  5685.] [ 4577.  4838.  5099.  5360.  5622.  5883.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
         c0            c1              c2               c3       
    ------------ -------------- ---------------- ----------------
    1.2264861603 0.152897453932 0.00458770458405 -0.0277663695623
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66935606, -5.43180229), (83.66909349, -5.41453212),
     (83.66883094, -5.39726195), (83.6685684, -5.37999179),
     (83.66830588, -5.36272164), (83.66804337, -5.3454515)]>
Displacements in arcsec: [  1.14499969e-11   6.86347065e-05   1.39008272e-04   2.12772233e-04
   2.91449020e-04   3.76393745e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66935606, -5.43180229), (83.66909349, -5.41453212),
     (83.66883094, -5.39726195), (83.6685684, -5.37999179),
     (83.66830588, -5.36272164), (83.66804337, -5.3454515)]>
Displacements in arcsec: [  1.14499969e-11   6.86347065e-05   1.39008272e-04   2.12772233e-04
   2.91449020e-04   3.76393745e-04]
<Row 6 of table
 values=('2006-02', '286', '287', 2, 261.0, 64.0, 4000, 8.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp286-ardec.fits
~/Work/SPM2005/pp287.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec287-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec287-nii.fits
iarr = [ 261.  261.  261.  261.  261.  261.] jarr = [ -64.   36.  136.  236.  336.  436.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.0546046, -5.46394719), (83.05424179, -5.44667985),
     (83.05387901, -5.42941252), (83.05351624, -5.41214519),
     (83.0531535, -5.39487786), (83.05279078, -5.37761055)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66880309  83.6685244   83.66824573  83.66796708  83.66768844
  83.66740982] [-5.43174721 -5.41447833 -5.39720946 -5.37994059 -5.36267172 -5.34540287]
[ 5674.  5678.  5682.  5686.  5690.  5695.] [ 4578.  4839.  5100.  5361.  5622.  5884.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- ---------------- ----------------
    0.995189584398 0.128543926324 0.00127316209807 -0.0299083819602
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66880309, -5.43174721), (83.66852442, -5.41447833),
     (83.66824577, -5.39720947), (83.66796714, -5.3799406),
     (83.66768852, -5.36267175), (83.66740992, -5.34540291)]>
Displacements in arcsec: [  8.58749764e-12   7.28056167e-05   1.47240693e-04   2.24857630e-04
   3.07101139e-04   3.95273197e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66880309, -5.43174721), (83.66852442, -5.41447833),
     (83.66824577, -5.39720947), (83.66796714, -5.3799406),
     (83.66768852, -5.36267175), (83.66740992, -5.34540291)]>
Displacements in arcsec: [  8.58749764e-12   7.28056167e-05   1.47240693e-04   2.24857630e-04
   3.07101139e-04   3.95273197e-04]
<Row 7 of table
 values=('2006-02', '291', '292', 2, 262.7, 65.0, 6000, 6.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp291-ardec.fits
~/Work/SPM2005/pp292.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec292-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec292-nii.fits
iarr = [ 262.7  262.7  262.7  262.7  262.7  262.7] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05416481, -5.46384309), (83.05384842, -5.44665942),
     (83.05353205, -5.42947575), (83.05321571, -5.41229209),
     (83.05289937, -5.39510843), (83.05258306, -5.37792478)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66836383  83.66813116  83.66789849  83.66766584  83.66743321
  83.66720058] [-5.43164099 -5.414456   -5.39727102 -5.38008604 -5.36290106 -5.3457161 ]
[ 5680.  5684.  5687.  5691.  5694.  5698.] [ 4579.  4839.  5099.  5359.  5619.  5879.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- ---------------- ----------------
    0.873285266082 0.123669945253 0.00280405086531 -0.0200415273475
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66836383, -5.43164099), (83.66813117, -5.414456),
     (83.66789853, -5.39727103), (83.66766589, -5.38008605),
     (83.66743327, -5.36290109), (83.66720067, -5.34571614)]>
Displacements in arcsec: [  1.14499969e-11   6.05687755e-05   1.23034034e-04   1.89181649e-04
   2.60628760e-04   3.38777909e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66836383, -5.43164099), (83.66813117, -5.414456),
     (83.66789853, -5.39727103), (83.66766589, -5.38008605),
     (83.66743327, -5.36290109), (83.66720067, -5.34571614)]>
Displacements in arcsec: [  1.14499969e-11   6.05687755e-05   1.23034034e-04   1.89181649e-04
   2.60628760e-04   3.38777909e-04]
<Row 8 of table
 values=('2006-02', '296', '297', 2, 267.0, 66.0, 3000, 8.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp296-ardec.fits
~/Work/SPM2005/pp297.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec297-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec297-nii.fits
iarr = [ 267.  267.  267.  267.  267.  267.] jarr = [ -66.   34.  134.  234.  334.  434.]
coords = <SkyCoord (FK4: equinox=B1950.000, obstime=B1950.000): (ra, dec) in deg
    [(83.05318453, -5.46382238), (83.0528729, -5.44657699),
     (83.0525613, -5.4293316), (83.05224971, -5.41208621),
     (83.05193814, -5.39484083), (83.05162658, -5.37759546)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66738372  83.6671561   83.6669285   83.66670091  83.66647333
  83.66624577] [-5.43161555 -5.41436887 -5.39712218 -5.3798755  -5.36262883 -5.34538216]
[ 5695.  5698.  5702.  5705.  5709.  5712.] [ 4580.  4840.  5101.  5362.  5623.  5884.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0            c1             c2               c3       
    ------------- ------------- ---------------- ----------------
    1.01313704116 0.12703034738 -0.0014290472296 -0.0291056435684
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66738372, -5.43161555), (83.66715612, -5.41436887),
     (83.66692853, -5.39712219), (83.66670096, -5.37987552),
     (83.6664734, -5.36262885), (83.66624585, -5.3453822)]>
Displacements in arcsec: [  2.86249921e-12   5.94760042e-05   1.20903632e-04   1.86116574e-04
   2.56767114e-04   3.34279964e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66738372, -5.43161555), (83.66715612, -5.41436887),
     (83.66692853, -5.39712219), (83.66670096, -5.37987552),
     (83.6664734, -5.36262885), (83.66624585, -5.3453822)]>
Displacements in arcsec: [  2.86249921e-12   5.94760042e-05   1.20903632e-04   1.86116574e-04
   2.56767114e-04   3.34279964e-04]
<Row 9 of table
 values=('2006-02', '303', '304', 2, 270.5, 70.0, 3300, 8.0, 1.8, 'LL2 first epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp303-ardec.fits
~/Work/SPM2005/pp304.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec304-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec304-nii.fits
iarr = [ 270.5  270.5  270.5  270.5  270.5  270.5] jarr = [ -70.   30.  130.  230.  330.  430.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.6663405, -5.43285584), (83.66612466, -5.41556767),
     (83.66590884, -5.3982795), (83.66569303, -5.38099133),
     (83.66547723, -5.36370317), (83.66526145, -5.34641501)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66633443  83.6661186   83.66590277  83.66568696  83.66547117
  83.66525538] [-5.43285063 -5.41556246 -5.39827429 -5.38098612 -5.36369795 -5.3464098 ]
[ 5711.  5714.  5717.  5721.  5724.  5727.] [ 4561.  4822.  5084.  5345.  5607.  5868.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- ---------------- ----------------
    0.984792900478 0.107249493916 0.00200020164547 -0.0508369711799
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66633443, -5.43285063), (83.66611861, -5.41556246),
     (83.66590281, -5.3982743), (83.66568701, -5.38098614),
     (83.66547123, -5.36369799), (83.66525546, -5.34640986)]>
Displacements in arcsec: [  5.72499843e-12   5.69760944e-05   1.17971418e-04   1.86595529e-04
   2.65761292e-04   3.57641334e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66633443, -5.43285063), (83.66611861, -5.41556246),
     (83.66590281, -5.3982743), (83.66568701, -5.38098614),
     (83.66547123, -5.36369799), (83.66525546, -5.34640986)]>
Displacements in arcsec: [  5.72499843e-12   5.69760944e-05   1.17971418e-04   1.86595529e-04
   2.65761292e-04   3.57641334e-04]
<Row 10 of table
 values=('2006-02', '313', '312', 2, 278.0, 70.0, 2600, 6.0, 1.8, 'Image follows spec!')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/Papers/LL-Objects/feb2006/pp313-ardec.fits
~/Work/SPM2005/pp312.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec312-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec312-nii.fits
iarr = [ 278.  278.  278.  278.  278.  278.] jarr = [ -70.   30.  130.  230.  330.  430.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.6577296, -5.43362307), (83.65745278, -5.41632339),
     (83.65717599, -5.3990237), (83.65689921, -5.38172401),
     (83.65662244, -5.36442432), (83.65634569, -5.34712464)]>
Binning along slit: image = 2 spectrum = 2
[ 83.65772353  83.65744672  83.65716992  83.65689314  83.65661637
  83.65633962] [-5.43361786 -5.41631817 -5.39901848 -5.38171879 -5.36441911 -5.34711943]
[ 5840.  5845.  5849.  5853.  5857.  5861.] [ 4549.  4811.  5073.  5334.  5596.  5858.]
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
Wav: [6559.29, 6566.29] Pixel: [  29.48427623  189.47647283]
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
Wav: [6579.95, 6586.95] Pixel: [  21.64518546  181.13602566]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0            c1              c2              c3       
    ------------- -------------- --------------- ----------------
    1.06557214851 0.129561432143 0.0215127765245 -0.0682427409982
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ -4.7997659   29.48427623]
Wav: [6566.29, 6567.79] Pixel: [ 189.47647283  223.76051496]
Background weights: 14848 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.65772353, -5.43361786), (83.65744674, -5.41631817),
     (83.65716996, -5.39901849), (83.6568932, -5.38171882),
     (83.65661645, -5.36441915), (83.65633972, -5.3471195)]>
Displacements in arcsec: [  2.28999937e-11   7.30212201e-05   1.50538729e-04   2.36648963e-04
   3.34741668e-04   4.47426861e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [-12.53142316  21.64518546]
Wav: [6586.95, 6588.45] Pixel: [ 181.13602566  215.31263428]
Background weights: 11264 9728
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.65772353, -5.43361786), (83.65744674, -5.41631817),
     (83.65716996, -5.39901849), (83.6568932, -5.38171882),
     (83.65661645, -5.36441915), (83.65633972, -5.3471195)]>
Displacements in arcsec: [  2.28999937e-11   7.30212201e-05   1.50538729e-04   2.36648963e-04
   3.34741668e-04   4.47426861e-04]
<Row 11 of table
 values=('2007-01b', '2061', '2062-c', 2, 256.0, 65.0, 7000, 20.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2061-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-c.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-nii.fits
iarr = [ 256.  256.  256.  256.  256.  256.] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.67502547, -5.43793388), (83.67443849, -5.42073519),
     (83.67385154, -5.40353649), (83.67326462, -5.38633779),
     (83.67267774, -5.36913909), (83.67209089, -5.35194041)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67501941  83.67443242  83.67384547  83.67325856  83.67267168
  83.67208483] [-5.43792867 -5.42072997 -5.40353127 -5.38633257 -5.36913388 -5.35193519]
[ 5580.  5589.  5598.  5607.  5615.  5624.] [ 4484.  4744.  5004.  5265.  5525.  5785.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- ---------------- ----------------
    0.953961168808 0.106297575171 -0.0168793452001 -0.0171905281979
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67501941, -5.43792867), (83.67443247, -5.42072997),
     (83.67384556, -5.40353128), (83.67325869, -5.38633259),
     (83.67267185, -5.36913391), (83.67208504, -5.35193524)]>
Displacements in arcsec: [  2.00374945e-11   1.52756199e-04   3.06823168e-04   4.63501380e-04
   6.24055573e-04   7.89698030e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67501941, -5.43792867), (83.67443247, -5.42072997),
     (83.67384556, -5.40353128), (83.67325869, -5.38633259),
     (83.67267185, -5.36913391), (83.67208504, -5.35193524)]>
Displacements in arcsec: [  2.00374945e-11   1.52756199e-04   3.06823168e-04   4.63501380e-04
   6.24055573e-04   7.89698030e-04]
<Row 12 of table
 values=('2007-01b', '2037', '2038-2040', 2, 249.0, 60.0, 7000, 16.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2037-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-2040.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-nii.fits
iarr = [ 249.  249.  249.  249.  249.  249.] jarr = [ -60.   40.  140.  240.  340.  440.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.67314611, -5.44332573), (83.67259306, -5.42610746),
     (83.67204003, -5.40888917), (83.67148704, -5.39167089),
     (83.67093408, -5.37445261), (83.67038115, -5.35723434)]>
Binning along slit: image = 2 spectrum = 2
[ 83.67314005  83.67258699  83.67203397  83.67148097  83.67092801
  83.67037508] [-5.44332052 -5.42610224 -5.40888396 -5.39166568 -5.3744474  -5.35722913]
[ 5608.  5617.  5625.  5633.  5642.  5650.] [ 4403.  4663.  4923.  5184.  5444.  5705.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2              c3       
    -------------- -------------- --------------- ----------------
    0.960532974543 0.103584373895 -0.025029137432 -0.0185422424819
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67314005, -5.44332052), (83.67258703, -5.42610224),
     (83.67203405, -5.40888397), (83.6714811, -5.3916657),
     (83.67092818, -5.37444744), (83.67037529, -5.35722919)]>
Displacements in arcsec: [ 0.          0.00014436  0.00029076  0.00044121  0.00059763  0.00076181]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67314005, -5.44332052), (83.67258703, -5.42610224),
     (83.67203405, -5.40888397), (83.6714811, -5.3916657),
     (83.67092818, -5.37444744), (83.67037529, -5.35722919)]>
Displacements in arcsec: [ 0.          0.00014436  0.00029076  0.00044121  0.00059763  0.00076181]
<Row 13 of table
 values=('2007-01b', '2041', '2042-2044', 2, 250.0, 63.0, 7000, 21.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2041-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-2044.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-nii.fits
iarr = [ 250.  250.  250.  250.  250.  250.] jarr = [ -63.   37.  137.  237.  337.  437.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.66822515, -5.44328616), (83.66766792, -5.42606952),
     (83.66711072, -5.40885287), (83.66655355, -5.39163623),
     (83.66599642, -5.37441958), (83.66543931, -5.35720295)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66821909  83.66766186  83.66710466  83.66654749  83.66599035
  83.66543324] [-5.44328095 -5.4260643  -5.40884766 -5.39163101 -5.37441437 -5.35719773]
[ 5682.  5691.  5699.  5708.  5716.  5724.] [ 4403.  4664.  4924.  5184.  5445.  5705.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.969491163475 0.0889742866858 -0.0506027328398 -0.0166836943988
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66821909, -5.44328095), (83.6676619, -5.4260643),
     (83.66710474, -5.40884767), (83.66654761, -5.39163103),
     (83.66599051, -5.37441441), (83.66543345, -5.3571978)]>
Displacements in arcsec: [  2.86249921e-12   1.45424092e-04   2.92848283e-04   4.44240974e-04
   6.01484265e-04   7.66338898e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66821909, -5.44328095), (83.6676619, -5.4260643),
     (83.66710474, -5.40884767), (83.66654761, -5.39163103),
     (83.66599051, -5.37441441), (83.66543345, -5.3571978)]>
Displacements in arcsec: [  2.86249921e-12   1.45424092e-04   2.92848283e-04   4.44240974e-04
   6.01484265e-04   7.66338898e-04]
<Row 14 of table
 values=('2007-01b', '2045', '2046-2048', 2, 251.5, 64.0, 6500, 25.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2045-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-2048.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-nii.fits
iarr = [ 251.5  251.5  251.5  251.5  251.5  251.5] jarr = [ -64.   36.  136.  236.  336.  436.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.66605163, -5.44334042), (83.66553564, -5.42606452),
     (83.66501967, -5.40878861), (83.66450373, -5.3915127),
     (83.66398782, -5.3742368), (83.66347194, -5.3569609)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66604557  83.66552957  83.6650136   83.66449766  83.66398176
  83.66346588] [-5.44333521 -5.4260593  -5.40878339 -5.39150749 -5.37423158 -5.35695568]
[ 5715.  5723.  5731.  5738.  5746.  5754.] [ 4402.  4664.  4925.  5186.  5448.  5709.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.957395189614 0.0983086061814 -0.0348475187008 0.00399224759929
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66604557, -5.44333521), (83.66552961, -5.4260593),
     (83.66501368, -5.4087834), (83.66449778, -5.39150751),
     (83.66398191, -5.37423162), (83.66346607, -5.35695575)]>
Displacements in arcsec: [  2.86249921e-12   1.35169145e-04   2.72523433e-04   4.14203854e-04
   5.62241875e-04   7.18517410e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66604557, -5.44333521), (83.66552961, -5.4260593),
     (83.66501368, -5.4087834), (83.66449778, -5.39150751),
     (83.66398191, -5.37423162), (83.66346607, -5.35695575)]>
Displacements in arcsec: [  2.86249921e-12   1.35169145e-04   2.72523433e-04   4.14203854e-04
   5.62241875e-04   7.18517410e-04]
<Row 15 of table
 values=('2007-01b', '2049', '2050-2052', 2, 253.0, 65.0, 7000, 25.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2049-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-2052.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-nii.fits
iarr = [ 253.  253.  253.  253.  253.  253.] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.66403557, -5.44332049), (83.66356493, -5.42607417),
     (83.66309432, -5.40882783), (83.66262373, -5.3915815),
     (83.66215318, -5.37433518), (83.66168265, -5.35708886)]>
Binning along slit: image = 2 spectrum = 2
[ 83.6640295   83.66355886  83.66308825  83.66261767  83.66214711
  83.66167658] [-5.44331528 -5.42606895 -5.40882262 -5.39157629 -5.37432996 -5.35708364]
[ 5745.  5753.  5760.  5767.  5774.  5781.] [ 4403.  4663.  4924.  5185.  5446.  5707.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.976845101094 0.0895062173778 -0.0510894326991 0.00828141500794
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6640295, -5.44331528), (83.6635589, -5.42606895),
     (83.66308832, -5.40882263), (83.66261777, -5.39157631),
     (83.66214725, -5.37433), (83.66167675, -5.35708371)]>
Displacements in arcsec: [  1.43124961e-11   1.23132135e-04   2.48639987e-04   3.78840094e-04
   5.15907775e-04   6.61828535e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6640295, -5.44331528), (83.6635589, -5.42606895),
     (83.66308832, -5.40882263), (83.66261777, -5.39157631),
     (83.66214725, -5.37433), (83.66167675, -5.35708371)]>
Displacements in arcsec: [  1.43124961e-11   1.23132135e-04   2.48639987e-04   3.78840094e-04
   5.15907775e-04   6.61828535e-04]
<Row 16 of table
 values=('2007-01b', '2053', '2054-2056', 2, 254.5, 68.0, 7000, 25.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2053-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-2056.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-nii.fits
iarr = [ 254.5  254.5  254.5  254.5  254.5  254.5] jarr = [ -68.   32.  132.  232.  332.  432.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.66223974, -5.43809419), (83.66169211, -5.42089816),
     (83.66114451, -5.40370213), (83.66059694, -5.3865061),
     (83.66004941, -5.36931008), (83.6595019, -5.35211406)]>
Binning along slit: image = 2 spectrum = 2
[ 83.66223368  83.66168605  83.66113845  83.66059088  83.66004334
  83.65949583] [-5.43808897 -5.42089295 -5.40369692 -5.38650089 -5.36930487 -5.35210885]
[ 5772.  5781.  5789.  5797.  5806.  5814.] [ 4482.  4742.  5002.  5262.  5522.  5782.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2                c3        
    -------------- --------------- ---------------- ------------------
    0.966654340462 0.0576311710693 -0.0431747629687 -0.000564781345439
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66223368, -5.43808897), (83.66168609, -5.42089295),
     (83.66113853, -5.40369692), (83.660591, -5.38650091),
     (83.6600435, -5.3693049), (83.65949603, -5.3521089)]>
Displacements in arcsec: [  2.28999937e-11   1.42513177e-04   2.86405299e-04   4.33042403e-04
   5.83747687e-04   7.39783015e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.66223368, -5.43808897), (83.66168609, -5.42089295),
     (83.66113853, -5.40369692), (83.660591, -5.38650091),
     (83.6600435, -5.3693049), (83.65949603, -5.3521089)]>
Displacements in arcsec: [  2.28999937e-11   1.42513177e-04   2.86405299e-04   4.33042403e-04
   5.83747687e-04   7.39783015e-04]
<Row 17 of table
 values=('2007-01b', '2057', '2058-2060', 2, 254.5, 66.0, 7000, 25.0, 1.8, 'LL2 second epoch')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spm2057-ardec.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-2060.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-nii.fits
iarr = [ 254.5  254.5  254.5  254.5  254.5  254.5] jarr = [ -66.   34.  134.  234.  334.  434.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.65952076, -5.43815979), (83.65901719, -5.42097433),
     (83.65851365, -5.40378887), (83.65801014, -5.38660341),
     (83.65750666, -5.36941796), (83.6570032, -5.35223251)]>
Binning along slit: image = 2 spectrum = 2
[ 83.6595147   83.65901113  83.65850759  83.65800407  83.65750059
  83.65699713] [-5.43815458 -5.42096912 -5.40378366 -5.3865982  -5.36941274 -5.3522273 ]
[ 5813.  5821.  5829.  5836.  5844.  5852.] [ 4481.  4741.  5001.  5260.  5520.  5780.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3      
    -------------- --------------- ---------------- ---------------
    0.970367144459 0.0932265913695 -0.0356504240689 0.0321892312533
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6595147, -5.43815458), (83.65901117, -5.42096912),
     (83.65850766, -5.40378367), (83.65800418, -5.38659822),
     (83.65750074, -5.36941278), (83.65699732, -5.35222735)]>
Displacements in arcsec: [  2.28999937e-11   1.30996400e-04   2.63493024e-04   3.98971677e-04
   5.38859965e-04   6.84508252e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6595147, -5.43815458), (83.65901117, -5.42096912),
     (83.65850766, -5.40378367), (83.65800418, -5.38659822),
     (83.65750074, -5.36941278), (83.65699732, -5.35222735)]>
Displacements in arcsec: [  2.28999937e-11   1.30996400e-04   2.63493024e-04   3.98971677e-04
   5.38859965e-04   6.84508252e-04]
<Row 18 of table
 values=('2007-01', '054', '055', 2, 262.5, 68.0, 5000, 10.0, 1.9, 'LL1 extreme N')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/spm054-ardec.fits
~/Work/SPM2007/Reduced/spec055-transf.fits
~/Work/SPM2007/Reduced/spec055-ha-fix.fits
~/Work/SPM2007/Reduced/spec055-nii-fix.fits
iarr = [ 262.5  262.5  262.5  262.5  262.5  262.5] jarr = [ -68.   32.  132.  232.  332.  432.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.77285169, -5.48878211), (83.77278744, -5.47148237),
     (83.7727232, -5.45418262), (83.77265896, -5.43688287),
     (83.77259473, -5.41958312), (83.7725305, -5.40228336)]>
Binning along slit: image = 2 spectrum = 2
[ 83.77284563  83.77278138  83.77271714  83.7726529   83.77258866
  83.77252443] [-5.48877689 -5.47147715 -5.4541774  -5.43687765 -5.41957789 -5.40227814]
[ 4107.  4108.  4109.  4110.  4111.  4112.] [ 3715.  3977.  4238.  4500.  4762.  5023.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.42959874  203.92046602]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.950780557873 -0.0214243017748 -0.0343672699169 0.0168974892052
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.77284563, -5.48877689), (83.77278139, -5.47147716),
     (83.77271715, -5.45417743), (83.77265291, -5.4368777),
     (83.77258868, -5.41957799), (83.77252445, -5.40227829)]>
Displacements in arcsec: [  2.86249921e-12   2.67248915e-05   8.97388558e-05   1.94055598e-04
   3.40045727e-04   5.27768258e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.77284563, -5.48877689), (83.77278139, -5.47147716),
     (83.77271715, -5.45417743), (83.77265291, -5.4368777),
     (83.77258868, -5.41957799), (83.77252445, -5.40227829)]>
Displacements in arcsec: [  2.86249921e-12   2.67248915e-05   8.97388558e-05   1.94055598e-04
   3.40045727e-04   5.27768258e-04]
<Row 19 of table
 values=('2007-01', '067', '068', 2, 273.0, 72.0, 5000, 10.0, 1.9, 'LL1 extreme N')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/spm067-ardec.fits
~/Work/SPM2007/Reduced/spec068-transf.fits
~/Work/SPM2007/Reduced/spec068-ha-fix.fits
~/Work/SPM2007/Reduced/spec068-nii-fix.fits
iarr = [ 273.  273.  273.  273.  273.  273.] jarr = [ -72.   28.  128.  228.  328.  428.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.77130626, -5.48904065), (83.77117784, -5.47173182),
     (83.77104942, -5.45442298), (83.77092101, -5.43711413),
     (83.77079261, -5.41980528), (83.77066422, -5.40249643)]>
Binning along slit: image = 2 spectrum = 2
[ 83.7713002   83.77117177  83.77104336  83.77091495  83.77078655
  83.77065815] [-5.48903543 -5.4717266  -5.45441776 -5.43710891 -5.41980006 -5.40249121]
[ 4130.  4132.  4134.  4136.  4138.  4140.] [ 3711.  3973.  4235.  4497.  4758.  5020.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.42959874  203.92046602]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.935726292278 -0.0513283678189 -0.0289173295904 0.0316460770054
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7713002, -5.48903543), (83.77117178, -5.4717266),
     (83.77104338, -5.45441778), (83.77091498, -5.43710896),
     (83.77078659, -5.41980015), (83.7706582, -5.40249136)]>
Displacements in arcsec: [  1.71749953e-11   3.98560611e-05   1.08212941e-04   2.15607029e-04
   3.64449079e-04   5.55346024e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7713002, -5.48903543), (83.77117178, -5.4717266),
     (83.77104338, -5.45441778), (83.77091498, -5.43710896),
     (83.77078659, -5.41980015), (83.7706582, -5.40249136)]>
Displacements in arcsec: [  1.71749953e-11   3.98560611e-05   1.08212941e-04   2.15607029e-04
   3.64449079e-04   5.55346024e-04]
<Row 20 of table
 values=('2007-01', '072', '073', 2, 277.5, 74.0, 5200, 10.0, 1.8, 'LL1 extreme N')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Work/SPM2007/Reduced/spm072-ardec.fits
~/Work/SPM2007/Reduced/spec073-transf.fits
~/Work/SPM2007/Reduced/spec073-ha-fix.fits
~/Work/SPM2007/Reduced/spec073-nii-fix.fits
iarr = [ 277.5  277.5  277.5  277.5  277.5  277.5] jarr = [ -74.   26.  126.  226.  326.  426.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.77054404, -5.48899134), (83.77047005, -5.47172396),
     (83.77039607, -5.45445657), (83.77032209, -5.43718918),
     (83.77024812, -5.41992178), (83.77017415, -5.40265439)]>
Binning along slit: image = 2 spectrum = 2
[ 83.77053797  83.77046399  83.77039001  83.77031603  83.77024205
  83.77016808] [-5.48898612 -5.47171874 -5.45445135 -5.43718396 -5.41991656 -5.40264917]
[ 4142.  4143.  4144.  4145.  4146.  4147.] [ 3712.  3973.  4234.  4495.  4757.  5018.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.42959874  203.92046602]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1             c2              c3      
    -------------- --------------- -------------- ---------------
    0.932298711843 0.0493572124528 -0.04676320083 0.0192191992977
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.77053797, -5.48898612), (83.77046399, -5.47171874),
     (83.77039002, -5.45445137), (83.77031604, -5.43718401),
     (83.77024208, -5.41991665), (83.77016811, -5.40264931)]>
Displacements in arcsec: [  1.14499969e-11   2.76265823e-05   8.78862108e-05   1.86930886e-04
   3.25403307e-04   5.03417020e-04]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298433  44.42959874]
Wav: [6586.95, 6588.45] Pixel: [ 203.92046602  238.09708044]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.77053797, -5.48898612), (83.77046399, -5.47171874),
     (83.77039002, -5.45445137), (83.77031604, -5.43718401),
     (83.77024208, -5.41991665), (83.77016811, -5.40264931)]>
Displacements in arcsec: [  1.14499969e-11   2.76265823e-05   8.78862108e-05   1.86930886e-04
   3.25403307e-04   5.03417020e-04]
<Row 21 of table
 values=('2010-01', '078', '079-080', 2, 248.0, 62.0, 5500, 2.0, 1.8, 'Vertical W of LL2')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm078-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm079-080h.fits
~/Dropbox/SPMJAN10/reducciones/spec079-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec079-nii.fits
iarr = [ 248.  248.  248.  248.  248.  248.] jarr = [ -62.   38.  138.  238.  338.  438.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.63656721, -5.436557), (83.63752307, -5.41930392),
     (83.63847887, -5.40205084), (83.63943461, -5.38479775),
     (83.64039031, -5.36754467), (83.64134595, -5.35029159)]>
Binning along slit: image = 2 spectrum = 2
[ 83.63656115  83.637517    83.6384728   83.63942855  83.64038424
  83.64133988] [-5.43655178 -5.41929871 -5.40204562 -5.38479254 -5.36753945 -5.35028637]
[ 6159.  6145.  6130.  6116.  6102.  6087.] [ 4505.  4766.  5027.  5288.  5549.  5810.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.962208536256 0.0807176824379 -0.0399917631984 -0.0294928247661
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.63656115, -5.43655178), (83.63751693, -5.41929871),
     (83.63847266, -5.40204563), (83.63942834, -5.38479256),
     (83.64038396, -5.3675395), (83.64133953, -5.35028644)]>
Displacements in arcsec: [  5.72499843e-12   2.49695832e-04   5.01476779e-04   7.57413498e-04
   1.01952032e-03   1.28973083e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.63656115, -5.43655178), (83.63751693, -5.41929871),
     (83.63847266, -5.40204563), (83.63942834, -5.38479256),
     (83.64038396, -5.3675395), (83.64133953, -5.35028644)]>
Displacements in arcsec: [  5.72499843e-12   2.49695832e-04   5.01476779e-04   7.57413498e-04
   1.01952032e-03   1.28973083e-03]
<Row 22 of table
 values=('2010-01', '202', '203-204', 2, 233.6, 52.5, 6500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm202-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm203-204h.fits
~/Dropbox/SPMJAN10/reducciones/spec203-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec203-nii.fits
iarr = [ 233.6  233.6  233.6  233.6  233.6  233.6] jarr = [ -52.5   47.5  147.5  247.5  347.5  447.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61784607, -5.47002199), (83.61880251, -5.45269796),
     (83.6197589, -5.43537392), (83.62071524, -5.41804987),
     (83.62167152, -5.40072582), (83.62262774, -5.38340178)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61784001  83.61879645  83.61975284  83.62070917  83.62166545
  83.62262168] [-5.47001678 -5.45269275 -5.4353687  -5.41804466 -5.40072061 -5.38339657]
[ 6441.  6426.  6412.  6398.  6383.  6369.] [ 3999.  4261.  4523.  4785.  5047.  5309.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    -------------- -------------- ---------------- ---------------
    0.941634345096 0.104908918127 -0.0238186239514 0.0126187682739
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61784001, -5.47001678), (83.61879638, -5.45269275),
     (83.6197527, -5.43536871), (83.62070896, -5.41804468),
     (83.62166517, -5.40072066), (83.62262132, -5.38339665)]>
Displacements in arcsec: [  2.28999937e-11   2.52517026e-04   5.07747230e-04   7.68373644e-04
   1.03698609e-03   1.31604282e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61784001, -5.47001678), (83.61879638, -5.45269275),
     (83.6197527, -5.43536871), (83.62070896, -5.41804468),
     (83.62166517, -5.40072066), (83.62262132, -5.38339665)]>
Displacements in arcsec: [  2.28999937e-11   2.52517026e-04   5.07747230e-04   7.68373644e-04
   1.03698609e-03   1.31604282e-03]
<Row 23 of table
 values=('2010-01', '124', '125-127', 2, 235.5, 54.5, 3400, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm124-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm125-127h.fits
~/Dropbox/SPMJAN10/reducciones/spec125-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec125-nii.fits
iarr = [ 235.5  235.5  235.5  235.5  235.5  235.5] jarr = [ -54.5   45.5  145.5  245.5  345.5  445.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61529723, -5.47174328), (83.61632517, -5.45448975),
     (83.61735305, -5.43723621), (83.61838087, -5.41998267),
     (83.61940863, -5.40272913), (83.62043633, -5.38547558)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61529117  83.61631911  83.61734698  83.6183748   83.61940256
  83.62043026] [-5.47173806 -5.45448454 -5.437231   -5.41997746 -5.40272391 -5.38547037]
[ 6479.  6464.  6448.  6433.  6418.  6402.] [ 3973.  4234.  4494.  4755.  5016.  5277.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.990808847308 -0.0480488429998 -0.0665176978421 0.0470944793526
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61529117, -5.47173806), (83.61631903, -5.45448454),
     (83.61734683, -5.43723101), (83.61837457, -5.41997749),
     (83.61940226, -5.40272397), (83.62042988, -5.38547047)]>
Displacements in arcsec: [  1.14499969e-11   2.70530661e-04   5.44478294e-04   8.25211694e-04
   1.11596270e-03   1.41977184e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61529117, -5.47173806), (83.61631903, -5.45448454),
     (83.61734683, -5.43723101), (83.61837457, -5.41997749),
     (83.61940226, -5.40272397), (83.62042988, -5.38547047)]>
Displacements in arcsec: [  1.14499969e-11   2.70530661e-04   5.44478294e-04   8.25211694e-04
   1.11596270e-03   1.41977184e-03]
<Row 24 of table
 values=('2010-01', '206', '207-208', 2, 234.6, 54.0, 7700, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm206-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm207-208h.fits
~/Dropbox/SPMJAN10/reducciones/spec207-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec207-nii.fits
iarr = [ 234.6  234.6  234.6  234.6  234.6  234.6] jarr = [ -54.   46.  146.  246.  346.  446.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61406519, -5.46986179), (83.61506998, -5.45259233),
     (83.61607472, -5.43532287), (83.61707939, -5.41805339),
     (83.61808401, -5.40078392), (83.61908857, -5.38351444)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61405913  83.61506392  83.61606865  83.61707333  83.61807795
  83.61908251] [-5.46985658 -5.45258712 -5.43531765 -5.41804818 -5.4007787  -5.38350923]
[ 6498.  6483.  6468.  6453.  6437.  6422.] [ 4001.  4262.  4523.  4785.  5046.  5307.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3       
    -------------- -------------- ---------------- ----------------
    0.891506982508 0.105836861703 -0.0296410128879 -0.0395735377681
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61405913, -5.46985658), (83.61506385, -5.45258712),
     (83.61606851, -5.43531766), (83.61707311, -5.41804821),
     (83.61807765, -5.40077876), (83.61908213, -5.38350933)]>
Displacements in arcsec: [  5.72499843e-12   2.64564329e-04   5.32440353e-04   8.06893662e-04
   1.09105800e-03   1.38788356e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61405913, -5.46985658), (83.61506385, -5.45258712),
     (83.61606851, -5.43531766), (83.61707311, -5.41804821),
     (83.61807765, -5.40077876), (83.61908213, -5.38350933)]>
Displacements in arcsec: [  5.72499843e-12   2.64564329e-04   5.32440353e-04   8.06893662e-04
   1.09105800e-03   1.38788356e-03]
<Row 25 of table
 values=('2010-01', '128', '129-130', 2, 237.5, 57.0, 3500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm128-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm129-130h.fits
~/Dropbox/SPMJAN10/reducciones/spec129-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec129-nii.fits
iarr = [ 237.5  237.5  237.5  237.5  237.5  237.5] jarr = [ -57.   43.  143.  243.  343.  443.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.6127125, -5.47202677), (83.61372484, -5.45474627),
     (83.61473713, -5.43746576), (83.61574935, -5.42018524),
     (83.61676152, -5.40290473), (83.61777363, -5.38562421)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61270644  83.61371878  83.61473106  83.61574329  83.61675546
  83.61776757] [-5.47202155 -5.45474105 -5.43746054 -5.42018003 -5.40289951 -5.385619  ]
[ 6518.  6503.  6488.  6473.  6457.  6442.] [ 3968.  4230.  4491.  4752.  5014.  5275.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.877596740281 -0.0268985433478 -0.0845136893671 0.0678641300318
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61270644, -5.47202155), (83.61371871, -5.45474105),
     (83.61473092, -5.43746056), (83.61574306, -5.42018006),
     (83.61675516, -5.40289958), (83.61776719, -5.3856191)]>
Displacements in arcsec: [  2.57624929e-11   2.66873446e-04   5.37325459e-04   8.14879510e-04
   1.10290734e-03   1.40457020e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61270644, -5.47202155), (83.61371871, -5.45474105),
     (83.61473092, -5.43746056), (83.61574306, -5.42018006),
     (83.61675516, -5.40289958), (83.61776719, -5.3856191)]>
Displacements in arcsec: [  2.57624929e-11   2.66873446e-04   5.37325459e-04   8.14879510e-04
   1.10290734e-03   1.40457020e-03]
<Row 26 of table
 values=('2010-01', '133', '134-135', 2, 239.4, 58.0, 5500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm133-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm134-135h.fits
~/Dropbox/SPMJAN10/reducciones/spec134-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec134-nii.fits
iarr = [ 239.4  239.4  239.4  239.4  239.4  239.4] jarr = [ -58.   42.  142.  242.  342.  442.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61300795, -5.46641905), (83.61400089, -5.44913861),
     (83.61499378, -5.43185816), (83.61598661, -5.4145777),
     (83.61697938, -5.39729724), (83.61797209, -5.38001678)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61300189  83.61399483  83.61498771  83.61598054  83.61697331
  83.61796603] [-5.46641384 -5.4491334  -5.43185295 -5.41457249 -5.39729203 -5.38001157]
[ 6514.  6499.  6484.  6469.  6454.  6439.] [ 4053.  4314.  4576.  4837.  5099.  5360.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.950627011665 0.0609712010032 -0.0444860390564 -0.0224491262254
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61300189, -5.46641384), (83.61399476, -5.4491334),
     (83.61498757, -5.43185296), (83.61598032, -5.41457252),
     (83.61697302, -5.39729209), (83.61796565, -5.38001168)]>
Displacements in arcsec: [  1.71749953e-11   2.61545221e-04   5.27037218e-04   8.00353041e-04
   1.08518300e-03   1.38495958e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61300189, -5.46641384), (83.61399476, -5.4491334),
     (83.61498757, -5.43185296), (83.61598032, -5.41457252),
     (83.61697302, -5.39729209), (83.61796565, -5.38001168)]>
Displacements in arcsec: [  1.71749953e-11   2.61545221e-04   5.27037218e-04   8.00353041e-04
   1.08518300e-03   1.38495958e-03]
<Row 27 of table
 values=('2010-01', '210', '211-212', 2, 236.4, 55.0, 7000, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm210-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm211-212h.fits
~/Dropbox/SPMJAN10/reducciones/spec211-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec211-nii.fits
iarr = [ 236.4  236.4  236.4  236.4  236.4  236.4] jarr = [ -55.   45.  145.  245.  345.  445.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61147366, -5.46987356), (83.61247377, -5.4525994),
     (83.61347382, -5.43532523), (83.61447382, -5.41805105),
     (83.61547375, -5.40077688), (83.61647363, -5.38350271)]>
Binning along slit: image = 2 spectrum = 2
[ 83.6114676   83.61246771  83.61346776  83.61446775  83.61546769
  83.61646757] [-5.46986834 -5.45259418 -5.43532001 -5.41804584 -5.40077167 -5.38349749]
[ 6537.  6522.  6507.  6492.  6477.  6462.] [ 4001.  4262.  4523.  4785.  5046.  5307.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
         c0            c1              c2               c3      
    ------------ -------------- ---------------- ---------------
    1.0352214659 0.185413814537 0.00750572627067 -0.030354390992
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6114676, -5.46986834), (83.61246764, -5.45259418),
     (83.61346761, -5.43532002), (83.61446753, -5.41804587),
     (83.61546739, -5.40077172), (83.61646719, -5.38349759)]>
Displacements in arcsec: [  5.72499843e-12   2.63342699e-04   5.29644442e-04   8.01829102e-04
   1.08271456e-03   1.37496918e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6114676, -5.46986834), (83.61246764, -5.45259418),
     (83.61346761, -5.43532002), (83.61446753, -5.41804587),
     (83.61546739, -5.40077172), (83.61646719, -5.38349759)]>
Displacements in arcsec: [  5.72499843e-12   2.63342699e-04   5.29644442e-04   8.01829102e-04
   1.08271456e-03   1.37496918e-03]
<Row 28 of table
 values=('2010-01', '137', '138-139', 2, 241.3, 60.0, 3600, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm137-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm138-139h.fits
~/Dropbox/SPMJAN10/reducciones/spec138-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec138-nii.fits
iarr = [ 241.3  241.3  241.3  241.3  241.3  241.3] jarr = [ -60.   40.  140.  240.  340.  440.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61040503, -5.46643003), (83.61140154, -5.44914799),
     (83.612398, -5.43186594), (83.61339439, -5.41458388),
     (83.61439074, -5.39730182), (83.61538702, -5.38001976)]>
Binning along slit: image = 2 spectrum = 2
[ 83.61039897  83.61139548  83.61239193  83.61338833  83.61438467
  83.61538095] [-5.46642482 -5.44914278 -5.43186073 -5.41457867 -5.39729661 -5.38001455]
[ 6553.  6538.  6523.  6508.  6493.  6478.] [ 4053.  4314.  4576.  4837.  5099.  5360.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3      
    -------------- --------------- ---------------- ---------------
    0.984237921825 0.0612575550185 -0.0328943684461 0.0277863586968
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61039897, -5.46642482), (83.6113954, -5.44914278),
     (83.61239178, -5.43186074), (83.61338811, -5.4145787),
     (83.61438437, -5.39729667), (83.61538058, -5.38001465)]>
Displacements in arcsec: [  2.86249921e-12   2.62502217e-04   5.28894632e-04   8.02998876e-04
   1.08845524e-03   1.38865487e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61039897, -5.46642482), (83.6113954, -5.44914278),
     (83.61239178, -5.43186074), (83.61338811, -5.4145787),
     (83.61438437, -5.39729667), (83.61538058, -5.38001465)]>
Displacements in arcsec: [  2.86249921e-12   2.62502217e-04   5.28894632e-04   8.02998876e-04
   1.08845524e-03   1.38865487e-03]
<Row 29 of table
 values=('2010-01', '214', '215-216', 2, 238.4, 60.0, 7500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm214-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm215-216h.fits
~/Dropbox/SPMJAN10/reducciones/spec215-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec215-nii.fits
iarr = [ 238.4  238.4  238.4  238.4  238.4  238.4] jarr = [ -60.   40.  140.  240.  340.  440.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60908238, -5.4706217), (83.61003921, -5.45329387),
     (83.61099598, -5.43596603), (83.61195269, -5.41863819),
     (83.61290935, -5.40131035), (83.61386596, -5.3839825)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60907632  83.61003315  83.61098992  83.61194663  83.61290329
  83.61385989] [-5.47061649 -5.45328866 -5.43596082 -5.41863298 -5.40130513 -5.38397729]
[ 6573.  6558.  6544.  6530.  6515.  6501.] [ 3989.  4252.  4514.  4776.  5038.  5300.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.945355907357 0.0814244421562 -0.0266554133037 -0.0657238722603
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60907632, -5.47061649), (83.61003308, -5.45328866),
     (83.61098977, -5.43596083), (83.61194642, -5.418633),
     (83.612903, -5.40130519), (83.61385954, -5.38397738)]>
Displacements in arcsec: [  2.57624929e-11   2.52742966e-04   5.08457415e-04   7.70076814e-04
   1.04042315e-03   1.32216271e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60907632, -5.47061649), (83.61003308, -5.45328866),
     (83.61098977, -5.43596083), (83.61194642, -5.418633),
     (83.612903, -5.40130519), (83.61385954, -5.38397738)]>
Displacements in arcsec: [  2.57624929e-11   2.52742966e-04   5.08457415e-04   7.70076814e-04
   1.04042315e-03   1.32216271e-03]
<Row 30 of table
 values=('2010-01', '145', '146-147', 2, 244.3, 65.0, 1000, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm145-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm146-147h.fits
~/Dropbox/SPMJAN10/reducciones/spec146-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec146-nii.fits
iarr = [ 244.3  244.3  244.3  244.3  244.3  244.3] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60754605, -5.46607162), (83.6085671, -5.44882985),
     (83.6095881, -5.43158808), (83.61060904, -5.4143463),
     (83.61162992, -5.39710452), (83.61265074, -5.37986273)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60753999  83.60856104  83.60958204  83.61060298  83.61162386
  83.61264468] [-5.46606641 -5.44882464 -5.43158287 -5.41434109 -5.3970993  -5.37985752]
[ 6596.  6581.  6565.  6550.  6535.  6519.] [ 4058.  4319.  4580.  4841.  5102.  5362.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3       
    -------------- ---------------- ---------------- ----------------
    0.950736004549 -0.0535631541194 -0.0244428847836 -0.0188681086146
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60753999, -5.46606641), (83.60856097, -5.44882464),
     (83.60958189, -5.43158288), (83.61060275, -5.41434112),
     (83.61162355, -5.39709938), (83.6126443, -5.37985764)]>
Displacements in arcsec: [  2.86249921e-12   2.68432789e-04   5.41337232e-04   8.23092569e-04
   1.11784621e-03   1.42942879e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60753999, -5.46606641), (83.60856097, -5.44882464),
     (83.60958189, -5.43158288), (83.61060275, -5.41434112),
     (83.61162355, -5.39709938), (83.6126443, -5.37985764)]>
Displacements in arcsec: [  2.86249921e-12   2.68432789e-04   5.41337232e-04   8.23092569e-04
   1.11784621e-03   1.42942879e-03]
<Row 31 of table
 values=('2010-01', '248', '249-250', 2, 254.9, 68.0, 3300, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm248-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm249-250h.fits
~/Dropbox/SPMJAN10/reducciones/spec249-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec249-nii.fits
iarr = [ 254.9  254.9  254.9  254.9  254.9  254.9] jarr = [ -68.   32.  132.  232.  332.  432.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60679942, -5.47089817), (83.60777996, -5.45361665),
     (83.60876044, -5.43633511), (83.60974087, -5.41905358),
     (83.61072125, -5.40177204), (83.61170156, -5.3844905)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60679336  83.6077739   83.60875438  83.60973481  83.61071518
  83.6116955 ] [-5.47089296 -5.45361144 -5.4363299  -5.41904836 -5.40176683 -5.38448529]
[ 6607.  6592.  6578.  6563.  6548.  6534.] [ 3985.  4247.  4508.  4770.  5031.  5292.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0               c1               c2               c3       
    -------------- ----------------- ---------------- ----------------
    0.919327217771 -0.00513733541169 -0.0204660921523 -0.0714882165109
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60679336, -5.47089296), (83.60777383, -5.45361144),
     (83.60875424, -5.43632991), (83.60973459, -5.41904839),
     (83.61071489, -5.40176688), (83.61169513, -5.38448538)]>
Displacements in arcsec: [  2.00374945e-11   2.58377250e-04   5.19933314e-04   7.87803298e-04
   1.06499879e-03   1.35435720e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60679336, -5.47089296), (83.60777383, -5.45361144),
     (83.60875424, -5.43632991), (83.60973459, -5.41904839),
     (83.61071489, -5.40176688), (83.61169513, -5.38448538)]>
Displacements in arcsec: [  2.00374945e-11   2.58377250e-04   5.19933314e-04   7.87803298e-04
   1.06499879e-03   1.35435720e-03]
<Row 32 of table
 values=('2010-01', '219', '220-221', 2, 240.0, 57.5, 7700, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm219-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm220-221h.fits
~/Dropbox/SPMJAN10/reducciones/spec220-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec220-nii.fits
iarr = [ 240.  240.  240.  240.  240.  240.] jarr = [ -57.5   42.5  142.5  242.5  342.5  442.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.605688, -5.47027797), (83.60670247, -5.45300916),
     (83.60771688, -5.43574033), (83.60873124, -5.41847151),
     (83.60974554, -5.40120268), (83.61075977, -5.38393385)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60568194  83.60669641  83.60771082  83.60872517  83.60973947
  83.61075371] [-5.47027276 -5.45300394 -5.43573512 -5.41846629 -5.40119747 -5.38392864]
[ 6624.  6609.  6593.  6578.  6563.  6548.] [ 3995.  4256.  4517.  4778.  5040.  5301.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    -------------- -------------- ---------------- ---------------
    0.940350987447 0.113970138081 -0.0709785874232 0.0232200454661
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60568194, -5.47027276), (83.60669633, -5.45300394),
     (83.60771067, -5.43573513), (83.60872495, -5.41846632),
     (83.60973917, -5.40119752), (83.61075333, -5.38392873)]>
Displacements in arcsec: [  2.28999937e-11   2.67033546e-04   5.36815228e-04   8.12064332e-04
   1.09540975e-03   1.38935175e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60568194, -5.47027276), (83.60669633, -5.45300394),
     (83.60771067, -5.43573513), (83.60872495, -5.41846632),
     (83.60973917, -5.40119752), (83.61075333, -5.38392873)]>
Displacements in arcsec: [  2.28999937e-11   2.67033546e-04   5.36815228e-04   8.12064332e-04
   1.09540975e-03   1.38935175e-03]
<Row 33 of table
 values=('2010-01', '157', '158-159', 2, 252.2, 65.0, 1600, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm157-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm158-159h.fits
~/Dropbox/SPMJAN10/reducciones/spec158-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec158-nii.fits
iarr = [ 252.2  252.2  252.2  252.2  252.2  252.2] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60468528, -5.46689807), (83.60570962, -5.44967572),
     (83.60673389, -5.43245336), (83.60775811, -5.41523099),
     (83.60878228, -5.39800862), (83.60980638, -5.38078625)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60467922  83.60570355  83.60672783  83.60775205  83.60877621
  83.60980031] [-5.46689286 -5.44967051 -5.43244815 -5.41522578 -5.39800341 -5.38078103]
[ 6639.  6624.  6608.  6593.  6578.  6562.] [ 4046.  4306.  4567.  4827.  5088.  5348.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0               c1               c2               c3      
    -------------- ----------------- ---------------- ---------------
    0.929830008835 0.000583991448376 -0.0364028520259 -0.046332299623
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60467922, -5.46689286), (83.60570348, -5.44967051),
     (83.60672768, -5.43244816), (83.60775182, -5.41522582),
     (83.60877591, -5.39800348), (83.60979993, -5.38078115)]>
Displacements in arcsec: [  2.00374945e-11   2.69057842e-04   5.42712501e-04   8.25462335e-04
   1.12156172e-03   1.43493233e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60467922, -5.46689286), (83.60570348, -5.44967051),
     (83.60672768, -5.43244816), (83.60775182, -5.41522582),
     (83.60877591, -5.39800348), (83.60979993, -5.38078115)]>
Displacements in arcsec: [  2.00374945e-11   2.69057842e-04   5.42712501e-04   8.25462335e-04
   1.12156172e-03   1.43493233e-03]
<Row 34 of table
 values=('2010-01', '236', '237-238', 2, 247.0, 63.0, 7200, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm236-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm237-238h.fits
~/Dropbox/SPMJAN10/reducciones/spec237-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec237-nii.fits
iarr = [ 247.  247.  247.  247.  247.  247.] jarr = [ -63.   37.  137.  237.  337.  437.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60419996, -5.47048556), (83.60518167, -5.45319777),
     (83.60616333, -5.43590996), (83.60714493, -5.41862216),
     (83.60812647, -5.40133435), (83.60910796, -5.38404654)]>
Binning along slit: image = 2 spectrum = 2
[ 83.6041939   83.60517561  83.60615726  83.60713886  83.60812041
  83.60910189] [-5.47048035 -5.45319256 -5.43590475 -5.41861695 -5.40132914 -5.38404133]
[ 6646.  6632.  6617.  6602.  6587.  6573.] [ 3992.  4253.  4515.  4776.  5038.  5299.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1             c2               c3      
    -------------- ------------- ---------------- ---------------
    0.957434035099 0.10392363196 -0.0610306523461 0.0252423316486
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6041939, -5.47048035), (83.60517554, -5.45319256),
     (83.60615712, -5.43590476), (83.60713865, -5.41861697),
     (83.60812011, -5.40132919), (83.60910153, -5.38404142)]>
Displacements in arcsec: [  1.43124961e-11   2.58709704e-04   5.20298772e-04   7.87613165e-04
   1.06339631e-03   1.35024758e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6041939, -5.47048035), (83.60517554, -5.45319256),
     (83.60615712, -5.43590476), (83.60713865, -5.41861697),
     (83.60812011, -5.40132919), (83.60910153, -5.38404142)]>
Displacements in arcsec: [  1.43124961e-11   2.58709704e-04   5.20298772e-04   7.87613165e-04
   1.06339631e-03   1.35024758e-03]
<Row 35 of table
 values=('2010-01', '240', '241-242', 2, 249.5, 65.0, 5500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm240-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm241-242h.fits
~/Dropbox/SPMJAN10/reducciones/spec241-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec241-nii.fits
iarr = [ 249.5  249.5  249.5  249.5  249.5  249.5] jarr = [ -65.   35.  135.  235.  335.  435.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60239606, -5.47068361), (83.60338903, -5.45339048),
     (83.60438195, -5.43609734), (83.60537481, -5.41880419),
     (83.60636761, -5.40151105), (83.60736036, -5.3842179)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60239     83.60338297  83.60437589  83.60536875  83.60636155
  83.60735429] [-5.4706784  -5.45338526 -5.43609212 -5.41879898 -5.40150583 -5.38421269]
[ 6673.  6659.  6644.  6629.  6614.  6599.] [ 3989.  4250.  4512.  4773.  5035.  5296.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2                c3       
    -------------- --------------- ---------------- -----------------
    0.925101856726 0.0776052558352 -0.0364371466346 -0.00720346675347
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60239, -5.4706784), (83.6033829, -5.45338527),
     (83.60437574, -5.43609213), (83.60536852, -5.41879901),
     (83.60636125, -5.40150589), (83.60735392, -5.38421279)]>
Displacements in arcsec: [  2.86249921e-12   2.61816051e-04   5.26782770e-04   7.98009723e-04
   1.07848587e-03   1.37103122e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60239, -5.4706784), (83.6033829, -5.45338527),
     (83.60437574, -5.43609213), (83.60536852, -5.41879901),
     (83.60636125, -5.40150589), (83.60735392, -5.38421279)]>
Displacements in arcsec: [  2.86249921e-12   2.61816051e-04   5.26782770e-04   7.98009723e-04
   1.07848587e-03   1.37103122e-03]
<Row 36 of table
 values=('2010-01', '244', '245-246', 2, 251.6, 64.0, 4500, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm244-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm245-246h.fits
~/Dropbox/SPMJAN10/reducciones/spec245-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec245-nii.fits
iarr = [ 251.6  251.6  251.6  251.6  251.6  251.6] jarr = [ -64.   36.  136.  236.  336.  436.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.60064615, -5.47055353), (83.60162455, -5.45322291),
     (83.60260289, -5.43589229), (83.60358118, -5.41856166),
     (83.60455941, -5.40123102), (83.60553759, -5.38390039)]>
Binning along slit: image = 2 spectrum = 2
[ 83.60064008  83.60161848  83.60259683  83.60357512  83.60455335
  83.60553152] [-5.47054832 -5.4532177  -5.43588707 -5.41855644 -5.40122581 -5.38389518]
[ 6700.  6685.  6670.  6656.  6641.  6626.] [ 3990.  4253.  4515.  4777.  5039.  5301.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.929750752195 0.0664161196007 -0.0178580609628 -0.0240467745689
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60064008, -5.47054832), (83.60161841, -5.4532177),
     (83.60259668, -5.43588708), (83.6035749, -5.41855647),
     (83.60455306, -5.40122587), (83.60553116, -5.38389528)]>
Displacements in arcsec: [  1.71749953e-11   2.58526392e-04   5.20265105e-04   7.88384299e-04
   1.06592559e-03   1.35575307e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.60064008, -5.47054832), (83.60161841, -5.4532177),
     (83.60259668, -5.43588708), (83.6035749, -5.41855647),
     (83.60455306, -5.40122587), (83.60553116, -5.38389528)]>
Displacements in arcsec: [  1.71749953e-11   2.58526392e-04   5.20265105e-04   7.88384299e-04
   1.06592559e-03   1.35575307e-03]
<Row 37 of table
 values=('2010-01', '252', '253-254', 2, 258.2, 69.0, 5700, 2.0, 1.8, 'Vertical Far West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMJAN10/reducciones/posiciones/spm252-ardec.fits
~/Dropbox/SPMJAN10/reducciones/spm253-254h.fits
~/Dropbox/SPMJAN10/reducciones/spec253-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec253-nii.fits
iarr = [ 258.2  258.2  258.2  258.2  258.2  258.2] jarr = [ -69.   31.  131.  231.  331.  431.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.5990592, -5.47089219), (83.60007548, -5.45361867),
     (83.6010917, -5.43634514), (83.60210786, -5.41907161),
     (83.60312397, -5.40179808), (83.60414002, -5.38452454)]>
Binning along slit: image = 2 spectrum = 2
[ 83.59905314  83.60006942  83.60108564  83.6021018   83.6031179
  83.60413395] [-5.47088698 -5.45361346 -5.43633993 -5.4190664  -5.40179286 -5.38451933]
[ 6724.  6708.  6693.  6678.  6663.  6648.] [ 3985.  4247.  4508.  4769.  5030.  5292.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2                c3       
    -------------- --------------- ---------------- -----------------
    0.951963038736 0.0917139419732 -0.0393595342064 -0.00277346507589
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 17408 17920
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.59905314, -5.47088698), (83.60006934, -5.45361346),
     (83.60108549, -5.43633994), (83.60210157, -5.41906643),
     (83.6031176, -5.40179292), (83.60413357, -5.38451943)]>
Displacements in arcsec: [  8.58749764e-12   2.67674314e-04   5.38469088e-04   8.15465296e-04
   1.10162799e-03   1.39975973e-03]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 17408 17408
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.59905314, -5.47088698), (83.60006934, -5.45361346),
     (83.60108549, -5.43633994), (83.60210157, -5.41906643),
     (83.6031176, -5.40179292), (83.60413357, -5.38451943)]>
Displacements in arcsec: [  8.58749764e-12   2.67674314e-04   5.38469088e-04   8.15465296e-04
   1.10162799e-03   1.39975973e-03]
<Row 38 of table
 values=('2013-02', '024', '025', 1, 465.0, -73.0, 1500, 4.5, 1.8, 'Horizontal LL2')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm024_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm025_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec025-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec025-nii.fits
iarr = [  73.  173.  273.  373.  473.  573.  673.] jarr = [ 465.  465.  465.  465.  465.  465.  465.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.61802513, -5.376003), (83.63276384, -5.37615545),
     (83.64750255, -5.37630755), (83.66224127, -5.37645929),
     (83.67698, -5.37661069), (83.69171873, -5.37676173),
     (83.70645746, -5.37691241)]>
Binning along slit: image = 3 spectrum = 3
[ 83.61801906  83.63275777  83.64749648  83.66223521  83.67697393
  83.69171266  83.70645139] [-5.37599778 -5.37615024 -5.37630233 -5.37645408 -5.37660547 -5.37675651
 -5.37690719]
[ 6438.  6216.  5995.  5773.  5551.  5329.  5107.] [ 5421.  5418.  5416.  5414.  5412.  5409.  5407.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    ------------- --------------- ---------------- ---------------
    0.78559259061 -0.271248768944 -0.0302318531859 0.0352473397411
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61801906, -5.37599778), (83.63275778, -5.37614913),
     (83.6474965, -5.37630013), (83.66223523, -5.37645077),
     (83.67697396, -5.37660106), (83.69171269, -5.376751),
     (83.70645141, -5.37690058)]>
Displacements in arcsec: [  1.14499969e-11   3.96634619e-03   7.93270663e-03   1.18990952e-02
   1.58655260e-02   1.98320128e-02   2.37985698e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.61801906, -5.37599778), (83.63275778, -5.37614913),
     (83.6474965, -5.37630013), (83.66223523, -5.37645077),
     (83.67697396, -5.37660106), (83.69171269, -5.376751),
     (83.70645141, -5.37690058)]>
Displacements in arcsec: [  1.14499969e-11   3.96634619e-03   7.93270663e-03   1.18990952e-02
   1.58655260e-02   1.98320128e-02   2.37985698e-02]
<Row 39 of table
 values=('2013-02', '165', '166-167', 1, 468.5, -67.0, 3500, 5.5, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm165_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm166-167_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec166-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec166-nii.fits
iarr = [  67.  167.  267.  367.  467.  567.  667.] jarr = [ 468.5  468.5  468.5  468.5  468.5  468.5  468.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.57819344, -5.44066911), (83.59290242, -5.44079598),
     (83.60761141, -5.44092248), (83.6223204, -5.44104863),
     (83.6370294, -5.44117442), (83.6517384, -5.44129986),
     (83.66644741, -5.44142494)]>
Binning along slit: image = 3 spectrum = 3
[ 83.57818738  83.59289636  83.60760535  83.62231434  83.63702334
  83.65173234  83.66644134] [-5.4406639  -5.44079076 -5.44091727 -5.44104342 -5.44116921 -5.44129464
 -5.44141972]
[ 7038.  6817.  6595.  6374.  6152.  5931.  5709.] [ 4442.  4441.  4439.  4437.  4435.  4433.  4431.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    -------------- -------------- ---------------- ---------------
    0.881727531749 0.183323957073 -0.0636534486881 0.0213688494189
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57818738, -5.4406639), (83.59289637, -5.44078965),
     (83.60760536, -5.44091505), (83.62231435, -5.44104009),
     (83.63702334, -5.44116477), (83.65173233, -5.44128909),
     (83.66644131, -5.44141306)]>
Displacements in arcsec: [  2.00374945e-11   3.99720792e-03   7.99446754e-03   1.19918303e-02
   1.59893477e-02   1.99870712e-02   2.39850522e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57818738, -5.4406639), (83.59289637, -5.44078965),
     (83.60760536, -5.44091505), (83.62231435, -5.44104009),
     (83.63702334, -5.44116477), (83.65173233, -5.44128909),
     (83.66644131, -5.44141306)]>
Displacements in arcsec: [  2.00374945e-11   3.99720792e-03   7.99446754e-03   1.19918303e-02
   1.59893477e-02   1.99870712e-02   2.39850522e-02]
<Row 40 of table
 values=('2013-02', '169', '170-171', 1, 468.5, -65.0, 3200, 5.5, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm169_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm170-171_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec170-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec170-nii.fits
iarr = [  65.  165.  265.  365.  465.  565.  665.] jarr = [ 468.5  468.5  468.5  468.5  468.5  468.5  468.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.57831686, -5.43805245), (83.59303389, -5.43816741),
     (83.60775092, -5.43828201), (83.62246796, -5.43839626),
     (83.63718501, -5.43851015), (83.65190205, -5.43862368),
     (83.6666191, -5.43873686)]>
Binning along slit: image = 3 spectrum = 3
[ 83.5783108   83.59302783  83.60774486  83.6224619   83.63717894
  83.65189599  83.66661304] [-5.43804724 -5.4381622  -5.4382768  -5.43839105 -5.43850494 -5.43861847
 -5.43873164]
[ 7036.  6815.  6593.  6371.  6150.  5928.  5707.] [ 4482.  4480.  4479.  4477.  4475.  4474.  4472.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    -------------- -------------- ---------------- ---------------
    0.947535976257 0.200725921895 -0.0668789024946 0.0165058972878
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.5783108, -5.43804724), (83.59302783, -5.43816109),
     (83.60774487, -5.43827458), (83.6224619, -5.43838771),
     (83.63717894, -5.43850049), (83.65189598, -5.43861291),
     (83.66661301, -5.43872498)]>
Displacements in arcsec: [  2.00374945e-11   3.99963621e-03   7.99932274e-03   1.19991097e-02
   1.59990471e-02   1.99991849e-02   2.39995733e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.5783108, -5.43804724), (83.59302783, -5.43816109),
     (83.60774487, -5.43827458), (83.6224619, -5.43838771),
     (83.63717894, -5.43850049), (83.65189598, -5.43861291),
     (83.66661301, -5.43872498)]>
Displacements in arcsec: [  2.00374945e-11   3.99963621e-03   7.99932274e-03   1.19991097e-02
   1.59990471e-02   1.99991849e-02   2.39995733e-02]
<Row 41 of table
 values=('2013-02', '237', '238-239', 1, 467.0, -74.0, 4500, 7.0, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm237_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm238-239_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec238-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec238-nii.fits
iarr = [  74.  174.  274.  374.  474.  574.  674.] jarr = [ 467.  467.  467.  467.  467.  467.  467.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.5816182, -5.43589465), (83.59633079, -5.43600231),
     (83.61104339, -5.43610961), (83.625756, -5.43621656),
     (83.64046862, -5.43632316), (83.65518123, -5.43642939),
     (83.66989385, -5.43653527)]>
Binning along slit: image = 3 spectrum = 3
[ 83.58161213  83.59632473  83.61103733  83.62574994  83.64046255
  83.65517517  83.66988778] [-5.43588944 -5.4359971  -5.4361044  -5.43621135 -5.43631794 -5.43642418
 -5.43653006]
[ 6986.  6765.  6543.  6322.  6100.  5879.  5657.] [ 4515.  4513.  4512.  4510.  4508.  4507.  4505.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.901852834282 -0.0589188029946 -0.0243959362222 0.0240853539235
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58161213, -5.43588944), (83.59632473, -5.43599599),
     (83.61103734, -5.43610218), (83.62574995, -5.43620802),
     (83.64046255, -5.4363135), (83.65517516, -5.43641863),
     (83.66988775, -5.4365234)]>
Displacements in arcsec: [  1.14499969e-11   3.99563429e-03   7.99131087e-03   1.19870719e-02
   1.59829594e-02   1.99790154e-02   2.39752821e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58161213, -5.43588944), (83.59632473, -5.43599599),
     (83.61103734, -5.43610218), (83.62574995, -5.43620802),
     (83.64046255, -5.4363135), (83.65517516, -5.43641863),
     (83.66988775, -5.4365234)]>
Displacements in arcsec: [  1.14499969e-11   3.99563429e-03   7.99131087e-03   1.19870719e-02
   1.59829594e-02   1.99790154e-02   2.39752821e-02]
<Row 42 of table
 values=('2013-02', '232', '233-234', 1, 468.5, -78.0, 4800, 9.0, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm232_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm233-234_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec233-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec233-nii.fits
iarr = [  78.  178.  278.  378.  478.  578.  678.] jarr = [ 468.5  468.5  468.5  468.5  468.5  468.5  468.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.58141833, -5.43194365), (83.59611304, -5.43204573),
     (83.61080776, -5.43214746), (83.62550248, -5.43224883),
     (83.64019721, -5.43234984), (83.65489193, -5.4324505),
     (83.66958666, -5.43255081)]>
Binning along slit: image = 3 spectrum = 3
[ 83.58141226  83.59610698  83.61080169  83.62549642  83.64019114
  83.65488587  83.6695806 ] [-5.43193844 -5.43204052 -5.43214224 -5.43224361 -5.43234463 -5.43244529
 -5.43254559]
[ 6990.  6768.  6547.  6326.  6104.  5883.  5662.] [ 4574.  4573.  4571.  4570.  4568.  4567.  4565.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2              c3      
    -------------- ---------------- ---------------- --------------
    0.847751703253 -0.0570141551873 -0.0287535438957 0.019319241047
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58141226, -5.43193844), (83.59610698, -5.43203941),
     (83.6108017, -5.43214003), (83.62549642, -5.43224029),
     (83.64019114, -5.4323402), (83.65488586, -5.43243976),
     (83.66958057, -5.43253895)]>
Displacements in arcsec: [  5.72499843e-12   3.98304338e-03   7.96612377e-03   1.19492778e-02
   1.59325423e-02   1.99159538e-02   2.38995492e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58141226, -5.43193844), (83.59610698, -5.43203941),
     (83.6108017, -5.43214003), (83.62549642, -5.43224029),
     (83.64019114, -5.4323402), (83.65488586, -5.43243976),
     (83.66958057, -5.43253895)]>
Displacements in arcsec: [  5.72499843e-12   3.98304338e-03   7.96612377e-03   1.19492778e-02
   1.59325423e-02   1.99159538e-02   2.38995492e-02]
<Row 43 of table
 values=('2013-02', '226', '227-228', 1, 468.5, -75.0, 4200, 10.0, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm226_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm227-228_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec227-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec227-nii.fits
iarr = [  75.  175.  275.  375.  475.  575.  675.] jarr = [ 468.5  468.5  468.5  468.5  468.5  468.5  468.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.57279399, -5.42923562), (83.58751481, -5.4293542),
     (83.60223565, -5.42947243), (83.61695649, -5.4295903),
     (83.63167733, -5.42970782), (83.64639818, -5.42982498),
     (83.66111903, -5.42994179)]>
Binning along slit: image = 3 spectrum = 3
[ 83.57278793  83.58750875  83.60222958  83.61695042  83.63167127
  83.64639212  83.66111297] [-5.42923041 -5.42934899 -5.42946722 -5.42958509 -5.42970261 -5.42981977
 -5.42993657]
[ 7119.  6898.  6676.  6454.  6233.  6011.  5789.] [ 4615.  4614.  4612.  4610.  4608.  4607.  4605.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.955009325655 -0.0548749157634 -0.0731134889632 0.0201443305607
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57278793, -5.42923041), (83.58750876, -5.42934788),
     (83.60222959, -5.429465), (83.61695042, -5.42958176),
     (83.63167126, -5.42969817), (83.64639209, -5.42981422),
     (83.66111292, -5.42992991)]>
Displacements in arcsec: [  1.71749953e-11   3.99530813e-03   7.99068890e-03   1.19862146e-02
   1.59819576e-02   1.99779901e-02   2.39743844e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57278793, -5.42923041), (83.58750876, -5.42934788),
     (83.60222959, -5.429465), (83.61695042, -5.42958176),
     (83.63167126, -5.42969817), (83.64639209, -5.42981422),
     (83.66111292, -5.42992991)]>
Displacements in arcsec: [  1.71749953e-11   3.99530813e-03   7.99068890e-03   1.19862146e-02
   1.59819576e-02   1.99779901e-02   2.39743844e-02]
<Row 44 of table
 values=('2013-02', '149', '150-151', 1, 468.0, -70.0, 3600, 3.5, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm149_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm150-151_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec150-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec150-nii.fits
iarr = [  70.  170.  270.  370.  470.  570.  670.] jarr = [ 468.  468.  468.  468.  468.  468.  468.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.58758896, -5.42364026), (83.60229976, -5.42378354),
     (83.61701057, -5.42392646), (83.63172138, -5.42406902),
     (83.64643221, -5.42421123), (83.66114303, -5.42435309),
     (83.67585386, -5.42449458)]>
Binning along slit: image = 3 spectrum = 3
[ 83.58758289  83.60229369  83.6170045   83.63171532  83.64642614
  83.66113697  83.6758478 ] [-5.42363505 -5.42377833 -5.42392125 -5.42406381 -5.42420602 -5.42434787
 -5.42448937]
[ 6897.  6675.  6454.  6232.  6011.  5789.  5567.] [ 4700.  4698.  4696.  4694.  4692.  4689.  4687.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2              c3       
    -------------- -------------- --------------- ----------------
    0.946880250401 0.139400224843 -0.106473934026 -0.0377076170597
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58758289, -5.42363505), (83.6022937, -5.42377722),
     (83.61700452, -5.42391903), (83.63171533, -5.42406049),
     (83.64642615, -5.42420159), (83.66113697, -5.42434234),
     (83.67584778, -5.42448273)]>
Displacements in arcsec: [  1.14499969e-11   3.98589998e-03   7.97184106e-03   1.19578640e-02
   1.59440098e-02   1.99303192e-02   2.39168330e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58758289, -5.42363505), (83.6022937, -5.42377722),
     (83.61700452, -5.42391903), (83.63171533, -5.42406049),
     (83.64642615, -5.42420159), (83.66113697, -5.42434234),
     (83.67584778, -5.42448273)]>
Displacements in arcsec: [  1.14499969e-11   3.98589998e-03   7.97184106e-03   1.19578640e-02
   1.59440098e-02   1.99303192e-02   2.39168330e-02]
<Row 45 of table
 values=('2013-02', '154', '155-156', 1, 467.2, -67.0, 3600, 4.5, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm154_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm155-156_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec155-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec155-nii.fits
iarr = [  67.  167.  267.  367.  467.  567.  667.] jarr = [ 467.2  467.2  467.2  467.2  467.2  467.2  467.2]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.58777408, -5.42231276), (83.60248096, -5.42246058),
     (83.61718784, -5.42260804), (83.63189474, -5.42275514),
     (83.64660163, -5.42290189), (83.66130854, -5.42304828),
     (83.67601544, -5.42319432)]>
Binning along slit: image = 3 spectrum = 3
[ 83.58776802  83.60247489  83.61718178  83.63188867  83.64659557
  83.66130247  83.67600938] [-5.42230755 -5.42245537 -5.42260282 -5.42274993 -5.42289668 -5.42304307
 -5.42318911]
[ 6894.  6672.  6451.  6229.  6008.  5787.  5565.] [ 4720.  4718.  4716.  4714.  4711.  4709.  4707.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2             c3      
    -------------- -------------- --------------- --------------
    0.932827317713 0.155531551385 -0.119098906168 -0.02195825199
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58776802, -5.42230755), (83.6024749, -5.42245426),
     (83.61718179, -5.42260061), (83.63188869, -5.42274661),
     (83.64659558, -5.42289225), (83.66130248, -5.42303754),
     (83.67600937, -5.42318247)]>
Displacements in arcsec: [  2.86249921e-12   3.98282946e-03   7.96569958e-03   1.19486508e-02
   1.59317234e-02   1.99149579e-02   2.38983945e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58776802, -5.42230755), (83.6024749, -5.42245426),
     (83.61718179, -5.42260061), (83.63188869, -5.42274661),
     (83.64659558, -5.42289225), (83.66130248, -5.42303754),
     (83.67600937, -5.42318247)]>
Displacements in arcsec: [  2.86249921e-12   3.98282946e-03   7.96569958e-03   1.19486508e-02
   1.59317234e-02   1.99149579e-02   2.38983945e-02]
<Row 46 of table
 values=('2013-02', '159', '160-161', 1, 467.5, -70.0, 3600, 5.0, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm159_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm160-161_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec160-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec160-nii.fits
iarr = [  70.  170.  270.  370.  470.  570.  670.] jarr = [ 467.5  467.5  467.5  467.5  467.5  467.5  467.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.58833119, -5.41984141), (83.60302869, -5.42000758),
     (83.6177262, -5.42017341), (83.63242372, -5.42033888),
     (83.64712125, -5.42050399), (83.66181878, -5.42066875),
     (83.67651632, -5.42083316)]>
Binning along slit: image = 3 spectrum = 3
[ 83.58832512  83.60302263  83.61772014  83.63241766  83.64711519
  83.66181272  83.67651025] [-5.4198362  -5.42000237 -5.4201682  -5.42033366 -5.42049878 -5.42066354
 -5.42082794]
[ 6885.  6664.  6443.  6221.  6000.  5779.  5558.] [ 4758.  4755.  4753.  4750.  4748.  4745.  4743.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2              c3       
    -------------- -------------- --------------- ----------------
    0.923982812233 0.152624933539 -0.107761788845 -0.0290224579899
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58832512, -5.4198362), (83.60302264, -5.42000127),
     (83.61772016, -5.42016599), (83.63241768, -5.42033035),
     (83.64711521, -5.42049436), (83.66181273, -5.42065801),
     (83.67651026, -5.42082131)]>
Displacements in arcsec: [  2.86249921e-12   3.97604483e-03   7.95212891e-03   1.19282913e-02
   1.59045708e-02   1.98810067e-02   2.38576377e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.58832512, -5.4198362), (83.60302264, -5.42000127),
     (83.61772016, -5.42016599), (83.63241768, -5.42033035),
     (83.64711521, -5.42049436), (83.66181273, -5.42065801),
     (83.67651026, -5.42082131)]>
Displacements in arcsec: [  2.86249921e-12   3.97604483e-03   7.95212891e-03   1.19282913e-02
   1.59045708e-02   1.98810067e-02   2.38576377e-02]
<Row 47 of table
 values=('2013-02', '033', '034-035', 1, 467.0, -70.0, 3800, 6.0, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm033_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm034-035_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec034-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec034-nii.fits
iarr = [  70.  170.  270.  370.  470.  570.  670.] jarr = [ 467.  467.  467.  467.  467.  467.  467.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.57573414, -5.41692613), (83.59016511, -5.41683638),
     (83.60459607, -5.41674628), (83.61902703, -5.41665585),
     (83.63345799, -5.41656507), (83.64788894, -5.41647395),
     (83.66231988, -5.41638249)]>
Binning along slit: image = 3 spectrum = 3
[ 83.57572808  83.59015904  83.60459001  83.61902097  83.63345192
  83.64788287  83.66231382] [-5.41692092 -5.41683117 -5.41674107 -5.41665064 -5.41655986 -5.41646874
 -5.41637728]
[ 7075.  6858.  6641.  6423.  6206.  5989.  5771.] [ 4802.  4803.  4804.  4806.  4807.  4809.  4810.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3      
    -------------- --------------- ---------------- ---------------
    0.835320490759 -0.222274768085 -0.0782006218816 0.0637997946304
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57572808, -5.41692092), (83.59015903, -5.4168301),
     (83.60458998, -5.41673894), (83.61902092, -5.41664744),
     (83.63345185, -5.4165556), (83.64788277, -5.41646342),
     (83.66231367, -5.41637089)]>
Displacements in arcsec: [  2.57624929e-11   3.83056086e-03   7.66120846e-03   1.14920294e-02
   1.53231103e-02   1.91545376e-02   2.29863981e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57572808, -5.41692092), (83.59015903, -5.4168301),
     (83.60458998, -5.41673894), (83.61902092, -5.41664744),
     (83.63345185, -5.4165556), (83.64788277, -5.41646342),
     (83.66231367, -5.41637089)]>
Displacements in arcsec: [  2.57624929e-11   3.83056086e-03   7.66120846e-03   1.14920294e-02
   1.53231103e-02   1.91545376e-02   2.29863981e-02]
<Row 48 of table
 values=('2013-02', '029', '030-031', 1, 465.2, -76.0, 3800, 4.5, 1.8, 'Horizontal West')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB13/WesternShocks/spm029_ardec.fits
~/Dropbox/SPMFEB13/WesternShocks/spm030-031_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec030-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec030-nii.fits
iarr = [  76.  176.  276.  376.  476.  576.  676.] jarr = [ 465.2  465.2  465.2  465.2  465.2  465.2  465.2]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.5743561, -5.41573686), (83.58878312, -5.41567021),
     (83.60321014, -5.41560321), (83.61763716, -5.41553588),
     (83.63206418, -5.4154682), (83.64649119, -5.41540018),
     (83.6609182, -5.41533182)]>
Binning along slit: image = 3 spectrum = 3
[ 83.57435003  83.58877705  83.60320407  83.61763109  83.63205811
  83.64648512  83.66091213] [-5.41573165 -5.415665   -5.415598   -5.41553066 -5.41546298 -5.41539496
 -5.4153266 ]
[ 7096.  6879.  6661.  6444.  6227.  6010.  5792.] [ 4820.  4821.  4822.  4823.  4824.  4825.  4826.]
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
Wav: [6559.29, 6566.29] Pixel: [  52.34030432  212.33250092]
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
Wav: [6579.95, 6586.95] Pixel: [  44.4295912   203.92043141]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0             c1              c2               c3      
    -------------- -------------- ---------------- ---------------
    0.833714751434 -0.24324517959 -0.0735090567281 0.0506287438588
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 18.05626219  52.34030432]
Wav: [6566.29, 6567.79] Pixel: [ 212.33250092  246.61654304]
Background weights: 21250 21875
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57435003, -5.41573165), (83.58877704, -5.41566393),
     (83.60320405, -5.41559587), (83.61763105, -5.41552747),
     (83.63205804, -5.41545873), (83.64648502, -5.41538965),
     (83.66091199, -5.41532022)]>
Displacements in arcsec: [  5.72499843e-12   3.82763944e-03   7.65537073e-03   1.14832856e-02
   1.53114757e-02   1.91400328e-02   2.29690484e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 10.25298258  44.4295912 ]
Wav: [6586.95, 6588.45] Pixel: [ 203.92043141  238.09704002]
Background weights: 21250 21250
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.57435003, -5.41573165), (83.58877704, -5.41566393),
     (83.60320405, -5.41559587), (83.61763105, -5.41552747),
     (83.63205804, -5.41545873), (83.64648502, -5.41538965),
     (83.66091199, -5.41532022)]>
Displacements in arcsec: [  5.72499843e-12   3.82763944e-03   7.65537073e-03   1.14832856e-02
   1.53114757e-02   1.91400328e-02   2.29690484e-02]
<Row 49 of table
 values=('2013-12', '116', '117-118', 1, 395.0, -160.0, 400, 10.5, 1.8, 'Horizontal below LL2')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/papers/LL-Objects/SPMDIC13/spm116-ardec.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spm117-118_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec117-118-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec117-118-nii.fits
iarr = [  240.   390.   540.   690.   840.   990.  1140.] jarr = [ 395.  395.  395.  395.  395.  395.  395.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.63782536, -5.39056432), (83.65254471, -5.39115353),
     (83.66726409, -5.39174238), (83.68198349, -5.39233088),
     (83.69670292, -5.39291903), (83.71142238, -5.39350682),
     (83.72614186, -5.39409426)]>
Binning along slit: image = 2 spectrum = 3
[ 83.6378193   83.65253864  83.66725802  83.68197743  83.69669686
  83.71141631  83.72613579] [-5.39055911 -5.39114831 -5.39173716 -5.39232566 -5.39291381 -5.3935016
 -5.39408904]
[ 6140.  5919.  5697.  5475.  5254.  5032.  4810.] [ 5201.  5192.  5183.  5174.  5165.  5156.  5147.]
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
Wav: [6559.29, 6566.29] Pixel: [  75.1963324  235.188529 ]
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
Wav: [6579.95, 6586.95] Pixel: [  67.21400835  226.70487564]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2              c3      
    -------------- --------------- ----------------- --------------
    0.943515848559 -0.313295195982 -0.00901419410773 0.029813904266
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6378193, -5.39055911), (83.65253869, -5.39114723),
     (83.6672581, -5.391735), (83.68197754, -5.39232241),
     (83.696697, -5.39290947), (83.71141649, -5.39349618),
     (83.72613599, -5.39408253)]>
Displacements in arcsec: [  8.58749764e-12   3.90644584e-03   7.81291882e-03   1.17194459e-02
   1.56260539e-02   1.95327698e-02   2.34396205e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.6378193, -5.39055911), (83.65253869, -5.39114723),
     (83.6672581, -5.391735), (83.68197754, -5.39232241),
     (83.696697, -5.39290947), (83.71141649, -5.39349618),
     (83.72613599, -5.39408253)]>
Displacements in arcsec: [  8.58749764e-12   3.90644584e-03   7.81291882e-03   1.17194459e-02
   1.56260539e-02   1.95327698e-02   2.34396205e-02]
<Row 50 of table
 values=('2013-12', '086', '088', 1, 404.0, -155.0, 300, 11.0, 1.8, 'W of HH269')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/papers/LL-Objects/SPMDIC13/spm086-ardec.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spm088_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec088-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec088-nii.fits
iarr = [  232.5   382.5   532.5   682.5   832.5   982.5  1132.5] jarr = [ 404.  404.  404.  404.  404.  404.  404.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.70503837, -5.38691652), (83.71975962, -5.38746739),
     (83.73448091, -5.3880179), (83.74920222, -5.38856806),
     (83.76392355, -5.38911787), (83.7786449, -5.38966733),
     (83.79336628, -5.39021643)]>
Binning along slit: image = 2 spectrum = 3
[ 83.7050323   83.71975356  83.73447484  83.74919615  83.76391748
  83.77863883  83.79336021] [-5.3869113  -5.38746217 -5.38801268 -5.38856285 -5.38911265 -5.38966211
 -5.39021121]
[ 5128.  4906.  4685.  4463.  4241.  4020.  3798.] [ 5256.  5247.  5239.  5231.  5223.  5214.  5206.]
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
Wav: [6559.29, 6566.29] Pixel: [  75.1963324  235.188529 ]
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
Wav: [6579.95, 6586.95] Pixel: [  67.21400835  226.70487564]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2                c3       
    -------------- ---------------- ---------------- -----------------
    0.969618125488 0.00367789318551 -0.0276219771832 -0.00793460420947
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7050323, -5.3869113), (83.71975359, -5.38746108),
     (83.73447492, -5.38801052), (83.74919626, -5.38855959),
     (83.76391762, -5.38910832), (83.77863901, -5.38965669),
     (83.79336041, -5.3902047)]>
Displacements in arcsec: [  2.57624929e-11   3.90438996e-03   7.80879325e-03   1.17132231e-02
   1.56176926e-02   1.95222150e-02   2.34268034e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7050323, -5.3869113), (83.71975359, -5.38746108),
     (83.73447492, -5.38801052), (83.74919626, -5.38855959),
     (83.76391762, -5.38910832), (83.77863901, -5.38965669),
     (83.79336041, -5.3902047)]>
Displacements in arcsec: [  2.57624929e-11   3.90438996e-03   7.80879325e-03   1.17132231e-02
   1.56176926e-02   1.95222150e-02   2.34268034e-02]
<Row 51 of table
 values=('2013-12', '090', '089', 1, 404.5, -160.0, 400, 10.5, 1.8, 'Image follows spec')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/papers/LL-Objects/SPMDIC13/spm090-ardec.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spm089_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec089-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec089-nii.fits
iarr = [  240.   390.   540.   690.   840.   990.  1140.] jarr = [ 404.5  404.5  404.5  404.5  404.5  404.5  404.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.70289354, -5.39031548), (83.71761004, -5.39088022),
     (83.73232657, -5.39144462), (83.74704312, -5.39200866),
     (83.7617597, -5.39257235), (83.77647631, -5.39313568),
     (83.79119293, -5.39369866)]>
Binning along slit: image = 2 spectrum = 3
[ 83.70288747  83.71760397  83.7323205   83.74703706  83.76175364
  83.77647024  83.79118686] [-5.39031026 -5.39087501 -5.3914394  -5.39200344 -5.39256713 -5.39313046
 -5.39369344]
[ 5160.  4939.  4717.  4495.  4274.  4052.  3831.] [ 5204.  5196.  5187.  5179.  5170.  5162.  5153.]
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
Wav: [6559.29, 6566.29] Pixel: [  75.1963324  235.188529 ]
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
Wav: [6579.95, 6586.95] Pixel: [  67.21400835  226.70487564]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.962474001315 -0.0198239403718 -0.0450027826878 0.0008525427863
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.70288747, -5.39031026), (83.71760401, -5.39087392),
     (83.73232058, -5.39143723), (83.74703717, -5.39200019),
     (83.76175378, -5.39256279), (83.77647041, -5.39312504),
     (83.79118706, -5.39368693)]>
Displacements in arcsec: [  1.14499969e-11   3.90446361e-03   7.80894385e-03   1.17134571e-02
   1.56180199e-02   1.95226486e-02   2.34273595e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.70288747, -5.39031026), (83.71760401, -5.39087392),
     (83.73232058, -5.39143723), (83.74703717, -5.39200019),
     (83.76175378, -5.39256279), (83.77647041, -5.39312504),
     (83.79118706, -5.39368693)]>
Displacements in arcsec: [  1.14499969e-11   3.90446361e-03   7.80894385e-03   1.17134571e-02
   1.56180199e-02   1.95226486e-02   2.34273595e-02]
<Row 52 of table
 values=('2013-12', '102', '103-104', 1, 402.5, -150.0, 350, 10.5, 1.8, 'V faint image')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/papers/LL-Objects/SPMDIC13/spm102-ardec.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spm103-104_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec103-104-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec103-104-nii.fits
iarr = [  225.   375.   525.   675.   825.   975.  1125.] jarr = [ 402.5  402.5  402.5  402.5  402.5  402.5  402.5]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.67286954, -5.38733731), (83.68750475, -5.38782312),
     (83.70213998, -5.38830859), (83.71677523, -5.38879371),
     (83.7314105, -5.38927848), (83.74604579, -5.3897629),
     (83.7606811, -5.39024697)]>
Binning along slit: image = 2 spectrum = 3
[ 83.67286348  83.68749868  83.70213391  83.71676916  83.73140443
  83.74603973  83.76067503] [-5.38733209 -5.38781791 -5.38830337 -5.38878849 -5.38927326 -5.38975768
 -5.39024175]
[ 5612.  5392.  5172.  4951.  4731.  4511.  4290.] [ 5249.  5242.  5235.  5227.  5220.  5213.  5205.]
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
Wav: [6559.29, 6566.29] Pixel: [  75.1963324  235.188529 ]
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
Wav: [6579.95, 6586.95] Pixel: [  67.21400835  226.70487564]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1              c2               c3       
    -------------- --------------- ---------------- ----------------
    0.855785856211 -0.253175860718 -0.0389389250528 0.00368725942487
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67286348, -5.38733209), (83.68749871, -5.38781684),
     (83.70213397, -5.38830123), (83.71676925, -5.38878528),
     (83.73140455, -5.38926897), (83.74603986, -5.38975232),
     (83.76067519, -5.39023532)]>
Displacements in arcsec: [  2.28999937e-11   3.85850181e-03   7.71703354e-03   1.15756246e-02
   1.54343048e-02   1.92931035e-02   2.31520505e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.67286348, -5.38733209), (83.68749871, -5.38781684),
     (83.70213397, -5.38830123), (83.71676925, -5.38878528),
     (83.73140455, -5.38926897), (83.74603986, -5.38975232),
     (83.76067519, -5.39023532)]>
Displacements in arcsec: [  2.28999937e-11   3.85850181e-03   7.71703354e-03   1.15756246e-02
   1.54343048e-02   1.92931035e-02   2.31520505e-02]
<Row 53 of table
 values=('2013-12', '111', '112-113', 1, 400.0, -145.0, 400, 10.5, 1.8, 'W of HH269')
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/papers/LL-Objects/SPMDIC13/spm111-ardec.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spm112-113_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec112-113-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec112-113-nii.fits
iarr = [  217.5   367.5   517.5   667.5   817.5   967.5  1117.5] jarr = [ 400.  400.  400.  400.  400.  400.  400.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.71896553, -5.38972956), (83.73360279, -5.39019753),
     (83.74824007, -5.39066516), (83.76287737, -5.39113243),
     (83.77751469, -5.39159935), (83.79215202, -5.39206593),
     (83.80678937, -5.39253215)]>
Binning along slit: image = 2 spectrum = 3
[ 83.71895946  83.73359672  83.748234    83.7628713   83.77750862
  83.79214595  83.8067833 ] [-5.38972434 -5.39019231 -5.39065994 -5.39112721 -5.39159413 -5.39206071
 -5.39252693]
[ 4918.  4698.  4477.  4257.  4037.  3816.  3596.] [ 5213.  5206.  5199.  5192.  5185.  5178.  5171.]
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
Wav: [6559.29, 6566.29] Pixel: [  75.1963324  235.188529 ]
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
Wav: [6579.95, 6586.95] Pixel: [  67.21400835  226.70487564]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0            c1              c2              c3      
    ------------- -------------- --------------- ---------------
    1.04219041699 -0.14211583759 0.0490816278839 0.0431260651493
Saving ha calibrated spectrum
Wav: [6557.79, 6559.29] Pixel: [ 40.91229027  75.1963324 ]
Wav: [6566.29, 6567.79] Pixel: [ 235.188529    269.47257113]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.71895946, -5.38972434), (83.73359676, -5.39019124),
     (83.74823407, -5.39065779), (83.7628714, -5.39112399),
     (83.77750875, -5.39158984), (83.79214611, -5.39205535),
     (83.80678348, -5.3925205)]>
Displacements in arcsec: [  1.14499969e-11   3.86109164e-03   7.72218639e-03   1.15832872e-02
   1.54443971e-02   1.93055190e-02   2.31666558e-02]
Saving nii calibrated spectrum
Wav: [6578.45, 6579.95] Pixel: [ 33.03739394  67.21400835]
Wav: [6586.95, 6588.45] Pixel: [ 226.70487564  260.88149005]
Background weights: 20910 20910
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.71895946, -5.38972434), (83.73359676, -5.39019124),
     (83.74823407, -5.39065779), (83.7628714, -5.39112399),
     (83.77750875, -5.39158984), (83.79214611, -5.39205535),
     (83.80678348, -5.3925205)]>
Displacements in arcsec: [  1.14499969e-11   3.86109164e-03   7.72218639e-03   1.15832872e-02
   1.54443971e-02   1.93055190e-02   2.31666558e-02]
<Row 54 of table
 values=(2015-02, 0003, 0004, 1, 463.0, -80.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0003-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-nii.fits
iarr = [  80.  180.  280.  380.  480.  580.  680.  780.  880.  980.] jarr = [ 463.  463.  463.  463.  463.  463.  463.  463.  463.  463.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76300486, -5.38914842), (83.75317756, -5.38920898),
     (83.74335024, -5.38926939), (83.73352293, -5.38932964),
     (83.72369561, -5.38938973), (83.71386829, -5.38944967),
     (83.70404097, -5.38950944), (83.69421365, -5.38956906),
     (83.68438632, -5.38962852), (83.674559, -5.38968782)]>
Binning along slit: image = 2 spectrum = 2
[ 83.7629988   83.75317149  83.74334418  83.73351686  83.72368954
  83.71386222  83.7040349   83.69420758  83.68438026  83.67455293] [-5.3891432  -5.38920377 -5.38926417 -5.38932442 -5.38938451 -5.38944445
 -5.38950422 -5.38956384 -5.3896233  -5.38968261]
[ 4255.  4403.  4551.  4699.  4847.  4995.  5143.  5291.  5439.  5587.] [ 5222.  5221.  5220.  5219.  5218.  5218.  5217.  5216.  5215.  5214.]
Wav: [6559.29, 6566.29] Pixel: [  12.45186057  134.32298985]
Wav: [6579.95, 6586.95] Pixel: [  10.14579358  132.01692287]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2                c3       
    -------------- ---------------- ---------------- -----------------
    0.968088496551 -0.0353020238319 -0.0368421106332 0.000390521891842
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
<Row 55 of table
 values=(2015-02, 0012, 0013, 1, 464.0, -60.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0012-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-nii.fits
iarr = [  60.  160.  260.  360.  460.  560.  660.  760.  860.  960.] jarr = [ 464.  464.  464.  464.  464.  464.  464.  464.  464.  464.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76323814, -5.3929956), (83.75342282, -5.39306366),
     (83.7436075, -5.39313156), (83.73379217, -5.3931993),
     (83.72397685, -5.39326688), (83.71416152, -5.39333431),
     (83.70434619, -5.39340158), (83.69453086, -5.39346869),
     (83.68471553, -5.39353565), (83.6749002, -5.39360244)]>
Binning along slit: image = 2 spectrum = 2
[ 83.76323207  83.75341675  83.74360143  83.73378611  83.72397078
  83.71415545  83.70434012  83.69452479  83.68470946  83.67489413] [-5.39299038 -5.39305844 -5.39312634 -5.39319408 -5.39326167 -5.39332909
 -5.39339636 -5.39346348 -5.39353043 -5.39359723]
[ 4252.  4399.  4547.  4695.  4843.  4991.  5138.  5286.  5434.  5582.] [ 5164.  5163.  5162.  5161.  5160.  5159.  5158.  5157.  5156.  5155.]
Wav: [6559.29, 6566.29] Pixel: [  13.23643219  135.38568331]
Wav: [6579.95, 6586.95] Pixel: [   3.75122191  125.90047303]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.910890984261 -0.0345993965867 -0.0231613499696 0.0155135592095
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
#+end_example



* Fix the issue with the [N II]/Ha ratio
:LOGBOOK:
CLOCK: [2015-09-20 Sun 22:00]--[2015-09-22 Tue 21:52] => 47:52
:END:

** DONE [1/1] Program to check the [N II]/Ha ratios: slit-ratio-check.py
CLOSED: [2015-09-22 Tue 13:33]
:PROPERTIES:
:header-args: :tangle slit-ratio-check.py :comments both :noweb yes
:END:
:LOGBOOK:
CLOCK: [2015-09-17 Thu 14:19]--[2015-09-17 Thu 16:19] =>  2:00
:END:
+ We want to check the individual ha and nii images we are using
+ And also double check against the full spectrum image wherever possible
*** Re-use stuff from slit-calibration.py
#+BEGIN_SRC python
  <<slit-calib-imports>>
from astropy.convolution import convolve_fft, Box1DKernel
  <<read-slit-table>>
  <<slit-calib-filenames>>
#+END_SRC
*** Convert wavelength to pixel
#+BEGIN_SRC python
def wav2pix(wav, wcs, nwav, isT):
    if isT:
        _, (xpix,) = wcs.all_world2pix([0], [wav], 0)
    else:
        (xpix,), _ = wcs.all_world2pix([wav], [0], 0)
#    print(wcs.wcs.crpix, wcs.wcs.crval, wcs.wcs.get_cdelt(), wcs.wcs.get_pc())
    print('Wav:', wav, 'Pixel:', xpix)
    return max(0, min(nwav, int(xpix+0.5)))
#+END_SRC

#+RESULTS:

*** Make a sensible WCS (even if wavelength info missing)
0.0994382022472

#+BEGIN_SRC python
wcs_extra = {
    '2007-01': (440, 6583.45, 0.1),
    '2006-02': (446, 6583.45, 0.1),
    ('2006-02', '323'): (442, 6583.45, 0.1),
    ('2006-02', '318'): (442, 6583.45, 0.1),
    ('2006-02', '260'): (491, 6583.45, 0.1),
    '2007-01b': (440, 6583.45, 0.1),
    '2010-01': (440, 6583.45, 0.1),
    '2013-02': (167, 6583.45, -0.056),
    ('2015-02', '0003'): (1015, 6583.45, 0.05775),
    ('2015-02', '0012'): (888, 6583.45, 0.05775),
}
def makeWCS(hdr, dset, imid, jwav):
    w = WCS(hdr)
    dwav = w.wcs.get_cdelt()[jwav]*w.wcs.get_pc()[jwav, jwav]
    if dwav == 1.0:
        # No WCS info from header, so fix it by hand
        extras =  wcs_extra.get((dset, imid)) or wcs_extra.get(dset)
        if w.wcs.has_cd():
            w.wcs.crpix[jwav], w.wcs.crval[jwav], w.wcs.cd[jwav, jwav] = extras
        else:
            w.wcs.crpix[jwav], w.wcs.crval[jwav], w.wcs.cdelt[jwav] = extras
        print('Fixing WCS to CRPIX = {}, CRVAL = {}, CDELT = {}'.format(*extras) )
        print('Confirmation CRPIX = {}, CRVAL = {}, CDELT = {}'.format(w.wcs.crpix[jwav],
                                                                       w.wcs.crval[jwav],
                                                                       w.wcs.get_cdelt()[jwav]) )
    return w
#+END_SRC
*** DONE Extract profile along slit for an isolated line
CLOSED: [2015-09-22 Tue 10:34]
:PROPERTIES:
:ID:       74998E9B-988D-4378-9465-DAC5EE6E15A0
:END:
#+name: extract-profile-with-bg-subtraction
#+BEGIN_SRC python
def extract_profile(hdu, wavrest, dset, imid,
                    dw=4.0, dwbg_in=6.0, dwbg_out=8.0,
                    isT=False, smooth=10):
    jwav = 1 if isT else 0
    w = makeWCS(hdu.header, dset, imid, jwav)
    # Make sure array axis order is (position, wavelength)
    data = hdu.data.T if isT else hdu.data
    nslit, nwav = data.shape
    dwav = w.wcs.get_cdelt()[jwav]*w.wcs.get_pc()[jwav, jwav]
    sgn = np.sign(dwav)         # Need to take slices backwards if this is negative
    print('Check: wavrest = {}, dwav = {}, nslit = {}, nwav = {}'.format(wavrest, dwav, nslit, nwav))
    # pixel limits for line extraction
    i1 = wav2pix(wavrest-dw/2, w, nwav, isT)
    i2 = wav2pix(wavrest+dw/2, w, nwav, isT)
    # pixel limits for blue bg extraction
    iblu1 = wav2pix(wavrest-dwbg_out/2, w, nwav, isT)
    iblu2 = wav2pix(wavrest-dwbg_in/2, w, nwav, isT)
    # pixel limits for red bg extraction
    ired1 = wav2pix(wavrest+dwbg_in/2, w, nwav, isT)
    ired2 = wav2pix(wavrest+dwbg_out/2, w, nwav, isT)
    print(iblu1, iblu2, i1, i2, ired1, ired2)
    # extract backgrounds on blue and red sides
    bgblu = data[:, iblu1:iblu2:sgn].mean(axis=1)
    bgred = data[:, ired1:ired2:sgn].mean(axis=1)
    # take weighted average, accounting for cases where the bg region
    # does not fit in the image
    weight_blu = data[:, iblu1:iblu2:sgn].size
    weight_red = data[:, ired1:ired2:sgn].size
    bg = (bgblu*weight_blu + bgred*weight_red)/(weight_blu + weight_red)
    data -= bg[:, None]

    profile = data[:, i1:i2:sgn].sum(axis=1)
    if smooth is not None:
        profile = convolve_fft(profile, Box1DKernel(smooth))
    return profile
#+END_SRC
*** Find the celestial coordinates along the slit by using the WCS of the calibrated spectrum
#+BEGIN_SRC python
def slit_coords_from_wcs(w, isT, nslit):
    """Input arguments: `w` a WCS object with 3 dimensions and i axis
order (wav, ra, dec) and with j axis order (wav, parallel, perp);
`isT` flag that is True for horizontal slits; `nslit`, is number of
pixels along the slit.  Returns: `coords`, `coord_label` where `coord`
is array of major coordinate for each slit pixel and `coord_label` is
its coordinate name (RA or Dec)

    """
    # Note that j axis order is always wavelength, then along slit,
    # then across slit
    wav, ra, dec = w.all_pix2world([0]*nslit, range(nslit), [0]*nslit, 0)
    if isT:
        # Slit axis mainly along RA
        coord_label = w.wcs.cname[1]
        coords = ra
    else:
        # Slit axis mainly along Dec
        coord_label = w.wcs.cname[2]
        coords = dec
    print('Major coordinate:', coord_label)
    print(coords[::100])
    return coords, coord_label
#+END_SRC
*** Loop over all the slits and check the ratios
#+BEGIN_SRC python
datasets = set(tab['Dataset'])
MAXLINES = 18
sns.set_palette("deep", 6)
# sns.set_palette(sns.husl_palette(MAXLINES//3, l=0.4))
# sns.set_palette(sns.diverging_palette(10, 220, sep=80, n=MAXLINES/2, center='dark'))
ratio_types = 'nii-ha', 'nii-ha-full', 'nii-nii-full'
fig_ax_dict = {(ds, rtype): plt.subplots(1, 1)
               for ds in datasets for rtype in ratio_types}
def get_plot_dict(iline):
    """Lines get thicker and fainter as iline increases"""
    x = iline/MAXLINES
    return {"lw": 0.8 + 1.2*x, "alpha": 1.0 - 0.6*x}

for row in tab:
    print(row['Dataset'], row['imid'], row['specid'])
    full_id = row['Dataset'] + '-' + row['imid']
    specfile = find_fits_filepath(row, 'fullspec')
    hafile = find_fits_filepath(row, 'ha')
    niifile = find_fits_filepath(row, 'nii')
    calibfile = 'Calibrated/{}-{}.fits'.format(full_id, 'ha')
    spechdu = fits.open(specfile)[0]
    hahdu = fits.open(hafile)[0]
    niihdu = fits.open(niifile)[0]
    calhdu = fits.open(calibfile)[0]
    calw = WCS(calhdu.header, key='A')

    isT = row['saxis'] == 1
    dset = row['Dataset']
    imid = row['imid']

    # First use the extracted ha and nii spectra, plotted against RA or Dec
    ha = extract_profile(hahdu, 6562.79, dset, imid, isT=isT)
    nii = extract_profile(niihdu, 6583.45, dset, imid, isT=isT)
    fig, ax = fig_ax_dict[(dset, 'nii-ha')]
    coords, coord_label = slit_coords_from_wcs(calw, isT, len(ha))
    ax.plot(coords, nii/ha, label=str(row['imid']), **get_plot_dict(len(ax.lines)))
    ax.set_xlabel(coord_label)
    if coord_label == 'Declination':
        ax.set_xlim(-5.51, -5.33)
    else:
        ax.set_xlim(83.85, 83.55)  # RA should increase right-to-left

    # Then use the full spectrum, just plotted against pixel
    ha = extract_profile(spechdu, 6562.79, dset, imid, isT=isT)
    nii = extract_profile(spechdu, 6583.45, dset, imid, isT=isT)
    niib = extract_profile(spechdu, 6548.05, dset, imid, isT=isT)
    fig, ax = fig_ax_dict[(dset, 'nii-ha-full')]
    ax.plot(nii/ha, label=str(row['imid']), **get_plot_dict(len(ax.lines)))
    fig, ax = fig_ax_dict[(dset, 'nii-nii-full')]
    ax.plot(niib/nii, label=str(row['imid']), **get_plot_dict(len(ax.lines)))


for (ds, rtype), (fig, ax) in fig_ax_dict.items():
    ax.legend()
    ax.set_ylim(0.0, 0.5)
    if not rtype == 'nii-ha':
        ax.set_xlabel('Pixel')
    if 'ha' in rtype:
        ax.set_ylabel('6583 / 6563')
    else:
        ax.set_ylabel('6548 / 6583')
    fig.savefig('plots/{}-check-{}.png'.format(rtype, ds), dpi=300)
#+END_SRC

#+RESULTS:

** Check the pixel bounds for bg and line
*** Script to check the grating angles and other observational parameters
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: observational-parameters
#+BEGIN_SRC python :return outtab
  <<slit-calib-imports>>
  <<read-slit-table>>
  <<slit-calib-filenames>>
outtab = [['ID', 'Spec', 'Date', 'Detector', 'Grating', 'Aperture', 'Gain'], None]
for row in tab:
    full_id = row['Dataset'] + '-' + row['imid']
    specfile = find_fits_filepath(row, 'fullspec')
    hdr = fits.open(specfile)[0].header
    outtab.append([full_id, row['specid'], hdr.get('DATE-OBS'),
                   hdr.get('DETECTOR') or hdr.get('CAMERA'),
                   hdr.get('APERTURE'), hdr.get('GRATING'), hdr.get('GAIN')])
#+END_SRC

#+RESULTS: observational-parameters
|            ID |      Spec |       Date | Detector | Grating     | Aperture | Gain |
|---------------+-----------+------------+----------+-------------+----------+------|
|   2006-02-326 |       324 | 2006-02-05 | SITE3    | 150 microns |      -11 |    4 |
|   2006-02-318 |       319 | 2006-02-05 | SITE3    | 150 microns |      -11 |    4 |
|   2006-02-260 |       261 | 2006-02-05 | SITE3    | 150 microns |       -7 |    4 |
|   2006-02-270 |       271 | 2006-02-05 | SITE3    | 150 microns |       -4 |    4 |
|   2006-02-276 |       277 | 2006-02-05 | SITE3    | 150 microns |       -4 |    4 |
|   2006-02-281 |       282 | 2006-02-05 | SITE3    | 150 microns |       -6 |    4 |
|   2006-02-286 |       287 | 2006-02-05 | SITE3    | 150 microns |       -7 |    4 |
|   2006-02-291 |       292 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-296 |       297 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-303 |       304 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-313 |       312 | 2006-02-05 | SITE3    | 150 microns |      -10 |    4 |
| 2007-01b-2061 |    2062-c | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2037 | 2038-2040 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2041 | 2042-2044 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2045 | 2046-2048 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2049 | 2050-2052 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2053 | 2054-2056 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2057 | 2058-2060 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-054 |       055 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-067 |       068 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-072 |       073 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2010-01-078 |   079-080 | 2010-01-15 | SITE3    | 150 micron  |       -8 |    4 |
|   2010-01-202 |   203-204 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-124 |   125-127 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-206 |   207-208 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-128 |   129-130 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-133 |   134-135 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-210 |   211-212 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-137 |   138-139 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-214 |   215-216 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-145 |   146-147 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-248 |   249-250 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-219 |   220-221 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-157 |   158-159 | 2010-01-16 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-236 |   237-238 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-240 |   241-242 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-244 |   245-246 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-252 |   253-254 | 2010-01-17 | SITE3    | 150 micron  |        0 |    4 |
|   2013-02-024 |       025 | 2013-02-16 | e2vm2    | 70 micron   |       -4 |  2.2 |
|   2013-02-165 |   166-167 | 2013-02-18 | e2vm2    | 150 micron  |       13 |  2.2 |
|   2013-02-169 |   170-171 | 2013-02-18 | e2vm2    | 150 micron  |       10 |  2.2 |
|   2013-02-237 |   238-239 | 2013-02-19 | e2vm2    | 150 micron  |       11 |  2.2 |
|   2013-02-232 |   233-234 | 2013-02-19 | e2vm2    | 150 micron  |        9 |  2.2 |
|   2013-02-226 |   227-228 | 2013-02-19 | e2vm2    | 150 micron  |        9 |  2.2 |
|   2013-02-149 |   150-151 | 2013-02-18 | e2vm2    | 150 micron  |        4 |  2.2 |
|   2013-02-154 |   155-156 | 2013-02-18 | e2vm2    | 150 micron  |        7 |  2.2 |
|   2013-02-159 |   160-161 | 2013-02-18 | e2vm2    | 150 micron  |        8 |  2.2 |
|   2013-02-033 |   034-035 | 2013-02-16 | e2vm2    | 150 micron  |       -5 |  2.2 |
|   2013-02-029 |   030-031 | 2013-02-16 | e2vm2    | 150 micron  |       -4 |  2.2 |
|   2013-12-116 |   117-118 | 2013-12-11 | e2vm2    | 150         |        0 |  2.2 |
|   2013-12-086 |       088 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-090 |       089 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-102 |   103-104 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-111 |   112-113 | 2013-12-11 | e2vm2    | 150         |        0 |  2.2 |
|  2015-02-0003 |      0004 | 2015-02-03 | e2vm2    | 70 microns  |        9 |  2.2 |
|  2015-02-0012 |      0013 | 2015-02-03 | e2vm2    | 70 microns  |        2 |  2.2 |
*** 2006-02 dataset
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Work/SPM2005/pp324.fits
#+END_SRC

+ Measurements of X at top of image for blue component of 6583
+ Pixel difference between 6583 and 6548 is 356 => dwav = 0.1
+ A ::
  + X = 442
  + Grating = -11
  + 324, 319
+ B :: 
  + X = 491
  + Grating = -7
  + 261
+ C ::
  + X = 446
  + Grating = -4, -8, -7 (!!!), -10
    + 287 has grating of -7, which is the same as 261
    + but the position of the spectrum on the chip is the same as for all the others
    + So we can't use the Grating value for anything
  + 271, 277, 282, 287, 292, 297, 304, 312


*** 2007-01b dataset
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-2060.fits
#+END_SRC
+ All the same
+ X = 440
+ 2062, 2038, 2042, 2046, 2050, 2054, 2058
+ Grating = 0 


*** 2007-01 dataset
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Work/SPM2007/Reduced/spec055-transf.fits
#+END_SRC
+ All the same
+ X = 440



*** 2010-01 dataset
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Dropbox/SPMJAN10/reducciones/spm079-080h.fits
#+END_SRC
+ Only tiny changes in position between X=440 and X=443

*** 2013-02
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Dropbox/SPMFEB13/WesternShocks/spm025_bcr.fits
#+END_SRC
+ dwav = -0.056
+ Y = 167 (6583), Y = 799 (6548)
+ Changes to Y = 165 in 238, 233


*** 2013-12
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Dropbox/papers/LL-Objects/SPMDIC13/spm112-113_bcrx.fits
#+END_SRC
+ dwav = 0.05664
+ Y = 843 (6583), Y = 218 (6548)
+ But this already has a decent WCS


*** 2015-02
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits ~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
#+END_SRC
+ 0004 ::
  + Y = 1015 (6583), Y = 402 (6548)
  + dwav = 0.05775
+ 0013 ::
  + Y = 888 (6583), Y = 271 (6548)

*** Looking at the calibrated spectra
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/Calibrated/2006-02-303-ha.fits
#+END_SRC

So it seems like all the trouble was due to differences in the zero-level between the nii and the ha spectra! 

** Run slit-ratio-check.py
#+BEGIN_SRC sh :exports code :results verbatim
python slit-ratio-check.py # 1>&2
#+END_SRC

#+RESULTS:
#+begin_example
2006-02 326 324
~/Work/SPM2005/pp324.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec324-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec324-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43558101 -5.41828809 -5.40099517 -5.38370226 -5.36640936 -5.34911647]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 318 319
~/Work/SPM2005/pp319.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec319-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec319-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43451169 -5.41721639 -5.3999211  -5.38262581 -5.36533053 -5.34803526]
Fixing WCS to CRPIX = 442, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 442.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 214.4
Wav: 6564.79 Pixel: 254.4
Wav: 6558.79 Pixel: 194.4
Wav: 6559.79 Pixel: 204.4
Wav: 6565.79 Pixel: 264.4
Wav: 6566.79 Pixel: 274.4
194 204 214 254 264 274
Fixing WCS to CRPIX = 442, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 442.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 421.0
Wav: 6585.45 Pixel: 461.0
Wav: 6579.45 Pixel: 401.0
Wav: 6580.45 Pixel: 411.0
Wav: 6586.45 Pixel: 471.0
Wav: 6587.45 Pixel: 481.0
401 411 421 461 471 481
Fixing WCS to CRPIX = 442, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 442.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 67.0
Wav: 6550.05 Pixel: 107.0
Wav: 6544.05 Pixel: 47.0
Wav: 6545.05 Pixel: 57.0
Wav: 6551.05 Pixel: 117.0
Wav: 6552.05 Pixel: 127.0
47 57 67 107 117 127
2006-02 260 261
~/Work/SPM2005/pp261.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec261-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec261-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43189927 -5.41468131 -5.39746336 -5.38024542 -5.36302748 -5.34580956]
Fixing WCS to CRPIX = 491, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 491.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 263.4
Wav: 6564.79 Pixel: 303.4
Wav: 6558.79 Pixel: 243.4
Wav: 6559.79 Pixel: 253.4
Wav: 6565.79 Pixel: 313.4
Wav: 6566.79 Pixel: 323.4
243 253 263 303 313 323
Fixing WCS to CRPIX = 491, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 491.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 470.0
Wav: 6585.45 Pixel: 510.0
Wav: 6579.45 Pixel: 450.0
Wav: 6580.45 Pixel: 460.0
Wav: 6586.45 Pixel: 520.0
Wav: 6587.45 Pixel: 530.0
450 460 470 510 512 512
Fixing WCS to CRPIX = 491, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 491.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 116.0
Wav: 6550.05 Pixel: 156.0
Wav: 6544.05 Pixel: 96.0
Wav: 6545.05 Pixel: 106.0
Wav: 6551.05 Pixel: 166.0
Wav: 6552.05 Pixel: 176.0
96 106 116 156 166 176
2006-02 270 271
~/Work/SPM2005/pp271.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec271-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec271-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43182595 -5.41456224 -5.39729854 -5.38003484 -5.36277115 -5.34550748]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 276 277
~/Work/SPM2005/pp277.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec277-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec277-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43170651 -5.41445512 -5.39720373 -5.37995236 -5.36270099 -5.34544963]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 281 282
~/Work/SPM2005/pp282.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec282-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec282-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43180229 -5.41453212 -5.39726195 -5.37999179 -5.36272164 -5.3454515 ]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 286 287
~/Work/SPM2005/pp287.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec287-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec287-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43174721 -5.41447833 -5.39720947 -5.3799406  -5.36267175 -5.34540291]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 291 292
~/Work/SPM2005/pp292.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec292-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec292-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43164099 -5.414456   -5.39727103 -5.38008605 -5.36290109 -5.34571614]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 296 297
~/Work/SPM2005/pp297.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec297-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec297-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43161555 -5.41436887 -5.39712219 -5.37987552 -5.36262885 -5.3453822 ]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 303 304
~/Work/SPM2005/pp304.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec304-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec304-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43285063 -5.41556246 -5.3982743  -5.38098614 -5.36369799 -5.34640986]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2006-02 313 312
~/Work/SPM2005/pp312.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMha/spec312-halpha.fits
~/Work/SPM2007/Reduced/HH505/slits/SPMnii/spec312-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 63.7683183591
Wav: 6564.79 Pixel: 155.192430702
Wav: 6558.79 Pixel: 18.0562621877
Wav: 6559.79 Pixel: 40.9122902734
Wav: 6565.79 Pixel: 178.048458788
Wav: 6566.79 Pixel: 200.904486873
18 41 64 155 178 201
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 200
Wav: 6581.45 Pixel: 55.8217940723
Wav: 6585.45 Pixel: 146.959417047
Wav: 6579.45 Pixel: 10.2529825847
Wav: 6580.45 Pixel: 33.0373883285
Wav: 6586.45 Pixel: 169.743822791
Wav: 6587.45 Pixel: 192.528228535
10 33 56 147 170 193
Major coordinate: Declination
[-5.43361786 -5.41631817 -5.39901849 -5.38171882 -5.36441915 -5.3471195 ]
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 218.4
Wav: 6564.79 Pixel: 258.4
Wav: 6558.79 Pixel: 198.4
Wav: 6559.79 Pixel: 208.4
Wav: 6565.79 Pixel: 268.4
Wav: 6566.79 Pixel: 278.4
198 208 218 258 268 278
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 425.0
Wav: 6585.45 Pixel: 465.0
Wav: 6579.45 Pixel: 405.0
Wav: 6580.45 Pixel: 415.0
Wav: 6586.45 Pixel: 475.0
Wav: 6587.45 Pixel: 485.0
405 415 425 465 475 485
Fixing WCS to CRPIX = 446, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 446.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 71.0
Wav: 6550.05 Pixel: 111.0
Wav: 6544.05 Pixel: 51.0
Wav: 6545.05 Pixel: 61.0
Wav: 6551.05 Pixel: 121.0
Wav: 6552.05 Pixel: 131.0
51 61 71 111 121 131
2007-01b 2061 2062-c
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-c.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2062-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.43792867 -5.42072997 -5.40353128 -5.38633259 -5.36913391 -5.35193524]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2037 2038-2040
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-2040.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2038-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.44332052 -5.42610224 -5.40888397 -5.3916657  -5.37444744 -5.35722919]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2041 2042-2044
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-2044.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2042-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.44328095 -5.4260643  -5.40884767 -5.39163103 -5.37441441 -5.3571978 ]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2045 2046-2048
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-2048.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2046-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.44333521 -5.4260593  -5.4087834  -5.39150751 -5.37423162 -5.35695575]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2049 2050-2052
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-2052.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2050-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.44331528 -5.42606895 -5.40882263 -5.39157631 -5.37433    -5.35708371]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2053 2054-2056
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-2056.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2054-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.43808897 -5.42089295 -5.40369692 -5.38650091 -5.3693049  -5.3521089 ]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01b 2057 2058-2060
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-2060.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-ha.fits
~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.43815458 -5.42096912 -5.40378367 -5.38659822 -5.36941278 -5.35222735]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 0.1
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01 054 055
~/Work/SPM2007/Reduced/spec055-transf.fits
~/Work/SPM2007/Reduced/spec055-ha-fix.fits
~/Work/SPM2007/Reduced/spec055-nii-fix.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6062131601
Wav: 6585.45 Pixel: 169.743851607
Wav: 6579.45 Pixel: 33.0373939368
Wav: 6580.45 Pixel: 55.8218035484
Wav: 6586.45 Pixel: 192.528261218
Wav: 6587.45 Pixel: 215.31267083
33 56 79 170 193 215
Major coordinate: Declination
[-5.48877689 -5.47147716 -5.45417743 -5.4368777  -5.41957799 -5.40227829]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01 067 068
~/Work/SPM2007/Reduced/spec068-transf.fits
~/Work/SPM2007/Reduced/spec068-ha-fix.fits
~/Work/SPM2007/Reduced/spec068-nii-fix.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6062131601
Wav: 6585.45 Pixel: 169.743851607
Wav: 6579.45 Pixel: 33.0373939368
Wav: 6580.45 Pixel: 55.8218035484
Wav: 6586.45 Pixel: 192.528261218
Wav: 6587.45 Pixel: 215.31267083
33 56 79 170 193 215
Major coordinate: Declination
[-5.48903543 -5.4717266  -5.45441778 -5.43710896 -5.41980015 -5.40249136]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2007-01 072 073
~/Work/SPM2007/Reduced/spec073-transf.fits
~/Work/SPM2007/Reduced/spec073-ha-fix.fits
~/Work/SPM2007/Reduced/spec073-nii-fix.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6062131601
Wav: 6585.45 Pixel: 169.743851607
Wav: 6579.45 Pixel: 33.0373939368
Wav: 6580.45 Pixel: 55.8218035484
Wav: 6586.45 Pixel: 192.528261218
Wav: 6587.45 Pixel: 215.31267083
33 56 79 170 193 215
Major coordinate: Declination
[-5.48898612 -5.47171874 -5.45445137 -5.43718401 -5.41991665 -5.40264931]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 078 079-080
~/Dropbox/SPMJAN10/reducciones/spm079-080h.fits
~/Dropbox/SPMJAN10/reducciones/spec079-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec079-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.43655178 -5.41929871 -5.40204563 -5.38479256 -5.3675395  -5.35028644]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 202 203-204
~/Dropbox/SPMJAN10/reducciones/spm203-204h.fits
~/Dropbox/SPMJAN10/reducciones/spec203-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec203-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47001678 -5.45269275 -5.43536871 -5.41804468 -5.40072066 -5.38339665]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 124 125-127
~/Dropbox/SPMJAN10/reducciones/spm125-127h.fits
~/Dropbox/SPMJAN10/reducciones/spec125-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec125-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47173806 -5.45448454 -5.43723101 -5.41997749 -5.40272397 -5.38547047]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 206 207-208
~/Dropbox/SPMJAN10/reducciones/spm207-208h.fits
~/Dropbox/SPMJAN10/reducciones/spec207-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec207-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46985658 -5.45258712 -5.43531766 -5.41804821 -5.40077876 -5.38350933]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 128 129-130
~/Dropbox/SPMJAN10/reducciones/spm129-130h.fits
~/Dropbox/SPMJAN10/reducciones/spec129-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec129-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47202155 -5.45474105 -5.43746056 -5.42018006 -5.40289958 -5.3856191 ]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 133 134-135
~/Dropbox/SPMJAN10/reducciones/spm134-135h.fits
~/Dropbox/SPMJAN10/reducciones/spec134-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec134-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46641384 -5.4491334  -5.43185296 -5.41457252 -5.39729209 -5.38001168]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 210 211-212
~/Dropbox/SPMJAN10/reducciones/spm211-212h.fits
~/Dropbox/SPMJAN10/reducciones/spec211-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec211-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46986834 -5.45259418 -5.43532002 -5.41804587 -5.40077172 -5.38349759]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 137 138-139
~/Dropbox/SPMJAN10/reducciones/spm138-139h.fits
~/Dropbox/SPMJAN10/reducciones/spec138-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec138-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46642482 -5.44914278 -5.43186074 -5.4145787  -5.39729667 -5.38001465]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 214 215-216
~/Dropbox/SPMJAN10/reducciones/spm215-216h.fits
~/Dropbox/SPMJAN10/reducciones/spec215-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec215-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47061649 -5.45328866 -5.43596083 -5.418633   -5.40130519 -5.38397738]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 145 146-147
~/Dropbox/SPMJAN10/reducciones/spm146-147h.fits
~/Dropbox/SPMJAN10/reducciones/spec146-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec146-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46606641 -5.44882464 -5.43158288 -5.41434112 -5.39709938 -5.37985764]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 248 249-250
~/Dropbox/SPMJAN10/reducciones/spm249-250h.fits
~/Dropbox/SPMJAN10/reducciones/spec249-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec249-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47089296 -5.45361144 -5.43632991 -5.41904839 -5.40176688 -5.38448538]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 219 220-221
~/Dropbox/SPMJAN10/reducciones/spm220-221h.fits
~/Dropbox/SPMJAN10/reducciones/spec220-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec220-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47027276 -5.45300394 -5.43573513 -5.41846632 -5.40119752 -5.38392873]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 157 158-159
~/Dropbox/SPMJAN10/reducciones/spm158-159h.fits
~/Dropbox/SPMJAN10/reducciones/spec158-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec158-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.46689286 -5.44967051 -5.43244816 -5.41522582 -5.39800348 -5.38078115]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 236 237-238
~/Dropbox/SPMJAN10/reducciones/spm237-238h.fits
~/Dropbox/SPMJAN10/reducciones/spec237-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec237-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47048035 -5.45319256 -5.43590476 -5.41861697 -5.40132919 -5.38404142]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 240 241-242
~/Dropbox/SPMJAN10/reducciones/spm241-242h.fits
~/Dropbox/SPMJAN10/reducciones/spec241-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec241-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.4706784  -5.45338527 -5.43609213 -5.41879901 -5.40150589 -5.38421279]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 244 245-246
~/Dropbox/SPMJAN10/reducciones/spm245-246h.fits
~/Dropbox/SPMJAN10/reducciones/spec245-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec245-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47054832 -5.4532177  -5.43588708 -5.41855647 -5.40122587 -5.38389528]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2010-01 252 253-254
~/Dropbox/SPMJAN10/reducciones/spm253-254h.fits
~/Dropbox/SPMJAN10/reducciones/spec253-ha.fits
~/Dropbox/SPMJAN10/reducciones/spec253-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 512, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 512, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Declination
[-5.47088698 -5.45361346 -5.43633994 -5.41906643 -5.40179292 -5.38451943]
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6562.79, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6560.79 Pixel: 212.4
Wav: 6564.79 Pixel: 252.4
Wav: 6558.79 Pixel: 192.4
Wav: 6559.79 Pixel: 202.4
Wav: 6565.79 Pixel: 262.4
Wav: 6566.79 Pixel: 272.4
192 202 212 252 262 272
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6583.45, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6581.45 Pixel: 419.0
Wav: 6585.45 Pixel: 459.0
Wav: 6579.45 Pixel: 399.0
Wav: 6580.45 Pixel: 409.0
Wav: 6586.45 Pixel: 469.0
Wav: 6587.45 Pixel: 479.0
399 409 419 459 469 479
Fixing WCS to CRPIX = 440, CRVAL = 6583.45, CDELT = 0.1
Confirmation CRPIX = 440.0, CRVAL = 6583.45, CDELT = 1.0
Check: wavrest = 6548.05, dwav = 0.1, nslit = 512, nwav = 512
Wav: 6546.05 Pixel: 65.0
Wav: 6550.05 Pixel: 105.0
Wav: 6544.05 Pixel: 45.0
Wav: 6545.05 Pixel: 55.0
Wav: 6551.05 Pixel: 115.0
Wav: 6552.05 Pixel: 125.0
45 55 65 105 115 125
2013-02 024 025
~/Dropbox/SPMFEB13/WesternShocks/spm025_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec025-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec025-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.61801906  83.63275778  83.6474965   83.66223523  83.67697396
  83.69171269  83.70645141]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 165 166-167
~/Dropbox/SPMFEB13/WesternShocks/spm166-167_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec166-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec166-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.57818738  83.59289637  83.60760536  83.62231435  83.63702334
  83.65173233  83.66644131]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 169 170-171
~/Dropbox/SPMFEB13/WesternShocks/spm170-171_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec170-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec170-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.5783108   83.59302783  83.60774487  83.6224619   83.63717894
  83.65189598  83.66661301]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 237 238-239
~/Dropbox/SPMFEB13/WesternShocks/spm238-239_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec238-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec238-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.58161213  83.59632473  83.61103734  83.62574995  83.64046255
  83.65517516  83.66988775]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 232 233-234
~/Dropbox/SPMFEB13/WesternShocks/spm233-234_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec233-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec233-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.58141226  83.59610698  83.6108017   83.62549642  83.64019114
  83.65488586  83.66958057]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 226 227-228
~/Dropbox/SPMFEB13/WesternShocks/spm227-228_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec227-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec227-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.57278793  83.58750876  83.60222959  83.61695042  83.63167126
  83.64639209  83.66111292]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 149 150-151
~/Dropbox/SPMFEB13/WesternShocks/spm150-151_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec150-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec150-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.58758289  83.6022937   83.61700452  83.63171533  83.64642615
  83.66113697  83.67584778]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 154 155-156
~/Dropbox/SPMFEB13/WesternShocks/spm155-156_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec155-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec155-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.58776802  83.6024749   83.61718179  83.63188869  83.64659558
  83.66130248  83.67600937]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 159 160-161
~/Dropbox/SPMFEB13/WesternShocks/spm160-161_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec160-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec160-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.58832512  83.60302264  83.61772016  83.63241768  83.64711521
  83.66181273  83.67651026]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 033 034-035
~/Dropbox/SPMFEB13/WesternShocks/spm034-035_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec034-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec034-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.57572808  83.59015903  83.60458998  83.61902092  83.63345185
  83.64788277  83.66231367]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-02 029 030-031
~/Dropbox/SPMFEB13/WesternShocks/spm030-031_bcr.fits
~/Dropbox/SPMFEB13/WesternShocks/spec030-ha.fits
~/Dropbox/SPMFEB13/WesternShocks/spec030-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 625, nwav = 300
Wav: 6560.79 Pixel: 86.6243464448
Wav: 6564.79 Pixel: 178.048458788
Wav: 6558.79 Pixel: 40.9122902734
Wav: 6559.79 Pixel: 63.7683183591
Wav: 6565.79 Pixel: 200.904486873
Wav: 6566.79 Pixel: 223.760514959
41 64 87 178 201 224
Check: wavrest = 6583.45, dwav = 0.0438896678388119, nslit = 625, nwav = 300
Wav: 6581.45 Pixel: 78.6061998161
Wav: 6585.45 Pixel: 169.743822791
Wav: 6579.45 Pixel: 33.0373883285
Wav: 6580.45 Pixel: 55.8217940723
Wav: 6586.45 Pixel: 192.528228535
Wav: 6587.45 Pixel: 215.312634279
33 56 79 170 193 215
Major coordinate: Right Ascension
[ 83.57435003  83.58877704  83.60320405  83.61763105  83.63205804
  83.64648502  83.66091199]
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6562.79, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6560.79 Pixel: 570.642857143
Wav: 6564.79 Pixel: 499.214285714
Wav: 6558.79 Pixel: 606.357142857
Wav: 6559.79 Pixel: 588.5
Wav: 6565.79 Pixel: 481.357142857
Wav: 6566.79 Pixel: 463.5
606 588 571 499 481 463
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6583.45, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6581.45 Pixel: 201.714285714
Wav: 6585.45 Pixel: 130.285714286
Wav: 6579.45 Pixel: 237.428571429
Wav: 6580.45 Pixel: 219.571428571
Wav: 6586.45 Pixel: 112.428571429
Wav: 6587.45 Pixel: 94.5714285714
237 220 202 130 112 95
Fixing WCS to CRPIX = 167, CRVAL = 6583.45, CDELT = -0.056
Confirmation CRPIX = 167.0, CRVAL = 6583.45, CDELT = -0.056
Check: wavrest = 6548.05, dwav = -0.056, nslit = 625, nwav = 1017
Wav: 6546.05 Pixel: 833.857142857
Wav: 6550.05 Pixel: 762.428571429
Wav: 6544.05 Pixel: 869.571428571
Wav: 6545.05 Pixel: 851.714285714
Wav: 6551.05 Pixel: 744.571428571
Wav: 6552.05 Pixel: 726.714285714
870 852 834 762 745 727
2013-12 116 117-118
~/Dropbox/papers/LL-Objects/SPMDIC13/spm117-118_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec117-118-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec117-118-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 615, nwav = 300
Wav: 6560.79 Pixel: 109.480374531
Wav: 6564.79 Pixel: 200.904486873
Wav: 6558.79 Pixel: 63.7683183591
Wav: 6559.79 Pixel: 86.6243464448
Wav: 6565.79 Pixel: 223.760514959
Wav: 6566.79 Pixel: 246.616543045
64 87 109 201 224 247
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 615, nwav = 300
Wav: 6581.45 Pixel: 101.390622772
Wav: 6585.45 Pixel: 192.528261218
Wav: 6579.45 Pixel: 55.8218035484
Wav: 6580.45 Pixel: 78.6062131601
Wav: 6586.45 Pixel: 215.31267083
Wav: 6587.45 Pixel: 238.097080441
56 79 101 193 215 238
Major coordinate: Right Ascension
[ 83.6378193   83.65253869  83.6672581   83.68197754  83.696697
  83.71141649  83.72613599]
Check: wavrest = 6562.79, dwav = 0.0566950365900993, nslit = 615, nwav = 1024
Wav: 6560.79 Pixel: 437.854549191
Wav: 6564.79 Pixel: 508.407462471
Wav: 6558.79 Pixel: 402.57809255
Wav: 6559.79 Pixel: 420.21632087
Wav: 6565.79 Pixel: 526.045690792
Wav: 6566.79 Pixel: 543.683919112
403 420 438 508 526 544
Check: wavrest = 6583.45, dwav = 0.0566950365900993, nslit = 615, nwav = 1024
Wav: 6581.45 Pixel: 802.260346287
Wav: 6585.45 Pixel: 872.813259567
Wav: 6579.45 Pixel: 766.983889646
Wav: 6580.45 Pixel: 784.622117966
Wav: 6586.45 Pixel: 890.451487888
Wav: 6587.45 Pixel: 908.089716208
767 785 802 873 890 908
Check: wavrest = 6548.05, dwav = 0.0566950365900993, nslit = 615, nwav = 1024
Wav: 6546.05 Pixel: 177.86706375
Wav: 6550.05 Pixel: 248.419977031
Wav: 6544.05 Pixel: 142.59060711
Wav: 6545.05 Pixel: 160.22883543
Wav: 6551.05 Pixel: 266.058205352
Wav: 6552.05 Pixel: 283.696433672
143 160 178 248 266 284
2013-12 086 088
~/Dropbox/papers/LL-Objects/SPMDIC13/spm088_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec088-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec088-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 615, nwav = 300
Wav: 6560.79 Pixel: 109.480374531
Wav: 6564.79 Pixel: 200.904486873
Wav: 6558.79 Pixel: 63.7683183591
Wav: 6559.79 Pixel: 86.6243464448
Wav: 6565.79 Pixel: 223.760514959
Wav: 6566.79 Pixel: 246.616543045
64 87 109 201 224 247
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 615, nwav = 300
Wav: 6581.45 Pixel: 101.390622772
Wav: 6585.45 Pixel: 192.528261218
Wav: 6579.45 Pixel: 55.8218035484
Wav: 6580.45 Pixel: 78.6062131601
Wav: 6586.45 Pixel: 215.31267083
Wav: 6587.45 Pixel: 238.097080441
56 79 101 193 215 238
Major coordinate: Right Ascension
[ 83.7050323   83.71975359  83.73447492  83.74919626  83.76391762
  83.77863901  83.79336041]
Check: wavrest = 6562.79, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6560.79 Pixel: 438.199075688
Wav: 6564.79 Pixel: 508.739516083
Wav: 6558.79 Pixel: 402.92885549
Wav: 6559.79 Pixel: 420.563965589
Wav: 6565.79 Pixel: 526.374626181
Wav: 6566.79 Pixel: 544.00973628
403 421 438 509 526 544
Check: wavrest = 6583.45, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6581.45 Pixel: 802.540450328
Wav: 6585.45 Pixel: 873.080890723
Wav: 6579.45 Pixel: 767.270230131
Wav: 6580.45 Pixel: 784.90534023
Wav: 6586.45 Pixel: 890.716000822
Wav: 6587.45 Pixel: 908.351110921
767 785 803 873 891 908
Check: wavrest = 6548.05, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6546.05 Pixel: 178.257552831
Wav: 6550.05 Pixel: 248.797993227
Wav: 6544.05 Pixel: 142.987332634
Wav: 6545.05 Pixel: 160.622442733
Wav: 6551.05 Pixel: 266.433103325
Wav: 6552.05 Pixel: 284.068213424
143 161 178 249 266 284
2013-12 090 089
~/Dropbox/papers/LL-Objects/SPMDIC13/spm089_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec089-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec089-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 615, nwav = 300
Wav: 6560.79 Pixel: 109.480374531
Wav: 6564.79 Pixel: 200.904486873
Wav: 6558.79 Pixel: 63.7683183591
Wav: 6559.79 Pixel: 86.6243464448
Wav: 6565.79 Pixel: 223.760514959
Wav: 6566.79 Pixel: 246.616543045
64 87 109 201 224 247
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 615, nwav = 300
Wav: 6581.45 Pixel: 101.390622772
Wav: 6585.45 Pixel: 192.528261218
Wav: 6579.45 Pixel: 55.8218035484
Wav: 6580.45 Pixel: 78.6062131601
Wav: 6586.45 Pixel: 215.31267083
Wav: 6587.45 Pixel: 238.097080441
56 79 101 193 215 238
Major coordinate: Right Ascension
[ 83.70288747  83.71760401  83.73232058  83.74703717  83.76175378
  83.77647041  83.79118706]
Check: wavrest = 6562.79, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6560.79 Pixel: 438.199075688
Wav: 6564.79 Pixel: 508.739516083
Wav: 6558.79 Pixel: 402.92885549
Wav: 6559.79 Pixel: 420.563965589
Wav: 6565.79 Pixel: 526.374626181
Wav: 6566.79 Pixel: 544.00973628
403 421 438 509 526 544
Check: wavrest = 6583.45, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6581.45 Pixel: 802.540450328
Wav: 6585.45 Pixel: 873.080890723
Wav: 6579.45 Pixel: 767.270230131
Wav: 6580.45 Pixel: 784.90534023
Wav: 6586.45 Pixel: 890.716000822
Wav: 6587.45 Pixel: 908.351110921
767 785 803 873 891 908
Check: wavrest = 6548.05, dwav = 0.0567050613462925, nslit = 615, nwav = 1024
Wav: 6546.05 Pixel: 178.257552831
Wav: 6550.05 Pixel: 248.797993227
Wav: 6544.05 Pixel: 142.987332634
Wav: 6545.05 Pixel: 160.622442733
Wav: 6551.05 Pixel: 266.433103325
Wav: 6552.05 Pixel: 284.068213424
143 161 178 249 266 284
2013-12 102 103-104
~/Dropbox/papers/LL-Objects/SPMDIC13/spm103-104_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec103-104-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec103-104-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 615, nwav = 300
Wav: 6560.79 Pixel: 109.480374531
Wav: 6564.79 Pixel: 200.904486873
Wav: 6558.79 Pixel: 63.7683183591
Wav: 6559.79 Pixel: 86.6243464448
Wav: 6565.79 Pixel: 223.760514959
Wav: 6566.79 Pixel: 246.616543045
64 87 109 201 224 247
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 615, nwav = 300
Wav: 6581.45 Pixel: 101.390622772
Wav: 6585.45 Pixel: 192.528261218
Wav: 6579.45 Pixel: 55.8218035484
Wav: 6580.45 Pixel: 78.6062131601
Wav: 6586.45 Pixel: 215.31267083
Wav: 6587.45 Pixel: 238.097080441
56 79 101 193 215 238
Major coordinate: Right Ascension
[ 83.67286348  83.68749872  83.70213397  83.71676925  83.73140455
  83.74603986  83.76067519]
Check: wavrest = 6562.79, dwav = 0.0567060150206089, nslit = 615, nwav = 1024
Wav: 6560.79 Pixel: 438.183095364
Wav: 6564.79 Pixel: 508.722349419
Wav: 6558.79 Pixel: 402.913468337
Wav: 6559.79 Pixel: 420.54828185
Wav: 6565.79 Pixel: 526.357162933
Wav: 6566.79 Pixel: 543.991976447
403 421 438 509 526 544
Check: wavrest = 6583.45, dwav = 0.0567060150206089, nslit = 615, nwav = 1024
Wav: 6581.45 Pixel: 802.51834256
Wav: 6585.45 Pixel: 873.057596615
Wav: 6579.45 Pixel: 767.248715532
Wav: 6580.45 Pixel: 784.883529046
Wav: 6586.45 Pixel: 890.692410129
Wav: 6587.45 Pixel: 908.327223643
767 785 803 873 891 908
Check: wavrest = 6548.05, dwav = 0.0567060150206089, nslit = 615, nwav = 1024
Wav: 6546.05 Pixel: 178.245944171
Wav: 6550.05 Pixel: 248.785198226
Wav: 6544.05 Pixel: 142.976317143
Wav: 6545.05 Pixel: 160.611130657
Wav: 6551.05 Pixel: 266.42001174
Wav: 6552.05 Pixel: 284.054825253
143 161 178 249 266 284
2013-12 111 112-113
~/Dropbox/papers/LL-Objects/SPMDIC13/spm112-113_bcrx.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec112-113-ha.fits
~/Dropbox/papers/LL-Objects/SPMDIC13/spec112-113-nii.fits
Check: wavrest = 6562.79, dwav = 0.043752133846283, nslit = 615, nwav = 300
Wav: 6560.79 Pixel: 109.480374531
Wav: 6564.79 Pixel: 200.904486873
Wav: 6558.79 Pixel: 63.7683183591
Wav: 6559.79 Pixel: 86.6243464448
Wav: 6565.79 Pixel: 223.760514959
Wav: 6566.79 Pixel: 246.616543045
64 87 109 201 224 247
Check: wavrest = 6583.45, dwav = 0.0438896603882313, nslit = 615, nwav = 300
Wav: 6581.45 Pixel: 101.390622772
Wav: 6585.45 Pixel: 192.528261218
Wav: 6579.45 Pixel: 55.8218035484
Wav: 6580.45 Pixel: 78.6062131601
Wav: 6586.45 Pixel: 215.31267083
Wav: 6587.45 Pixel: 238.097080441
56 79 101 193 215 238
Major coordinate: Right Ascension
[ 83.71895946  83.73359676  83.74823407  83.7628714   83.77750875
  83.79214611  83.80678348]
Check: wavrest = 6562.79, dwav = 0.0566969476640224, nslit = 615, nwav = 1024
Wav: 6560.79 Pixel: 437.951748142
Wav: 6564.79 Pixel: 508.502283308
Wav: 6558.79 Pixel: 402.676480558
Wav: 6559.79 Pixel: 420.31411435
Wav: 6565.79 Pixel: 526.1399171
Wav: 6566.79 Pixel: 543.777550891
403 420 438 509 526 544
Check: wavrest = 6583.45, dwav = 0.0566969476640224, nslit = 615, nwav = 1024
Wav: 6581.45 Pixel: 802.345262276
Wav: 6585.45 Pixel: 872.895797443
Wav: 6579.45 Pixel: 767.069994693
Wav: 6580.45 Pixel: 784.707628485
Wav: 6586.45 Pixel: 890.533431234
Wav: 6587.45 Pixel: 908.171065026
767 785 802 873 891 908
Check: wavrest = 6548.05, dwav = 0.0566969476640224, nslit = 615, nwav = 1024
Wav: 6546.05 Pixel: 177.973026053
Wav: 6550.05 Pixel: 248.52356122
Wav: 6544.05 Pixel: 142.69775847
Wav: 6545.05 Pixel: 160.335392262
Wav: 6551.05 Pixel: 266.161195011
Wav: 6552.05 Pixel: 283.798828803
143 160 178 249 266 284
2015-02 0003 0004
~/Dropbox/SPMFEB15/archivos/spm0004o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-nii.fits
Check: wavrest = 6562.79, dwav = 0.0574377216398716, nslit = 979, nwav = 160
Wav: 6560.79 Pixel: 38.5671025555
Wav: 6564.79 Pixel: 108.207747863
Wav: 6558.79 Pixel: 3.74677990165
Wav: 6559.79 Pixel: 21.1569412286
Wav: 6565.79 Pixel: 125.61790919
Wav: 6566.79 Pixel: 143.028070517
4 21 39 108 126 143
Check: wavrest = 6583.45, dwav = 0.0574377216398716, nslit = 979, nwav = 94
Wav: 6581.45 Pixel: 36.2610355693
Wav: 6585.45 Pixel: 105.901680877
Wav: 6579.45 Pixel: 1.4407129155
Wav: 6580.45 Pixel: 18.8508742424
Wav: 6586.45 Pixel: 123.311842204
Wav: 6587.45 Pixel: 140.722003531
1 19 36 94 94 94
Major coordinate: Right Ascension
[ 83.7629988   83.75317148  83.74334417  83.73351686  83.72368954
  83.71386223  83.70403492  83.6942076   83.6843803   83.67455299]
Check: wavrest = 6562.79, dwav = 0.0574377216398716, nslit = 979, nwav = 1024
Wav: 6560.79 Pixel: 481.567102555
Wav: 6564.79 Pixel: 551.207747863
Wav: 6558.79 Pixel: 446.746779902
Wav: 6559.79 Pixel: 464.156941229
Wav: 6565.79 Pixel: 568.61790919
Wav: 6566.79 Pixel: 586.028070517
447 464 482 551 569 586
Check: wavrest = 6583.45, dwav = 0.0574377216398716, nslit = 979, nwav = 1024
Wav: 6581.45 Pixel: 841.261035569
Wav: 6585.45 Pixel: 910.901680877
Wav: 6579.45 Pixel: 806.440712915
Wav: 6580.45 Pixel: 823.850874242
Wav: 6586.45 Pixel: 928.311842204
Wav: 6587.45 Pixel: 945.722003531
806 824 841 911 928 946
Check: wavrest = 6548.05, dwav = 0.0574377216398716, nslit = 979, nwav = 1024
Wav: 6546.05 Pixel: 224.941324597
Wav: 6550.05 Pixel: 294.581969905
Wav: 6544.05 Pixel: 190.121001943
Wav: 6545.05 Pixel: 207.53116327
Wav: 6551.05 Pixel: 311.992131231
Wav: 6552.05 Pixel: 329.402292558
190 208 225 295 312 329
2015-02 0012 0013
~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-nii.fits
Check: wavrest = 6562.79, dwav = 0.0573069415986538, nslit = 979, nwav = 160
Wav: 6560.79 Pixel: 39.4112717166
Wav: 6564.79 Pixel: 109.210843783
Wav: 6558.79 Pixel: 4.51148568358
Wav: 6559.79 Pixel: 21.9613787001
Wav: 6565.79 Pixel: 126.660736799
Wav: 6566.79 Pixel: 144.110629816
5 22 39 109 127 144
Check: wavrest = 6583.45, dwav = 0.0573069415986538, nslit = 979, nwav = 160
Wav: 6581.45 Pixel: 29.9260614377
Wav: 6585.45 Pixel: 99.7256335038
Wav: 6579.45 Pixel: -4.97372459528
Wav: 6580.45 Pixel: 12.4761684212
Wav: 6586.45 Pixel: 117.17552652
Wav: 6587.45 Pixel: 134.625419537
0 12 30 100 117 135
Major coordinate: Right Ascension
[ 83.76323207  83.75341675  83.74360142  83.7337861   83.72397078
  83.71415545  83.70434013  83.69452481  83.68470949  83.67489417]
Check: wavrest = 6562.79, dwav = 0.0573069415986538, nslit = 979, nwav = 1024
Wav: 6560.79 Pixel: 479.411271717
Wav: 6564.79 Pixel: 549.210843783
Wav: 6558.79 Pixel: 444.511485684
Wav: 6559.79 Pixel: 461.9613787
Wav: 6565.79 Pixel: 566.660736799
Wav: 6566.79 Pixel: 584.110629816
445 462 479 549 567 584
Check: wavrest = 6583.45, dwav = 0.0573069415986538, nslit = 979, nwav = 1024
Wav: 6581.45 Pixel: 839.926061438
Wav: 6585.45 Pixel: 909.725633504
Wav: 6579.45 Pixel: 805.026275405
Wav: 6580.45 Pixel: 822.476168421
Wav: 6586.45 Pixel: 927.17552652
Wav: 6587.45 Pixel: 944.625419537
805 822 840 910 927 945
Check: wavrest = 6548.05, dwav = 0.0573069415986538, nslit = 979, nwav = 1024
Wav: 6546.05 Pixel: 222.199848653
Wav: 6550.05 Pixel: 291.999420719
Wav: 6544.05 Pixel: 187.30006262
Wav: 6545.05 Pixel: 204.749955637
Wav: 6551.05 Pixel: 309.449313736
Wav: 6552.05 Pixel: 326.899206752
187 205 222 292 309 327
#+end_example







** Looking for more external constraints on the [N II]/Ha ratios
We have the ODH values, but they are for large areas.  We could do with some actual images of the [N II]/Ha ratio.


*** WFPC2 mosaic
+ We have the f658n and f656n images
+ We ought to work out the difference in efficiency - use nebulio
  + This would require use of the f547m image too

**** Inferences from the mosaic
+ LL1 region needs correction factor of 1.8
+ Horizontal E slits also have correction factor of about 1.8, once we fix the zero-point problem
  + Unfortunately, we can't continue to the W end of the slit because the mosaic has fill-in data there

**** Make a ratio map from f658n and f656n
#+BEGIN_SRC python :results silent
from astropy.io import fits
template = '/Users/will/Dropbox/JorgeBowshocks/HST/mosaicf{}-fixw-align.fits'

nii, = fits.open(template.format(658))
ha, = fits.open(template.format(656))
tnii = nii.header['EXPTIME']
tha = ha.header['EXPTIME']
nii.data *= tha/(tnii*ha.data)
nii.writeto('wfpc2-mosaic-f658-over-f656.fits', clobber=True)
#+END_SRC

* DONE [2/2] Final tweaks to the zero level - fit 2D Chebyshev
CLOSED: [2015-09-30 Wed 19:26]
:LOGBOOK:
CLOCK: [2015-09-29 Tue 09:16]--[2015-09-29 Tue 11:16] =>  2:00
:END:
+ Some spectra still have strangenesses in the background levels, especially the 2013 runs
+ Plan is to fit a 2D Chebyshev surface to the regions away from the lines
+ [X] First a pilot program that works on the calibrated spectra
  + 
+ [X] If that works, then incorporate it directly into the calibration process
  + Finally decided not to do this - we keep it as a separate step
  + Application to all the slits is [[id:41519B0D-E285-4BD1-929E-763BE12298F8][down here]]
  + Corrected spectra are saved to [[file:Calibrated/BGsub/]]


** Program to fit 2D Chebyshev to so-called continuum: chebfit2d.py 
:PROPERTIES:
:header-args: :tangle chebfit2d.py :comments link
:END:

Zeroth, the imports
#+BEGIN_SRC python
import sys
import numpy as np
from astropy.io import fits
from astropy.modeling import models, fitting
#+END_SRC

First the function to fit the background to the data 
#+BEGIN_SRC python

def fit_background(data, mask, npx=4, npy=4):
    """Fit a polynomial surface to all elements of a 2D `data` array where
the corresponding `mask` is True.  Return the fit evaluated at each
point of the original data array.

    """
    assert data.shape == mask.shape
    ny, nx = data.shape
    # y = np.arange(ny).reshape((ny,1))
    # x = np.arange(nx).reshape((1,nx))
    y, x = np.mgrid[:ny, :nx]
    p_init = models.Chebyshev2D(x_degree=npx, y_degree=npy)
    fit_p = fitting.LevMarLSQFitter()
    p = fit_p(p_init, x[mask], y[mask], data[mask])
    return p(x, y)
#+END_SRC

Second, how to set the mask for the BG fitting:
+ Region strategy (harder)
  1. We need to be outside a given wavelength range
  2. At this level of precision, heliocentric correction is unnecessary
     - WRONG, we do need helio correction
     - We also need to avoid stars
+ Threshold strategy (easy)
  1. Just set mask true when intensity is below a certain amount
  2. That's it!
     - Threshold intensity of 0.001 looks like it might work
     - Possible problem is that it might give a downward bias if noise > threshold
     - Or could give upward bias if signal < threshold
     - Hopefully they will cancel out
+ Now I have decided we need to use both
  + The threshold strategy to distinguish high velocity knots from the noise
  + But then also the region strategy to ensure we do not go to close to the line core, even if it is noisy
  + For this we use an excluded velocity window of -10 to +40 in Vhel
#+BEGIN_SRC python
from astropy.wcs import WCS
from astropy import units as u
from helio_utils import vels2waves

def find_mask_for_hdu(hdu, threshold=0.001, v1=-100.0, v2=100.0):
    mask = hdu.data < threshold

    # Cut out a window around line center
    w = WCS(hdu.header, key='A')
    waves = vels2waves([v1, v2], w.wcs.restwav, hdu.header)
    [i1, i2], _, _ = w.all_world2pix(waves, [0, 0], [0, 0], 0)
    i1, i2 = int(i1), int(i2) + 1
    mask[:, :, i1:i2] = False

    return mask
#+END_SRC

Third, a function to take a FITS file and fit the BG, saving both the BG and the BG-subtracted data

#+BEGIN_SRC python
  def estimate_pixel_noise(data, size=50):
      # Slices for each corner of the image and one in the middle somewhere
      lo, hi, mid = slice(None, 50), slice(-50, None), slice(300, 350)
      corners = [data[lo, lo], data[lo, hi],
                 data[hi, lo], data[hi, hi],
                 data[mid, lo], data[mid, hi]]
      sigmas = [np.nanstd(corner) for corner in corners]
      means = [np.nanmean(corner) for corner in corners]
      sigma = np.nanmedian(sigmas)
      mean = np.nanmedian(means)
      print('Corner sigmas:', sigmas, 'Median =', sigma)
      print('Corner means:', means, 'Median =', mean)
      return sigma

  def remove_bg(filename, olddir='Calibrated/', newdir='Calibrated/BGsub/'):
      assert olddir in filename
      hdu = fits.open(filename)[0]      # always use first HDU in file


      sigma = estimate_pixel_noise(hdu.data[0])
      mask = find_mask_for_hdu(hdu, threshold=2*sigma)
      if '2015-02-0003-nii' in filename:
          # Low order of x-polynomial for this one
          bg = fit_background(hdu.data[0], mask[0], npx=1, npy=4)
      else:
          # FITS data is 3d, so take 2d slice for fitting...
          bg = fit_background(hdu.data[0], mask[0])
      # ...and then add back 3rd dimension
      bg = bg[None, :, :]

      # Save BG-subtracted data
      hdu.data -= bg
      subfilename = filename.replace(olddir, newdir)
      hdu.writeto(subfilename, clobber=True)

      # And save fitted BG itself
      hdu.data = bg
      bgfilename = subfilename.replace('.fits', '-bg.fits')
      hdu.writeto(bgfilename, clobber=True)

      # And save the mask
      hdu.data = mask.astype(float)
      maskfilename = subfilename.replace('.fits', '-mask.fits')
      hdu.writeto(maskfilename, clobber=True)

#+END_SRC

Fourth, read a file from the command line if called interactively

#+BEGIN_SRC python
if __name__ == '__main__':
    try:
        fn = sys.argv[1]
    except:
        print('Usage:', sys.argv[0], 'FITSFILE')
        sys.exit()

    remove_bg(fn)
#+END_SRC

** Test the chebyshev fitting
#+BEGIN_SRC sh :results silent
mkdir -p Calibrated/BGsub
#+END_SRC

#+BEGIN_SRC sh :results verbatim
python chebfit2d.py Calibrated/2015-02-0003-ha.fits # 1>&2
#+END_SRC

#+RESULTS:
: Corner sigmas: [0.0092039052, 0.009207556, 0.0060184905, 0.0061931033, 0.0081476336, 0.0079773115] Median = 0.00806247
: Corner means: [0.00040226532, 0.0058213449, -0.00010916856, 0.0014264929, 0.00077906274, 0.0030811126] Median = 0.00110278

#+BEGIN_SRC sh :results verbatim
python chebfit2d.py Calibrated/2007-oiii-059-oiii.fits
#+END_SRC

#+RESULTS:
: Corner sigmas: [0.0048541185, 0.0050180876, 0.0051069264, 0.0055564386, 0.0049691969, 0.0052101794] Median = 0.00506251
: Corner means: [0.00043441783, -0.00016663372, 0.00039929626, -0.00039510179, 0.00037490504, -0.00026487189] Median = 0.000104136



#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/Calibrated/BGsub/2010-01-236-nii.fits
xpaset -p ds9 zoom to fit frame
#+END_SRC

Note that 2015-02-0003 is a pathological case because we have no BG to right of line, so we can't stop the polynomial from blowing up there.  One solution would be to reflect the line profile. 


** Apply to all the slits
:PROPERTIES:
:ID:       41519B0D-E285-4BD1-929E-763BE12298F8
:END:
+ At the same time, we will change wavelength to Vhel in the FITS headers
+ And we could try and add pixel coordinates for the output image array too. 

#+BEGIN_SRC python :exports code
import glob
import chebfit2d

filenames = glob.glob('Calibrated/*.fits')

for fn in filenames:
    chebfit2d.remove_bg(fn)

#+END_SRC

#+RESULTS:
#+begin_example
Corner sigmas: [0.0014632043, 0.0014105592, 0.0013509666, 0.001325192, 0.0054909131, 0.007089389] Median = 0.00143688
Corner means: [-0.00022139779, -0.00044154807, -0.00031040475, -0.0008519371, -0.0019082779, -0.0030134178] Median = -0.000646743
Corner sigmas: [0.001477215, 0.0010485579, 0.0013697137, 0.0010426297, 0.0014074636, 0.0012496385] Median = 0.00130968
Corner means: [7.5210693e-05, -0.00023023813, -7.1173003e-05, -1.4033735e-05, -5.5818164e-05, 9.2550945e-05] Median = -3.49259e-05
Corner sigmas: [0.00072271761, 0.00078956556, 0.000650478, 0.00075349346, 0.001487357, 0.0016568818] Median = 0.00077153
Corner means: [-0.00023395955, -0.00053457916, -0.00035804117, -0.0010272692, -0.00082681084, -0.0014288132] Median = -0.000680695
Corner sigmas: [0.00083920668, 0.00078511244, 0.00072703441, 0.00065560237, 0.00087804772, 0.0011650173] Median = 0.00081216
Corner means: [-2.76802e-05, -2.8529686e-05, -4.8832208e-06, -1.4298194e-05, -0.00024860929, 0.00020439758] Median = -2.09892e-05
Corner sigmas: [0.0006635703, 0.00075121038, 0.00061689626, 0.00069903373, 0.00058791629, 0.00062494806] Median = 0.000644259
Corner means: [-0.00019852414, -0.00057919609, -0.00034293777, -0.0009423481, -0.00019772716, -0.00076135364] Median = -0.000461067
Corner sigmas: [0.00078200555, 0.00073513377, 0.00067009195, 0.00061699579, 0.00065414998, 0.00062729226] Median = 0.000662121
Corner means: [-2.2748036e-05, -7.6759672e-05, 9.1613201e-06, -1.3556039e-05, -2.7325354e-05, 7.980549e-05] Median = -1.8152e-05
Corner sigmas: [0.0011682139, 0.0012034801, 0.00099312956, 0.0010720264, 0.00093744247, 0.00097204029] Median = 0.00103258
Corner means: [-0.00025582375, -0.00069190777, -0.00036907248, -0.0010608289, -0.00022261136, -0.00083643629] Median = -0.00053049
Corner sigmas: [0.0011638883, 0.0011593443, 0.0010889119, 0.0009894867, 0.00099008996, 0.00093192898] Median = 0.0010395
Corner means: [-9.336507e-06, -0.00013354659, 3.2520453e-05, -6.3618019e-05, -4.277916e-05, 3.0424133e-05] Median = -2.60578e-05
Corner sigmas: [0.0011595117, 0.0012386816, 0.0010741194, 0.0011856057, 0.0010313789, 0.0010744163] Median = 0.00111696
Corner means: [-0.00022985968, -0.0007155051, -0.00032630438, -0.0011197362, -0.00019674523, -0.00091327459] Median = -0.000520905
Corner sigmas: [0.0012797932, 0.001238024, 0.0012510912, 0.0011137044, 0.0011515305, 0.0010474956] Median = 0.00119478
Corner means: [-1.1999592e-05, -0.0001932092, 2.8919837e-06, -3.3244996e-06, 1.090752e-05, 4.9467428e-05] Median = -2.16258e-07
Corner sigmas: [0.00088304386, 0.00097924541, 0.00081425463, 0.00090450334, 0.00072619057, 0.00081700983] Median = 0.000850027
Corner means: [-0.00015872429, -0.00053924479, -0.00030596403, -0.0010041599, -0.00013632135, -0.00075196056] Median = -0.000422604
Corner sigmas: [0.001016896, 0.00092923763, 0.00091537088, 0.00083540403, 0.00085828803, 0.00077318115] Median = 0.000886829
Corner means: [3.7233128e-06, -7.3361778e-05, -9.9717799e-06, -4.0335606e-05, -1.6350534e-05, 1.3966051e-05] Median = -1.31612e-05
Corner sigmas: [0.0015200629, 0.0015965189, 0.0014699502, 0.0015655953, 0.0013151465, 0.0013928429] Median = 0.00149501
Corner means: [-0.00036867292, -0.00081092282, -0.00060055265, -0.0010993329, -0.00043962308, -0.00073171908] Median = -0.000666136
Corner sigmas: [0.0017489973, 0.0015863283, 0.0016368513, 0.0014544198, 0.0015160213, 0.001370392] Median = 0.00155117
Corner means: [2.2922646e-05, 1.7644123e-05, -6.7741662e-06, -1.3886724e-05, -3.8076763e-05, 0.00013304994] Median = 5.43498e-06
Corner sigmas: [0.0013834093, 0.001452985, 0.0013676074, 0.001441716, 0.0012012061, 0.001320699] Median = 0.00137551
Corner means: [-0.00017844823, -0.00072771305, -0.00038970343, -0.00094421423, -0.00021771884, -0.00062920799] Median = -0.000509456
Corner sigmas: [0.00159153, 0.0013980719, 0.001502256, 0.0013701505, 0.0013793012, 0.0012508844] Median = 0.00138869
Corner means: [-6.1142375e-05, -0.00010717578, 6.5474545e-05, -0.00013272645, 3.0503556e-05, 1.7631086e-05] Median = -2.17556e-05
Corner sigmas: [0.0016242558, 0.001737855, 0.0015695565, 0.0016559031, 0.0013968691, 0.0014584544] Median = 0.00159691
Corner means: [-0.00012511411, -0.00065409573, -0.00030645312, -0.0010393198, -0.00012346031, -0.00081927719] Median = -0.000480274
Corner sigmas: [0.0018572584, 0.0016607478, 0.0018039469, 0.0015721746, 0.0016105383, 0.0014679766] Median = 0.00163564
Corner means: [2.2210002e-06, -0.0001239196, -9.5691088e-05, -9.079856e-05, -2.1481206e-05, 9.4267867e-05] Median = -5.61399e-05
Corner sigmas: [0.0013246336, 0.001392733, 0.0012930587, 0.0014074196, 0.0012486369, 0.0012522758] Median = 0.00130885
Corner means: [-0.0002111124, -0.00056961586, -0.0003947365, -0.0010225606, -0.00027800389, -0.00078600313] Median = -0.000482176
Corner sigmas: [0.0014808178, 0.0014185515, 0.0014397042, 0.0012891508, 0.0013087397, 0.0011637113] Median = 0.00136365
Corner means: [4.7245621e-06, 6.3654961e-06, -2.5301797e-05, -5.6661986e-05, 5.6150497e-05, 7.7060315e-05] Median = 5.54503e-06
Corner sigmas: [0.004129454, 0.0043157865, 0.0044114557, 0.0046192664, 0.0037959008, 0.003928713] Median = 0.00422262
Corner means: [-0.00014612763, -0.00065525738, -0.00073436095, -0.0014701067, -0.00016968744, -0.0010622484] Median = -0.000694809
Corner sigmas: [0.0049439352, 0.0042481935, 0.0050284956, 0.0045039188, 0.0041755936, 0.0036310325] Median = 0.00437606
Corner means: [0.00011957669, -7.8610945e-05, -5.5650871e-05, -0.00061950483, 0.00021766048, 3.5578847e-05] Median = -1.0036e-05
Corner sigmas: [0.0010327154, 0.0011671452, 0.001811725, 0.0023419, 0.0013304272, 0.0015990793] Median = 0.00146475
Corner means: [-9.5025287e-05, -0.00047717581, -0.0018048437, -0.0033827224, -0.00079670287, -0.0021091339] Median = -0.00130077
Corner sigmas: [0.0011287276, 0.0012392439, 0.0012817082, 0.0012675013, 0.0011744292, 0.0012163526] Median = 0.0012278
Corner means: [0.00011638243, -0.00038977657, 0.00058033125, -0.0018881225, 0.00046012754, -0.0014388263] Median = -0.000136697
Corner sigmas: [0.0010173647, 0.0011044998, 0.0017385072, 0.0022021479, 0.0013583227, 0.0015458603] Median = 0.00145209
Corner means: [-0.00013277237, -0.00046296162, -0.0015786301, -0.0028251866, -0.00069425022, -0.0020745639] Median = -0.00113644
Corner sigmas: [0.0011396817, 0.0011554033, 0.0012661768, 0.0012739009, 0.0011914551, 0.0011779225] Median = 0.00118469
Corner means: [7.5176809e-05, -0.00014700349, 0.00061758637, -0.0017225933, 0.00044644976, -0.0015451227] Median = -3.59133e-05
Corner sigmas: [0.0010959147, 0.0012205699, 0.0017974571, 0.002280768, 0.0013703355, 0.0016211389] Median = 0.00149574
Corner means: [-0.0001750361, -0.00042779659, -0.0020072162, -0.0029797403, -0.00097526674, -0.0019980147] Median = -0.00148664
Corner sigmas: [0.0011515605, 0.0013166739, 0.0011804608, 0.0011514768, 0.001129727, 0.001069466] Median = 0.00115152
Corner means: [7.3121955e-05, -0.00037098702, 0.00053600274, -0.0016879833, 0.00042407532, -0.0014757987] Median = -0.000148933
Corner sigmas: [0.00066328666, 0.00065836048, 0.011868647, 0.0024225332, 0.00055661675, 0.00058611465] Median = 0.000660824
Corner means: [-0.00014124914, -0.00036231457, -0.00046634287, -0.0002324372, -0.00018464884, -0.00051269395] Median = -0.000297376
Corner sigmas: [0.00066569302, 0.00065347296, 0.00055259879, 0.00052675465, 0.00057547318, 0.00053468649] Median = 0.000564036
Corner means: [6.676538e-05, 2.0214527e-06, 8.1052312e-05, -0.00022498693, 1.6659169e-05, -0.00021987638] Median = 9.34031e-06
Corner sigmas: [0.00066614384, 0.00067159807, 0.0005923445, 0.00065081229, 0.00055623031, 0.00058915874] Median = 0.000621578
Corner means: [-7.7686396e-05, -0.00031713463, -0.00029847599, -0.00066117308, -0.00020778766, -0.00047816924] Median = -0.000307805
Corner sigmas: [0.00064836652, 0.00070810487, 0.00057409937, 0.00055057724, 0.00055406499, 0.00055657054] Median = 0.000565335
Corner means: [1.8816803e-05, 4.4476245e-05, 0.00011022736, -0.00023445778, 7.6075128e-05, -0.00024297624] Median = 3.16465e-05
Corner sigmas: [0.00078389817, 0.00071056263, 0.00066345005, 0.00066934898, 0.00065695337, 0.00067069579] Median = 0.000670022
Corner means: [-0.00015260564, -0.00038408494, -0.00037072515, -0.00061755866, -0.00027250461, -0.00053376216] Median = -0.000377405
Corner sigmas: [0.00069997471, 0.00071769784, 0.00061456702, 0.00059750944, 0.00063714402, 0.00056536007] Median = 0.000625856
Corner means: [2.8867229e-05, 0.00019872005, 9.6854914e-05, -0.00022099767, 1.2417205e-05, -0.0002630052] Median = 2.06422e-05
Corner sigmas: [0.00067101989, 0.00065885036, 0.00057539536, 0.00062469346, 0.00057039253, 0.00058897503] Median = 0.000606834
Corner means: [-0.00010340227, -0.0003120676, -0.00029166994, -0.00060125318, -0.0002156409, -0.00052879209] Median = -0.000301869
Corner sigmas: [0.00066117867, 0.00069785921, 0.00056631101, 0.00053035759, 0.00057033857, 0.00053860975] Median = 0.000568325
Corner means: [-1.1290185e-06, 0.00010500813, 9.0039066e-05, -0.00024126086, 5.919981e-05, -0.0002650042] Median = 2.90354e-05
Corner sigmas: [0.00062760373, 0.00065205345, 0.00060712488, 0.00066129613, 0.00058021728, 0.00058611046] Median = 0.000617364
Corner means: [-9.3577408e-05, -0.00032560309, -0.00029802541, -0.00067015382, -0.00019098283, -0.0004832905] Median = -0.000311814
Corner sigmas: [0.00064203009, 0.00073199003, 0.00055046717, 0.00057592243, 0.00057484972, 0.00053997495] Median = 0.000575386
Corner means: [3.193906e-05, 0.00011596334, 8.639523e-05, -0.00025596033, 2.4088835e-05, -0.00021734639] Median = 2.80139e-05
Corner sigmas: [0.00066422939, 0.00069107168, 0.00057371595, 0.0006155445, 0.00056956819, 0.0006004977] Median = 0.000608021
Corner means: [-7.3566487e-05, -0.00032703247, -0.00029325148, -0.0005803582, -0.00015863606, -0.00041452018] Median = -0.000310142
Corner sigmas: [0.00062992063, 0.00076161936, 0.00056420499, 0.00054483197, 0.00059964141, 0.00054765277] Median = 0.000581923
Corner means: [2.1580492e-05, 4.366439e-05, 0.00010518797, -0.00019669332, 4.0274994e-05, -0.00030888067] Median = 3.09277e-05
Corner sigmas: [0.00075754634, 0.00073964399, 0.00064389087, 0.00068888254, 0.00065647106, 0.00066779641] Median = 0.00067834
Corner means: [-0.00011409037, -0.00036590235, -0.00030422449, -0.00058157166, -0.00019776204, -0.00040570306] Median = -0.000335063
Corner sigmas: [0.00074551551, 0.00079343974, 0.00061451358, 0.00062755792, 0.00065314135, 0.00060712907] Median = 0.00064035
Corner means: [6.277144e-05, 0.00012994627, 0.00012557342, -0.00022822563, 5.3461386e-05, -0.00030958772] Median = 5.81164e-05
Corner sigmas: [0.0010457417, 0.0010061655, 0.00095146924, 0.0009730279, 0.00088660239, 0.00095435156] Median = 0.00096369
Corner means: [-5.7668476e-05, -0.00016784866, -0.00039885449, -0.00092796917, -0.00018158223, -0.00078935095] Median = -0.000290218
Corner sigmas: [0.0010579269, 0.0010432497, 0.00093684276, 0.00089188525, 0.00094233698, 0.00088524533] Median = 0.00093959
Corner means: [6.4463638e-05, -4.8044105e-05, 0.00013267937, -0.00038139409, 0.00020117554, -0.00042691021] Median = 8.20977e-06
Corner sigmas: [0.0013960929, 0.0013638498, 0.0016642972, 0.0017184722, 0.0014991637, 0.0015272525] Median = 0.00151321
Corner means: [-7.2869341e-05, -0.0001254193, -0.00056378992, -0.0010789403, -0.00030189939, -0.00096083363] Median = -0.000432845
Corner sigmas: [0.0014708571, 0.0013820303, 0.0016326439, 0.0015505562, 0.0015219137, 0.0014279246] Median = 0.00149639
Corner means: [3.9169179e-05, 0.00011820068, 0.00014074196, -0.00050397549, 0.00015590337, -0.00039220127] Median = 7.86849e-05
Corner sigmas: [0.0015615419, 0.0015183418, 0.0016783425, 0.0016447714, 0.0015598637, 0.0014468842] Median = 0.0015607
Corner means: [-5.0335264e-05, 1.3481858e-05, -0.00048072671, -0.0010559749, -0.00025614852, -0.0006940015] Median = -0.000368438
Corner sigmas: [0.0016327503, 0.001611946, 0.0016800556, 0.0016243506, 0.0016382851, 0.0014441879] Median = 0.00162855
Corner means: [9.8969933e-05, -0.00014721093, 0.00013154959, -0.00051117805, 0.00013587087, -0.00047916098] Median = -2.41205e-05
Corner sigmas: [0.00094031257, 0.00088066689, 0.00098206953, 0.0010247189, 0.00092857354, 0.00092635484] Median = 0.000934443
Corner means: [-0.00012668328, -0.00021121799, -0.00051460002, -0.0010194668, -0.00026243902, -0.00078381016] Median = -0.00038852
Corner sigmas: [0.0009986501, 0.0009792971, 0.00095310807, 0.00090320973, 0.00093285763, 0.00083050522] Median = 0.000942983
Corner means: [6.5728367e-05, -0.00016465299, 3.5030742e-05, -0.0005378559, 8.8739704e-05, -0.00046915398] Median = -6.48111e-05
Corner sigmas: [0.0014542526, 0.001363298, 0.0012792657, 0.0013388679, 0.0013234779, 0.0013608211] Median = 0.00134984
Corner means: [-0.00013949261, -0.00014828007, -0.00038671866, -0.00089074404, -0.00017082418, -0.0006087693] Median = -0.000278771
Corner sigmas: [0.0014498059, 0.0014721053, 0.0013346514, 0.0012576705, 0.0013656971, 0.0012976395] Median = 0.00135017
Corner means: [-8.328353e-06, -0.00031891803, 7.849597e-05, -0.00049212569, 0.00014653189, -0.00046172351] Median = -0.000163623
Corner sigmas: [0.0045012766, 0.0041926759, 0.0050141918, 0.0049378807, 0.0045350417, 0.0044186744] Median = 0.00451816
Corner means: [0.00011395147, -1.7880006e-05, -0.00060619781, -0.0012419955, -0.00016931375, -0.00088184112] Median = -0.000387756
Corner sigmas: [0.0047562402, 0.0044593099, 0.00530473, 0.0053617619, 0.0049201804, 0.0045728767] Median = 0.00483821
Corner means: [-2.9902101e-06, -0.00054412708, 0.00014499719, -0.0010466006, 0.00026719572, -0.00030514202] Median = -0.000154066
Corner sigmas: [0.0030148197, 0.0030096711, 0.0031862217, 0.0031337563, 0.0028638453, 0.0028372225] Median = 0.00301225
Corner means: [-9.9653073e-05, -0.00038797213, -0.00062641699, -0.00091738137, -0.00028572799, -0.00074279611] Median = -0.000507195
Corner sigmas: [0.0032574327, 0.0030093102, 0.0032697825, 0.0032733453, 0.0029851282, 0.0028022903] Median = 0.00313337
Corner means: [3.1648728e-05, -0.00039374598, -1.3923228e-05, -0.00057757902, 0.00014127622, -0.00038414277] Median = -0.000199033
Corner sigmas: [0.00089243217, 0.00088755781, 0.00083530706, 0.00088114338, 0.00076178805, 0.00083513843] Median = 0.000858225
Corner means: [-7.670965e-05, -7.1730035e-05, -0.00048931473, -0.00082076556, -0.0001777142, -0.00056009745] Median = -0.000333514
Corner sigmas: [0.00094242289, 0.0010703806, 0.00081524858, 0.00076698902, 0.0008165302, 0.00078199734] Median = 0.000815889
Corner means: [2.9082355e-05, -0.00033403229, 4.1332481e-05, -0.0004349183, 4.231319e-05, -0.00038197645] Median = -0.000152475
Corner sigmas: [0.00081437407, 0.00077617384, 0.000782597, 0.00082832103, 0.00072706229, 0.00078981306] Median = 0.000786205
Corner means: [-5.0729901e-05, -8.9232519e-05, -0.00054078776, -0.00093781779, -0.00026920313, -0.00070282898] Median = -0.000404995
Corner sigmas: [0.00084152649, 0.00085601833, 0.00074721681, 0.00068737718, 0.00070684112, 0.00066337193] Median = 0.000727029
Corner means: [5.3956799e-05, -0.00016388868, 1.6556045e-05, -0.00047992705, 6.407265e-05, -0.00040341844] Median = -7.36663e-05
Corner sigmas: [0.0010287594, 0.0009934624, 0.00067037938, 0.000733122, 0.00070183753, 0.00071570685] Median = 0.000724414
Corner means: [-5.5359949e-05, -0.00017056301, -0.00047016336, -0.00078477635, -0.00029489998, -0.00059511454] Median = -0.000382532
Corner sigmas: [0.00087284861, 0.00077065092, 0.00063531904, 0.0006196762, 0.00069609383, 0.0006181713] Median = 0.000665706
Corner means: [4.0301013e-05, -0.00025773293, 4.8651986e-05, -0.00042069206, 7.5064185e-05, -0.00039505991] Median = -0.000108716
Corner sigmas: [0.00075330038, 0.00074352598, 0.00074780267, 0.00079028722, 0.00068217504, 0.00070443866] Median = 0.000745664
Corner means: [-9.3859446e-05, -8.9558678e-05, -0.00044680166, -0.00079312793, -0.00024419272, -0.00058300572] Median = -0.000345497
Corner sigmas: [0.00078053406, 0.00081415876, 0.00071501243, 0.00070233759, 0.00068675127, 0.0006455977] Median = 0.000708675
Corner means: [5.2689189e-05, -0.00019825516, 2.7381593e-05, -0.00049753464, 7.7082339e-05, -0.00037763407] Median = -8.54368e-05
Corner sigmas: [0.00083584304, 0.00082280097, 0.00071524212, 0.00075399695, 0.00067248417, 0.00073438388] Median = 0.00074419
Corner means: [-9.1008391e-05, -0.00027068885, -0.00045534401, -0.00078317145, -0.00023901381, -0.00057320431] Median = -0.000363016
Corner sigmas: [0.00088335603, 0.00081210257, 0.0007004097, 0.00066573429, 0.00069375319, 0.00064953382] Median = 0.000697081
Corner means: [1.8192814e-05, -0.00038113471, 6.7869863e-05, -0.00049095851, 9.0033849e-05, -0.0004537066] Median = -0.000181471
Corner sigmas: [0.00086503616, 0.00082840462, 0.00073538389, 0.00078683277, 0.00071963074, 0.0007289052] Median = 0.000761108
Corner means: [-0.00013692111, -0.00021085277, -0.0004235607, -0.0008249018, -0.00023325527, -0.00059029419] Median = -0.000328408
Corner sigmas: [0.00089284545, 0.00085062115, 0.00072714122, 0.00067769166, 0.00072394358, 0.00068965327] Median = 0.000725542
Corner means: [2.0707819e-05, -0.00037997006, 6.766431e-05, -0.00046326226, 9.0941416e-05, -0.00041102982] Median = -0.000179631
Corner sigmas: [0.0010959129, 0.0010650513, 0.00096137659, 0.001022986, 0.00093360781, 0.00093407999] Median = 0.000992181
Corner means: [-0.00011522261, -0.00021806527, -0.0004322817, -0.00070845394, -0.0002539095, -0.00063227484] Median = -0.000343096
Corner sigmas: [0.0011705005, 0.0010440218, 0.0010344966, 0.00096547935, 0.00097297016, 0.00091149949] Median = 0.00100373
Corner means: [3.5742862e-05, -0.00022112607, 6.5073655e-05, -0.00052863301, 8.37603e-05, -0.00038878547] Median = -9.26916e-05
Corner sigmas: [0.0013383111, 0.0012839476, 0.0011957082, 0.0012189015, 0.0011609, 0.0011577947] Median = 0.0012073
Corner means: [-0.00022056761, -0.00032175204, -0.00051421224, -0.00068594713, -0.00022659457, -0.0006104717] Median = -0.000417982
Corner sigmas: [0.0013324401, 0.0013456919, 0.0011758643, 0.0011335051, 0.0012047305, 0.001117893] Median = 0.0011903
Corner means: [-1.2880589e-05, -0.00019781048, 0.00010543914, -0.00051073811, 7.81665e-05, -0.00049608812] Median = -0.000105346
Corner sigmas: [0.0015453452, 0.0015510061, 0.0017123102, 0.0017713284, 0.0015579951, 0.0015440922] Median = 0.0015545
Corner means: [-0.00011421633, -0.00030598746, -0.0006275723, -0.0010536907, -0.00029693751, -0.00071669975] Median = -0.00046678
Corner sigmas: [0.00164473, 0.0016747798, 0.0017955222, 0.0017526787, 0.0015924186, 0.0014658913] Median = 0.00165975
Corner means: [6.7989233e-05, -0.00040441981, 8.3155719e-05, -0.00059453316, 0.00016079805, -0.0004193265] Median = -0.000168215
Corner sigmas: [0.0010221195, 0.0010112462, 0.00087494048, 0.00091060728, 0.00083403068, 0.0008849969] Median = 0.000897802
Corner means: [-0.00013775616, -0.00029292412, -0.00037572425, -0.000597868, -0.00022195243, -0.0005390321] Median = -0.000334324
Corner sigmas: [0.0010917905, 0.0010064885, 0.00088062114, 0.00084406091, 0.00091190432, 0.00080062391] Median = 0.000896263
Corner means: [-1.1891968e-05, -0.00021250274, 0.00010299115, -0.00039394002, 0.00010791192, -0.00041249351] Median = -0.000112197
Corner sigmas: [0.0011301525, 0.0011368834, 0.0019931684, 0.0021822136, 0.0014244401, 0.0014683274] Median = 0.00144638
Corner means: [-0.00036348088, -0.00026257054, -0.00066400459, 5.6379176e-05, -0.00025404969, -0.00024439269] Median = -0.00025831
Corner sigmas: [0.0011527579, 0.0011227496, 0.0020534133, 0.0020929538, 0.0014186911, 0.0014103464] Median = 0.00141452
Corner means: [-0.00010472547, 7.7249912e-05, -0.00022952275, 0.00056045601, -6.9319824e-05, 9.8486817e-05] Median = 3.96504e-06
Corner sigmas: [0.00029635607, 0.00034921372, 0.0005349883, 0.00057719322, 0.00038297405, 0.00043000016] Median = 0.000406487
Corner means: [-0.00042992059, 0.00028281883, -0.00058044022, 0.00011411362, -0.00049867819, 7.3057832e-05] Median = -0.000178431
Corner sigmas: [0.00030561787, 0.00030757196, 0.00048349818, 0.00050506968, 0.00041540788, 0.00037469179] Median = 0.00039505
Corner means: [-0.00013860222, 3.2298733e-05, -0.00019205126, 1.5504691e-05, 2.0311814e-05, -8.1065758e-05] Median = -3.27805e-05
Corner sigmas: [0.0003512651, 0.00042255619, 0.0005741457, 0.00060422334, 0.00039676661, 0.00045451062] Median = 0.000438533
Corner means: [-0.00047240983, 0.00033506565, -0.0006119358, 0.00013850673, -0.00051029871, 0.00017553853] Median = -0.000166952
Corner sigmas: [0.00034745751, 0.00037090207, 0.00054849347, 0.00056056533, 0.00046634843, 0.00038708778] Median = 0.000426718
Corner means: [-0.00014553362, 4.5057059e-05, -0.00013709647, 3.717974e-05, 1.7810971e-05, -9.1279988e-05] Median = -3.67345e-05
Corner sigmas: [0.00049719121, 0.00059157214, 0.00040885908, 0.00046564493, 0.00037026303, 0.00044207386] Median = 0.000453859
Corner means: [-0.00051167852, 0.00058524398, -0.00046787396, 0.00017470772, -0.00051281758, 0.00034985831] Median = -0.000146583
Corner sigmas: [0.00051205599, 0.00050458475, 0.00038529784, 0.00039130397, 0.00039080204, 0.00036645762] Median = 0.000391053
Corner means: [-6.519493e-05, 0.00023364912, -8.3765495e-05, 0.00010283639, -4.8223537e-05, 0.00010212413] Median = 2.69503e-05
Corner sigmas: [0.00054094318, 0.00063710858, 0.00041806459, 0.00047725378, 0.00037954299, 0.00046092013] Median = 0.000469087
Corner means: [-0.00052718044, 0.00060214155, -0.00049251382, 0.00023339047, -0.00050861202, 0.00039638157] Median = -0.000129562
Corner sigmas: [0.00055641943, 0.00055278814, 0.00039137597, 0.00039210546, 0.00039201175, 0.00036979353] Median = 0.000392059
Corner means: [-6.4393418e-05, 0.00014800101, -8.1628874e-05, 5.6219516e-05, -2.6115989e-05, 3.1193835e-05] Median = 2.53892e-06
Corner sigmas: [0.00053017243, 0.00063370931, 0.00041136268, 0.00048378471, 0.00037478204, 0.00046219534] Median = 0.00047299
Corner means: [-0.00051704369, 0.00057480746, -0.00046451873, 0.00021511641, -0.00051215634, 0.00035127014] Median = -0.000124701
Corner sigmas: [0.0005551934, 0.00055437523, 0.00038987814, 0.00040004952, 0.0004125821, 0.00039215505] Median = 0.000406316
Corner means: [-8.9536552e-05, 0.00011627167, -0.00010336177, 4.7697526e-05, -5.3637265e-05, -5.4445786e-06] Median = -2.95409e-05
Corner sigmas: [0.00058293663, 0.00067342946, 0.00038156085, 0.00045671072, 0.00039886433, 0.0004985382] Median = 0.000477624
Corner means: [-0.00045746498, 0.00053943205, -0.000385858, 0.0002244451, -0.00042006694, 0.00032677097] Median = -8.07064e-05
Corner sigmas: [0.0005864604, 0.00058784895, 0.00038318115, 0.0003874322, 0.00045471056, 0.00043447132] Median = 0.000444591
Corner means: [-0.00017690394, 0.00024281058, -0.00011750382, 6.7654502e-05, -3.1260606e-05, 1.3610565e-05] Median = -8.82502e-06
Corner sigmas: [0.00057294214, 0.00069546909, 0.00040007327, 0.00049290701, 0.00041826465, 0.00051434018] Median = 0.000503624
Corner means: [-0.00039704365, 0.00056648749, -0.0003703355, 0.00026691536, -0.00034729004, 0.00034304996] Median = -4.01873e-05
Corner sigmas: [0.0005886876, 0.00061862252, 0.00039386784, 0.00039862847, 0.00048321305, 0.00042674161] Median = 0.000454977
Corner means: [-0.00021241557, 0.00033818427, -0.00015385916, 0.00012375649, -3.9501687e-05, 0.00011532065] Median = 3.79095e-05
Corner sigmas: [0.00037152256, 0.00043839615, 0.00041329901, 0.00045220653, 0.00035532194, 0.00043683124] Median = 0.000425065
Corner means: [-0.0004726222, 0.00036671862, -0.0003874473, 0.00016958029, -0.00046054693, 0.00021374805] Median = -0.000108934
Corner sigmas: [0.00039037567, 0.0003950267, 0.00039295183, 0.00041187057, 0.00041807181, 0.00035857843] Median = 0.000393989
Corner means: [-0.00013716324, 0.00012600848, -0.00010185715, 7.9259582e-05, -6.3934726e-06, -2.5637597e-05] Median = -1.60155e-05
Corner sigmas: [0.00034853793, 0.00043362027, 0.0004088874, 0.00045917503, 0.00035269166, 0.00041899565] Median = 0.000413942
Corner means: [-0.0005226247, 0.00037820116, -0.00044480653, 0.00016993632, -0.00042987551, 0.00023330495] Median = -0.00012997
Corner sigmas: [0.00035668962, 0.0003883508, 0.0003823631, 0.0003854465, 0.00042838804, 0.00035742682] Median = 0.000383905
Corner means: [-0.00018660021, 0.00012669037, -0.0001256339, 1.0196043e-05, 1.2891374e-05, -1.0116019e-05] Median = 4.00119e-08
Corner sigmas: [0.00035534875, 0.00044419963, 0.00038970431, 0.00044441732, 0.00035962346, 0.00042271335] Median = 0.000406209
Corner means: [-0.00047785859, 0.00038422708, -0.0004137331, 0.00014292153, -0.00037744563, 0.0001877428] Median = -0.000117262
Corner sigmas: [0.00034653378, 0.00037329225, 0.00036761144, 0.00038658624, 0.00045015928, 0.00037068763] Median = 0.00037199
Corner means: [-0.00018849611, 0.00013546291, -0.00012199521, 3.1526219e-05, 4.9444661e-05, -1.1587739e-07] Median = 1.57052e-05
Corner sigmas: [0.0060774712, 0.0060814465, 0.0065606833, 0.0068209195, 0.0060005477, 0.0063301693] Median = 0.00620581
Corner means: [-0.0016869542, 0.00093154213, -0.0046579782, 0.0028471716, -0.0031347657, 0.0017303257] Median = -0.000377706
Corner sigmas: [0.0063291756, 0.0061481842, 0.0065332814, 0.0064649251, 0.0062506315, 0.0062334831] Median = 0.0062899
Corner means: [0.001136796, 0.00018264214, -0.00067309808, 0.0016095387, -0.0003658811, 0.00081607659] Median = 0.000499359
Corner sigmas: [0.0044194269, 0.0045888843, 0.0050076889, 0.0054832073, 0.0045800651, 0.0047404263] Median = 0.00466466
Corner means: [-0.0018818676, 0.0014581964, -0.0054262429, 0.0030349698, -0.0033239578, 0.0021768434] Median = -0.000211836
Corner sigmas: [0.0049757035, 0.0046086712, 0.0048538116, 0.0050597815, 0.0046229567, 0.0046703443] Median = 0.00476208
Corner means: [0.00037112672, 2.4699521e-05, -0.00083896075, 0.0011512307, -0.00035002464, 0.00061351748] Median = 0.000197913
Corner sigmas: [0.0034165112, 0.0034361777, 0.0059658196, 0.0061849747, 0.0043477896, 0.0042072507] Median = 0.00427752
Corner means: [-0.0012610072, 0.0011567065, -0.0032699083, 0.0020381343, -0.0018649403, 0.0012607264] Median = -5.21503e-05
Corner sigmas: [0.0036122731, 0.0035067478, 0.0061228885, 0.0063227047, 0.0042966865, 0.0043844078] Median = 0.00434055
Corner means: [-0.00033124234, 0.00078338949, -0.001383053, 0.0016836716, -0.00050047063, 0.0011191271] Median = 0.000226074
Corner sigmas: [0.0027137785, 0.0028652013, 0.0047198087, 0.0087301228, 0.0034423894, 0.003854333] Median = 0.00364836
Corner means: [-0.0022946266, 0.0016849167, -0.019340402, 0.0080862446, -0.0045582922, 0.0029711174] Median = -0.000304855
Corner sigmas: [0.0035732936, 0.0028051778, 0.0059643509, 0.0041694967, 0.0035951524, 0.003519088] Median = 0.00358422
Corner means: [0.0016664, -0.0017687338, 0.00082664605, -0.00066754967, 4.6705667e-05, -0.00032093801] Median = -0.000137116
Corner sigmas: [0.0026228088, 0.0028023201, 0.0047576353, 0.0047660535, 0.0034305698, 0.0035306215] Median = 0.0034806
Corner means: [-0.0012776591, 0.0009597991, -0.0017905546, 0.0013969712, -0.0010496872, 0.00094267842] Median = -5.35044e-05
Corner sigmas: [0.0027222673, 0.0026854665, 0.0049737627, 0.0050453329, 0.0035741983, 0.0035533039] Median = 0.00356375
Corner means: [-0.00054970273, 0.00088218518, -0.001414789, 0.0017570927, -0.00062442548, 0.0007997182] Median = 0.000125008
Corner sigmas: [0.0092039052, 0.009207556, 0.0060184905, 0.0061931033, 0.0081476336, 0.0079773115] Median = 0.00806247
Corner means: [0.00040226532, 0.0058213449, -0.00010916856, 0.0014264929, 0.00077906274, 0.0030811126] Median = 0.00110278
Corner sigmas: [0.0095919324, 0.065035142, 0.0069335909, 0.0137373, 0.0084114615, 0.046582654] Median = 0.0116646
Corner means: [0.001345986, 0.045171965, 0.0006687186, 0.0071223769, 0.00086974876, 0.029719623] Median = 0.00423418
Corner sigmas: [0.0091026267, 0.0099795656, 0.0063255993, 0.0063358946, 0.007803794, 0.008754787] Median = 0.00827929
Corner means: [0.0030263963, 0.0015026566, -0.00019463028, 0.00036156073, 0.0011780935, 0.00049524114] Median = 0.000836667
Corner sigmas: [0.0097760605, 0.010024212, 0.0064586438, 0.0071481988, 0.008534261, 0.0087968186] Median = 0.00866554
Corner means: [-0.00078236189, -0.0012759629, -0.00054873351, -0.00066943339, -0.00057729223, -0.00089622138] Median = -0.000725898
#+end_example


* DONE Back-propagate the heliocentric velocities to the spectra
CLOSED: [2015-10-05 Mon 08:16]
+ This will allow better cross-referencing between the isovelocity images and the spectra
+ We will also try and add a better spatial coordinate WCS
  + One possibility would be to use the pixels of the output grid from the spectral maps

** Program to add a better wcs to the spectra: spec_augment_wcs.py
:PROPERTIES:
:header-args: :tangle spec_augment_wcs.py :comments link
:END:

The imports
#+BEGIN_SRC python
  import sys
  from astropy.io import fits
  from astropy import units as u
  from astropy.wcs import WCS
  from helio_utils import waves2vels
#+END_SRC


This is the WCS for the spectral maps, which is copied from down [[id:20ADFA6F-DE49-454E-B433-D684CF3FB826][here]]. The idea is that we can use this to define the spatial WCS for our slit spectrum that gives the corresponding pixel of the map. 
#+BEGIN_SRC python
def get_specmap_wcs():
    pixel_scale = 0.5               # arcsec
    NX, NY = 2048, 2048
    dRA, dDec = -pixel_scale/3600., pixel_scale/3600.
    RA0, Dec0 = 83.69, -5.429
    w = WCS(naxis=2)
    w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
    w.wcs.cdelt = [dRA, dDec]
    w.wcs.crval = [RA0, Dec0]
    w.wcs.ctype = ['RA---TAN', 'DEC--TAN']
    w.wcs.cunit = ['deg', 'deg']
    return w
#+END_SRC

Function to fix up a single fits file
#+BEGIN_SRC python
  def velocity_world2pix(wcs, vels, iaxis=0):
      """Convert velocities `vels` to pixels by hand using the CDELT, CRPIX
  and CRVAL from `wcs`.  The velocity axis in the wcs is given by
  `iaxis`

      """
      crval = wcs.wcs.crval[iaxis]
      crpix = wcs.wcs.crpix[iaxis]
      cdelt = wcs.wcs.cdelt[iaxis]
      cunit = wcs.wcs.cunit[iaxis]
      print('CRVAL, CRPIX, CDELT, CUNIT', crval, crpix, cdelt, cunit)
      pixels = crpix + (vels - crval)/cdelt
      # return fractional pixel coordinates on 0-based scale
      return pixels - 1

  def fix_up_some_new_wcs(filename, old_new=('.fits', '-vhel.fits')):
      hdu = fits.open(filename)[0]  # Always use first HDU in file
      # Start with the Wav, RA, Dec WCS
      wold = WCS(hdu.header, key='A')

      # This is where we will put the new stuff
      wnew = wold.deepcopy()

      # First do the velocity part
      wav0, dwav = wold.wcs.crval[0], wold.wcs.cdelt[0]
      vel0, vel1 = waves2vels([wav0, wav0 + dwav]*u.m,
                              wold.wcs.restwav*u.m, hdu.header)
      dvel = vel1 - vel0
      wnew.wcs.crval[0] = vel0.to('m/s').value
      wnew.wcs.cdelt[0] = dvel.to('m/s').value
      wnew.wcs.cunit[0] = u.m/u.s
      wnew.wcs.ctype[0] = 'VOPT'
      wnew.wcs.cname[0] = 'Heliocentric velocity'
      wnew.wcs.specsys = 'HELIOCEN'
      wnew.wcs.name = "VHELIO"

      # Now do the spatial part
      wim = get_specmap_wcs()
      RAs, Decs = wold.celestial.all_pix2world([0, 1, 0], [0, 0, 1], 0)
      # print('First two pixels RA and Dec:', RAs, Decs)
      [X0, X1, X2], [Y0, Y1, Y2] = wim.all_world2pix(RAs, Decs, 0)
      # print('First two pixels X and Y:', [X0, X1, X2], [Y0, Y1, Y2])
      wnew.wcs.crval[1:] = [X0, Y0]
      wnew.wcs.cdelt[1:] = [1., 1.]
      wnew.wcs.pc[1:, 1:] = [[X1 - X0, Y1 - Y0], [X2 - X0, Y2 - Y0]]
      wnew.wcs.ctype[1], wnew.wcs.ctype[2] = ['LINEAR']*2
      wnew.wcs.cname[1], wnew.wcs.cname[2] = ['X', 'Y']
      wnew.wcs.cunit[1], wnew.wcs.cunit[2] = [u.dimensionless_unscaled]*2

      # Cut off the velocity range in the data array to [-150..200] km/s
      wnew.fix()                  # Make sure we know it is in SI units
      print(wnew.sub([1]).wcs)
      vwindow = [-150, 200]*u.km/u.s
      print('Velocity window (m/s)', vwindow.to('m/s').value)
      [j1, j2] = velocity_world2pix(wnew, vwindow.to('m/s').value)
      view = slice(None), slice(None), slice(int(j1), int(j2) + 2)
      print('Pixel limits for slice', j1, j2)
      # Apply slice to data and to the WCS
      hdu.data = hdu.data[:, :, j1:j2]
      wnew = wnew.slice(view)
      wold = wold.slice(view)

      # Update header with a new WCS called V
      hdu.header.update(wnew.to_header(key='V'))
      # And re-write 'A' too since we have changed it
      hdu.header.update(wold.to_header(key='A'))

      # Now, sort out the default header

      # New blank wcs with only 2 dimensions
      wdef = WCS(naxis=2)
      # Copy over the velocity part 
      for k in 'crval', 'crpix', 'cdelt', 'cunit', 'ctype', 'cname':
          getattr(wdef.wcs, k)[0] = getattr(wnew.wcs, k)[0]
      wdef.wcs.pc[0, 0] = wnew.wcs.pc[0, 0]

      # Check for orientation
      slit_center = hdu.header['NAXIS2']/2
      if abs(wnew.wcs.pc[1, 1]) > abs(wnew.wcs.pc[1, 2]):
          # largely horizontal slit - use X-axis
          jslit = 1
          _, _, [Ycent] = wnew.all_pix2world([0], [slit_center], [0], 0) 
          wdef.wcs.name = 'YY{:04d}'.format(int(Ycent))
      else:
          # largely vertical slit - use Y-axis
          jslit = 2
          _, [Xcent], _ = wnew.all_pix2world([0], [slit_center], [0], 0) 
          wdef.wcs.name = 'XX{:04d}'.format(int(Xcent))

      # Copy over spatial part (X or Y, depending on orientation)
      for k in 'crval', 'crpix', 'cunit', 'ctype', 'cname':
          getattr(wdef.wcs, k)[1] = getattr(wnew.wcs, k)[jslit]
      # More intuitive to use CDELT instead of PC
      wdef.wcs.cdelt[1] = wnew.wcs.pc[1, jslit]

      # Update header with new default WCS
      hdu.header.update(wdef.to_header(key=' '))
      # Convert from m/s to km/s
      hdu.header['CUNIT1'] = 'km/s'
      hdu.header['CRVAL1'] /= 1000.
      hdu.header['CDELT1'] /= 1000.
      # Remove the pesky CD keywords
      for ij in '1_1', '1_2', '2_2', '1_1':
          if 'CD'+ij in hdu.header:
              hdu.header.remove('CD'+ij)

      # And flatten data array to 2-dimensions
      assert(len(hdu.data.shape) == 3)
      print('Original data array shape:', hdu.data.shape)
      hdu.data, = hdu.data
      print('New data array shape:', hdu.data.shape)

      # Write a new file 
      newfilename = filename.replace(*old_new).replace('BGsub/',
                                                       'BGsub/' + wdef.wcs.name + '-')
      print('Writing', newfilename)
      hdu.writeto(newfilename, clobber=True)
#+END_SRC


Read file from command line if called interactively

#+BEGIN_SRC python
if __name__ == '__main__':
    try:
        fn = sys.argv[1]
    except:
        print('Usage:', sys.argv[0], 'FITSFILE')
        sys.exit()

    fix_up_some_new_wcs(fn)
#+END_SRC

** Test the addition of the =V= WCS
#+BEGIN_SRC sh :results output verbatim
python spec_augment_wcs.py Calibrated/BGsub/2013-12-111-ha.fits
#+END_SRC

#+RESULTS:
: Writing Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits

#+BEGIN_SRC sh :results verbatim
xpaset -p test zoom 4 1
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
xpaset -p test fits $PWD/Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits
xpaset -p test zoom to fit
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results silent
open -n -a SAOImage\ DS9 --args -title test
#+END_SRC



** Add the VHEL and pixel WCS to all the spectra


#+BEGIN_SRC sh :results verbatim
for f in Calibrated/BGsub/*-{ha,nii}.fits; do
    python spec_augment_wcs.py $f
done
#+END_SRC

#+RESULTS:
#+begin_example
Writing Calibrated/BGsub/XX1162-2006-02-260-ha-vhel.fits
Writing Calibrated/BGsub/XX1166-2006-02-270-ha-vhel.fits
Writing Calibrated/BGsub/XX1170-2006-02-276-ha-vhel.fits
Writing Calibrated/BGsub/XX1176-2006-02-281-ha-vhel.fits
Writing Calibrated/BGsub/XX1180-2006-02-286-ha-vhel.fits
Writing Calibrated/BGsub/XX1182-2006-02-291-ha-vhel.fits
Writing Calibrated/BGsub/XX1189-2006-02-296-ha-vhel.fits
Writing Calibrated/BGsub/XX1197-2006-02-303-ha-vhel.fits
Writing Calibrated/BGsub/XX1259-2006-02-313-ha-vhel.fits
Writing Calibrated/BGsub/XX1156-2006-02-318-ha-vhel.fits
Writing Calibrated/BGsub/XX1150-2006-02-326-ha-vhel.fits
Writing Calibrated/BGsub/XX0430-2007-01-054-ha-vhel.fits
Writing Calibrated/BGsub/XX0443-2007-01-067-ha-vhel.fits
Writing Calibrated/BGsub/XX0447-2007-01-072-ha-vhel.fits
Writing Calibrated/BGsub/XX1154-2007-01b-2037-ha-vhel.fits
Writing Calibrated/BGsub/XX1189-2007-01b-2041-ha-vhel.fits
Writing Calibrated/BGsub/XX1204-2007-01b-2045-ha-vhel.fits
Writing Calibrated/BGsub/XX1218-2007-01b-2049-ha-vhel.fits
Writing Calibrated/BGsub/XX1232-2007-01b-2053-ha-vhel.fits
Writing Calibrated/BGsub/XX1251-2007-01b-2057-ha-vhel.fits
Writing Calibrated/BGsub/XX1141-2007-01b-2061-ha-vhel.fits
Writing Calibrated/BGsub/XX1389-2010-01-078-ha-vhel.fits
Writing Calibrated/BGsub/XX1540-2010-01-124-ha-vhel.fits
Writing Calibrated/BGsub/XX1558-2010-01-128-ha-vhel.fits
Writing Calibrated/BGsub/XX1557-2010-01-133-ha-vhel.fits
Writing Calibrated/BGsub/XX1575-2010-01-137-ha-vhel.fits
Writing Calibrated/BGsub/XX1595-2010-01-145-ha-vhel.fits
Writing Calibrated/BGsub/XX1616-2010-01-157-ha-vhel.fits
Writing Calibrated/BGsub/XX1523-2010-01-202-ha-vhel.fits
Writing Calibrated/BGsub/XX1549-2010-01-206-ha-vhel.fits
Writing Calibrated/BGsub/XX1568-2010-01-210-ha-vhel.fits
Writing Calibrated/BGsub/XX1585-2010-01-214-ha-vhel.fits
Writing Calibrated/BGsub/XX1609-2010-01-219-ha-vhel.fits
Writing Calibrated/BGsub/XX1620-2010-01-236-ha-vhel.fits
Writing Calibrated/BGsub/XX1633-2010-01-240-ha-vhel.fits
Writing Calibrated/BGsub/XX1646-2010-01-244-ha-vhel.fits
Writing Calibrated/BGsub/XX1601-2010-01-248-ha-vhel.fits
Writing Calibrated/BGsub/XX1656-2010-01-252-ha-vhel.fits
Writing Calibrated/BGsub/YY1401-2013-02-024-ha-vhel.fits
Writing Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits
Writing Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
Writing Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
Writing Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
Writing Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
Writing Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
Writing Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
Writing Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
Writing Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
Writing Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
Writing Calibrated/BGsub/YY1314-2013-12-086-ha-vhel.fits
Writing Calibrated/BGsub/YY1289-2013-12-090-ha-vhel.fits
Writing Calibrated/BGsub/YY1312-2013-12-102-ha-vhel.fits
Writing Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits
Writing Calibrated/BGsub/YY1287-2013-12-116-ha-vhel.fits
Writing Calibrated/BGsub/YY1308-2015-02-0003-ha-vhel.fits
Writing Calibrated/BGsub/YY1280-2015-02-0012-ha-vhel.fits
Writing Calibrated/BGsub/XX1162-2006-02-260-nii-vhel.fits
Writing Calibrated/BGsub/XX1166-2006-02-270-nii-vhel.fits
Writing Calibrated/BGsub/XX1170-2006-02-276-nii-vhel.fits
Writing Calibrated/BGsub/XX1176-2006-02-281-nii-vhel.fits
Writing Calibrated/BGsub/XX1180-2006-02-286-nii-vhel.fits
Writing Calibrated/BGsub/XX1182-2006-02-291-nii-vhel.fits
Writing Calibrated/BGsub/XX1189-2006-02-296-nii-vhel.fits
Writing Calibrated/BGsub/XX1197-2006-02-303-nii-vhel.fits
Writing Calibrated/BGsub/XX1259-2006-02-313-nii-vhel.fits
Writing Calibrated/BGsub/XX1156-2006-02-318-nii-vhel.fits
Writing Calibrated/BGsub/XX1150-2006-02-326-nii-vhel.fits
Writing Calibrated/BGsub/XX0430-2007-01-054-nii-vhel.fits
Writing Calibrated/BGsub/XX0443-2007-01-067-nii-vhel.fits
Writing Calibrated/BGsub/XX0447-2007-01-072-nii-vhel.fits
Writing Calibrated/BGsub/XX1154-2007-01b-2037-nii-vhel.fits
Writing Calibrated/BGsub/XX1189-2007-01b-2041-nii-vhel.fits
Writing Calibrated/BGsub/XX1204-2007-01b-2045-nii-vhel.fits
Writing Calibrated/BGsub/XX1218-2007-01b-2049-nii-vhel.fits
Writing Calibrated/BGsub/XX1232-2007-01b-2053-nii-vhel.fits
Writing Calibrated/BGsub/XX1251-2007-01b-2057-nii-vhel.fits
Writing Calibrated/BGsub/XX1141-2007-01b-2061-nii-vhel.fits
Writing Calibrated/BGsub/XX1389-2010-01-078-nii-vhel.fits
Writing Calibrated/BGsub/XX1540-2010-01-124-nii-vhel.fits
Writing Calibrated/BGsub/XX1558-2010-01-128-nii-vhel.fits
Writing Calibrated/BGsub/XX1557-2010-01-133-nii-vhel.fits
Writing Calibrated/BGsub/XX1575-2010-01-137-nii-vhel.fits
Writing Calibrated/BGsub/XX1595-2010-01-145-nii-vhel.fits
Writing Calibrated/BGsub/XX1616-2010-01-157-nii-vhel.fits
Writing Calibrated/BGsub/XX1523-2010-01-202-nii-vhel.fits
Writing Calibrated/BGsub/XX1549-2010-01-206-nii-vhel.fits
Writing Calibrated/BGsub/XX1568-2010-01-210-nii-vhel.fits
Writing Calibrated/BGsub/XX1585-2010-01-214-nii-vhel.fits
Writing Calibrated/BGsub/XX1609-2010-01-219-nii-vhel.fits
Writing Calibrated/BGsub/XX1620-2010-01-236-nii-vhel.fits
Writing Calibrated/BGsub/XX1633-2010-01-240-nii-vhel.fits
Writing Calibrated/BGsub/XX1646-2010-01-244-nii-vhel.fits
Writing Calibrated/BGsub/XX1601-2010-01-248-nii-vhel.fits
Writing Calibrated/BGsub/XX1656-2010-01-252-nii-vhel.fits
Writing Calibrated/BGsub/YY1401-2013-02-024-nii-vhel.fits
Writing Calibrated/BGsub/YY1120-2013-02-029-nii-vhel.fits
Writing Calibrated/BGsub/YY1112-2013-02-033-nii-vhel.fits
Writing Calibrated/BGsub/YY1058-2013-02-149-nii-vhel.fits
Writing Calibrated/BGsub/YY1068-2013-02-154-nii-vhel.fits
Writing Calibrated/BGsub/YY1085-2013-02-159-nii-vhel.fits
Writing Calibrated/BGsub/YY0936-2013-02-165-nii-vhel.fits
Writing Calibrated/BGsub/YY0955-2013-02-169-nii-vhel.fits
Writing Calibrated/BGsub/YY1019-2013-02-226-nii-vhel.fits
Writing Calibrated/BGsub/YY1000-2013-02-232-nii-vhel.fits
Writing Calibrated/BGsub/YY0971-2013-02-237-nii-vhel.fits
Writing Calibrated/BGsub/YY1314-2013-12-086-nii-vhel.fits
Writing Calibrated/BGsub/YY1289-2013-12-090-nii-vhel.fits
Writing Calibrated/BGsub/YY1312-2013-12-102-nii-vhel.fits
Writing Calibrated/BGsub/YY1295-2013-12-111-nii-vhel.fits
Writing Calibrated/BGsub/YY1287-2013-12-116-nii-vhel.fits
Writing Calibrated/BGsub/YY1308-2015-02-0003-nii-vhel.fits
Writing Calibrated/BGsub/YY1280-2015-02-0012-nii-vhel.fits
#+end_example

** Displaying the new calibrated spectra in DS9

*** Delete all exisiting frames
:PROPERTIES:
:ID:       795D79F6-A9F0-4E94-ADBD-18D540713A8C
:END:
#+BEGIN_SRC sh :results silent
xpaset -p ds9 frame delete all
#+END_SRC

#+name: new-blank-ds9
#+BEGIN_SRC sh :results silent :var DS9="ds9"
open -n -a SAOImage\ DS9 --args -title $DS9
sleep 3
xpaset -p $DS9 view buttons no
xpaset -p $DS9 frame delete all
#+END_SRC


*** General function for displaying a bunch of spectra

+ Passing glob patterns to shell scripts is really fraught.
+ I am reduced to using =find= instead

#+BEGIN_SRC sh :tangle display-vel-spectra.sh
  files=$(find $PWD/Calibrated/BGsub -name "$1-vhel.fits")
  ds9=${2:-ds9}
  regprefix=Will-Regions-2016-12/pvboxes-
  for path in $files; do
      f=${path##/*/} # just the filename
      if [ ${f:0:1} == "Y" ]; then
          orient=horizontal
      else
          orient=vertical
      fi
      xpaset -p $ds9 frame new
      xpaset -p $ds9 fits $path
      xpaset -p $ds9 zoom to 3 1
      xpaset -p $ds9 grid load $PWD/$orient-axes.grd
      xpaset -p $ds9 cmap bb
      xpaset -p $ds9 scale sqrt
      xpaset -p $ds9 scale limits -0.0003 0.05
      xpaset -p $ds9 contour no
      xpaset -p $ds9 contour method smooth
      xpaset -p $ds9 contour smooth 2
      xpaset -p $ds9 contour color blue
      xpaset -p $ds9 contour loadlevels $PWD/ha-contours.lev
      xpaset -p $ds9 contour yes

      regfile=${regprefix}$(basename $f .fits).reg
      if [ -f $regfile ]; then
          xpaset -p $ds9 region load $PWD/$regfile
      fi
  done
  xpaset -p $ds9 contour close
  xpaset -p $ds9 frame next
  xpaset -p $ds9 match frame wcs
  xpaset -p $ds9 lock frame wcs
#+END_SRC

#+name: test-sh-args
#+BEGIN_SRC sh :tangle test-sh-args.sh
files=$(find $PWD/Calibrated/BGsub -name "$1-vhel.fits")
regdir=Alba-Regions-2016-10/blue_knots_final-SLITS
for path in $files; do
    f=${path##/*/} # just the filename
    regfile=$regdir/$(basename $f .fits).reg
    ls -l $regfile
done
#+END_SRC

+ Testing contour setting
+ Important thing is to turn it off while fiddling, then turn it back on at the end
#+BEGIN_SRC sh
ds9=spectra
xpaset -p $ds9 contour no
xpaset -p $ds9 contour method smooth
xpaset -p $ds9 contour smooth 4
xpaset -p $ds9 contour color blue
xpaset -p $ds9 contour loadlevels $PWD/ha-contours.lev
xpaset -p $ds9 contour yes
#+END_SRC


*** Trying out the spectra display
:PROPERTIES:
:ID:       C3FBB765-77B5-47FA-B02C-E6DE1BE929A2
:END:
:LOGBOOK:
CLOCK: [2016-10-26 Wed 08:40]--[2016-10-26 Wed 13:40] =>  5:00
- Note taken on [2016-10-26 Wed 16:38] \\
  Updated to include the knot regions on each PV diagram
:END:
#+call: new-blank-ds9("maps") :results silent

**** Horizontal western slits
#+call: new-blank-ds9("ha-horiz") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh YY[01][019]*-ha ha-horiz
#+END_SRC

#+call: new-blank-ds9("nii-horiz") :results silent
#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh YY[01][019]*-nii nii-horiz
#+END_SRC

**** Vertical western slits
:PROPERTIES:
:ID:       EC8322FD-A18D-48FD-8538-7A507CC96DF7
:END:
#+call: new-blank-ds9("ha-vert") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX1[56]??-2010-01-*-ha ha-vert
#+END_SRC

#+call: new-blank-ds9("nii-vert") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX1[56]??-2010-01-*-nii nii-vert
#+END_SRC

**** LL2 vertical slits
Ha line

#+call: new-blank-ds9("ha-ll2") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX1[123]*-ha ha-ll2
#+END_SRC

#+call: new-blank-ds9("nii-ll2") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX1[123]*-nii nii-ll2
#+END_SRC

**** LL1 slits
#+call: new-blank-ds9("ha-ll1") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX0[45]*-ha ha-ll1
#+END_SRC

#+call: new-blank-ds9("nii-ll1") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh XX0[45]*-nii nii-ll1
#+END_SRC

**** More eastern horizontal slits

#+call: new-blank-ds9("ha-east") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh YY1[234]*-ha ha-east
#+END_SRC

#+call: new-blank-ds9("nii-east") :results silent

#+BEGIN_SRC sh :results silent
bash display-vel-spectra.sh YY1[234]*-nii nii-east
#+END_SRC


*** Testing passing glob patterns to a shell script
#+BEGIN_SRC sh :results verbatim
bash test-sh-args.sh YY[01][019]*-ha 2>&1
#+END_SRC

#+RESULTS:
#+begin_example
-rw-r--r--@ 1 will  staff  300 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0936-2013-02-165-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0955-2013-02-169-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0971-2013-02-237-ha-vhel.reg
-rw-r--r--@ 1 will  staff  299 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1000-2013-02-232-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1019-2013-02-226-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1058-2013-02-149-ha-vhel.reg
-rw-r--r--@ 1 will  staff  201 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1068-2013-02-154-ha-vhel.reg
-rw-r--r--@ 1 will  staff  101 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1085-2013-02-159-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1112-2013-02-033-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1120-2013-02-029-ha-vhel.reg
#+end_example

For debugging use =-x= option to bash and redirect stderr to stout
#+BEGIN_SRC sh :results verbatim
bash -x test-sh-args.sh YY[01][019]*-ha 2>&1
#+END_SRC

#+RESULTS:
#+begin_example
++ find /Users/will/Dropbox/OrionWest/Calibrated/BGsub -name 'YY[01][019]*-ha-vhel.fits'
+ files='/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits'
+ regdir=Alba-Regions-2016-10/blue_knots_final-SLITS
+ for path in '$files'
+ f=YY0936-2013-02-165-ha-vhel.fits
++ basename YY0936-2013-02-165-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY0936-2013-02-165-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY0936-2013-02-165-ha-vhel.reg
-rw-r--r--@ 1 will  staff  300 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0936-2013-02-165-ha-vhel.reg
+ for path in '$files'
+ f=YY0955-2013-02-169-ha-vhel.fits
++ basename YY0955-2013-02-169-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY0955-2013-02-169-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY0955-2013-02-169-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0955-2013-02-169-ha-vhel.reg
+ for path in '$files'
+ f=YY0971-2013-02-237-ha-vhel.fits
++ basename YY0971-2013-02-237-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY0971-2013-02-237-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY0971-2013-02-237-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:51 Alba-Regions-2016-10/blue_knots_final-SLITS/YY0971-2013-02-237-ha-vhel.reg
+ for path in '$files'
+ f=YY1000-2013-02-232-ha-vhel.fits
++ basename YY1000-2013-02-232-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1000-2013-02-232-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1000-2013-02-232-ha-vhel.reg
-rw-r--r--@ 1 will  staff  299 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1000-2013-02-232-ha-vhel.reg
+ for path in '$files'
+ f=YY1019-2013-02-226-ha-vhel.fits
++ basename YY1019-2013-02-226-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1019-2013-02-226-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1019-2013-02-226-ha-vhel.reg
-rw-r--r--@ 1 will  staff  301 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1019-2013-02-226-ha-vhel.reg
+ for path in '$files'
+ f=YY1058-2013-02-149-ha-vhel.fits
++ basename YY1058-2013-02-149-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1058-2013-02-149-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1058-2013-02-149-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1058-2013-02-149-ha-vhel.reg
+ for path in '$files'
+ f=YY1068-2013-02-154-ha-vhel.fits
++ basename YY1068-2013-02-154-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1068-2013-02-154-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1068-2013-02-154-ha-vhel.reg
-rw-r--r--@ 1 will  staff  201 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1068-2013-02-154-ha-vhel.reg
+ for path in '$files'
+ f=YY1085-2013-02-159-ha-vhel.fits
++ basename YY1085-2013-02-159-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1085-2013-02-159-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1085-2013-02-159-ha-vhel.reg
-rw-r--r--@ 1 will  staff  101 Oct 25 19:52 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1085-2013-02-159-ha-vhel.reg
+ for path in '$files'
+ f=YY1112-2013-02-033-ha-vhel.fits
++ basename YY1112-2013-02-033-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1112-2013-02-033-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1112-2013-02-033-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1112-2013-02-033-ha-vhel.reg
+ for path in '$files'
+ f=YY1120-2013-02-029-ha-vhel.fits
++ basename YY1120-2013-02-029-ha-vhel.fits .fits
+ regfile=Alba-Regions-2016-10/blue_knots_final-SLITS/YY1120-2013-02-029-ha-vhel.reg
+ ls -l Alba-Regions-2016-10/blue_knots_final-SLITS/YY1120-2013-02-029-ha-vhel.reg
-rw-r--r--@ 1 will  staff  251 Oct 25 19:50 Alba-Regions-2016-10/blue_knots_final-SLITS/YY1120-2013-02-029-ha-vhel.reg
#+end_example




*** Earlier stuff
Western vertical slits
#+BEGIN_SRC sh :results silent
for f in $PWD/Calibrated/BGsub/XX1[56]??-2010-01-*-ha-vhel.fits; do
    xpaset -p ds9 frame new
    xpaset -p ds9 fits $f
done
xpaset -p ds9 zoom to fit
xpaset -p ds9 match frame wcs
#+END_SRC

Western horizontal slits
#+BEGIN_SRC sh :results silent
for f in $PWD/Calibrated/BGsub/YY{09,10,11}*-nii-vhel.fits; do
    xpaset -p ds9 frame new
    xpaset -p ds9 fits $f
    xpaset -p ds9 zoom to 3 1
    xpaset -p ds9 grid load $PWD/horizontal-axes.grd
    xpaset -p ds9 cmap bb
    xpaset -p ds9 scale limits -0.0003 0.05
    xpaset -p ds9 contour loadlevels $PWD/ha-contours.lev
    xpaset -p ds9 contour yes
    xpaset -p ds9 contour color blue
done
xpaset -p ds9 match frame wcs
#+END_SRC

#+BEGIN_SRC sh
xpaget ds9 cmap
#+END_SRC

#+RESULTS:
: bb

* TODO New version of spectral map
** Convert wavelengths to velocities
:PROPERTIES:
:header-args: :tangle wavs2vels.py :comments link
:END:
+ The main difficulty here is calculating the heliocentric correction
  + I had to install pyslalib from github
  + The observatory ID for the SPM 2m telescope is 'SANPM83'

*** Module to find heliocentric correction: helio_utils.py
:PROPERTIES:
:header-args: :tangle helio_utils.py :comments link
:END:

#+BEGIN_SRC python
  import numpy as np
  from astropy.io import fits
  from astropy import coordinates as coord
  from astropy import units as u
  from astropy import constants as const
  from astropy.wcs import WCS
  from pyslalib.slalib import sla_dcs2c, sla_evp, sla_rverot, sla_obs

  OBSERVATORY_ALIASES = {
      'SPM': 'SANPM83',
      'VLT': 'VLT1',
  }

  def ra_dec_from_header(hdr):
      """This trusts the nominal RA, Dec given in the header"""
      ra = coord.Longitude(hdr['RA'], u.hour)
      dec = coord.Latitude(hdr['DEC'], u.deg)
      return ra, dec

  def ra_dec_from_header_wcs(hdr, wcskey):
      """This uses the RA, Dec of the WCS reference pixel"""
      w = WCS(hdr, key=wcskey).celestial
      ra = coord.Longitude(w.wcs.crval[0], u.deg)
      dec = coord.Latitude(w.wcs.crval[1], u.deg)
      return ra, dec

  def mjd_from_header(hdr):
      return float(hdr.get('MJD-OBS'))

  def obs_lat_from_name(observatory):
      if observatory in OBSERVATORY_ALIASES:
          obs_string = OBSERVATORY_ALIASES[observatory]
      else:
          obs_string = observatory
      obs_id, obs_name, obs_long, obs_lat, obs_height = sla_obs(0, obs_string)
      return coord.Latitude(obs_lat, u.radian)

  def st_from_header(hdr):
      if 'ST' in hdr:
          # SPM observations have ST measured in hours
          st = coord.Longitude(hdr['ST'], u.hour)
      elif 'LST' in hdr:
          # MUSE observations have LST measured in seconds
          st = coord.Longitude(hdr['LST'], u.hour)/3600.0
      else:
          return KeyError('Neither ST nor LST found in header')
      return st

  def helio_topo_from_header(hdr, usewcs=None, observatory='SPM'):
      if usewcs is None:
          ra, dec = ra_dec_from_header(hdr)
      else:
          # Set usewcs='' to use default WCS
          ra, dec = ra_dec_from_header_wcs(hdr, wcskey=usewcs)
      mjd = mjd_from_header(hdr)
      st = st_from_header(hdr)
      obs_lat = obs_lat_from_name(observatory)
      return helio_topo_correction(ra, dec, mjd, st, obs_lat)

  def helio_topo_correction(ra, dec, mjd, st, obs_lat):
      """Find radial velocity correction in km/s due to transformation
      between topocentric and heliocentric frame.  Positive when
      observatory is moving away from source in heliocentric frame.

      Parameters
      ----------
      ra : :class:`~astropy.coordinates.Longitude` 
          Right ascension of source
      dec : :class:`~astropy.coordinates.Latitude` 
          Declination of source
      mjd : float
          Modified Julian Date of observation
      st : :class:`~astropy.coordinates.Angle`
          Sideral Time of observation
      obs_lat : :class:`~astropy.coordinates.Latitude` 
          Latitude of observatory

      """
      return helio_geo_correction(ra, dec, mjd, st) + geo_topo_correction(ra, dec, st, obs_lat)

  def helio_geo_correction(ra, dec, mjd, st):
      """Motion of earth's center in heliocentric frame"""
      # line-of-sight unit vector to astronomical object
      k_los = sla_dcs2c(ra.radian, dec.radian)
      # Velocity and position of earth in barycentric and heliocentric frames
      # Units are AU and AU/s
      vel_bary, pos_bary, vel_hel, pos_hel = sla_evp(mjd, 2000.0)
      # Radial velocity correction (km/s) due to helio-geocentric transformation  
      # Positive when earth is moving away from object
      return u.AU.to(u.km, -np.dot(vel_hel, k_los))

  def geo_topo_correction(ra, dec, st, obs_lat):
      """Motion of telescope in geocentric frame"""
      return sla_rverot(obs_lat.radian, ra.radian, dec.radian, st.radian)


  LIGHT_SPEED_KMS = const.c.to('km/s').value
  def vels2waves(vels, restwav, hdr, usewcs=None, observatory='SPM'):
      """Heliocentric radial velocity (in km/s) to observed wavelength (in
      m, or whatever units restwav is in)

      """
      # Heliocentric correction
      vels = np.array(vels) + helio_topo_from_header(hdr, usewcs=usewcs,
                                                     observatory=observatory)
      waves = restwav*(1.0 + vels/LIGHT_SPEED_KMS)
      return waves


  def waves2vels(waves, restwav, hdr, usewcs=None, observatory='SPM'):
      """Observed wavelength to Heliocentric radial velocity (in km/s) 

      """
      vels = const.c*(waves - restwav)/restwav
      # Heliocentric correction
      vels -= helio_topo_from_header(hdr, usewcs=usewcs,
                                     observatory=observatory)*u.km/u.s

      return vels

#+END_SRC
*** Script to test obtaining heliocentric correction from spectrum headers
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: more-observational-parameters
#+BEGIN_SRC python :return outtab
import glob
from astropy.io import fits
from helio_utils import helio_topo_from_header
outtab = [['File', 'Date', 'JD', 'ST', 'RA', 'Dec', 'Helio'], None]
speclist = glob.glob('Calibrated/*-ha.fits')
for fn in speclist:
    hdr = fits.open(fn)[0].header
    id_ = fn.split('/')[-1].split('.')[0]
    outtab.append([id_, hdr.get('DATE-OBS'),
                   hdr.get('MJD-OBS') or hdr.get('JD'),
                   hdr.get('ST'), hdr.get('RA'), hdr.get('DEC'),
                   '{:.2f}'.format(helio_topo_from_header(hdr, usewcs='A'))
    ])
#+END_SRC

#+RESULTS: more-observational-parameters
| File             |       Date |      JD |         ST |         RA |        Dec | Helio |
|------------------+------------+---------+------------+------------+------------+-------|
| 2006-02-260-ha   | 2006-02-05 | 53771.0 |   03:42:12 |   05:34:53 |  -05:21:09 | 20.87 |
| 2006-02-270-ha   | 2006-02-05 | 53771.0 |   04:40:33 |   05:34:55 |  -05:21:11 | 20.97 |
| 2006-02-276-ha   | 2006-02-05 | 53771.0 |   05:15:29 |   05:34:56 |  -05:21:11 | 21.03 |
| 2006-02-281-ha   | 2006-02-05 | 53771.0 |   05:46:32 |   05:34:56 |  -05:21:11 | 21.08 |
| 2006-02-286-ha   | 2006-02-05 | 53771.0 |   06:18:13 |   05:34:57 |  -05:21:10 | 21.14 |
| 2006-02-291-ha   | 2006-02-05 | 53771.0 |   06:50:25 |   05:34:57 |  -05:21:10 | 21.19 |
| 2006-02-296-ha   | 2006-02-05 | 53771.0 |   07:21:26 |   05:34:58 |  -05:21:09 | 21.24 |
| 2006-02-303-ha   | 2006-02-05 | 53771.0 |   08:00:43 |   05:34:57 |  -05:21:06 | 21.30 |
| 2006-02-313-ha   | 2006-02-05 | 53771.0 |   08:50:24 |   05:34:56 |  -05:20:58 | 21.37 |
| 2006-02-318-ha   | 2006-02-05 | 53771.0 |   09:27:04 |   05:35:02 |  -05:20:47 | 21.40 |
| 2006-02-326-ha   | 2006-02-05 | 53771.0 |   09:57:26 |   05:35:04 |  -05:20:34 | 21.42 |
| 2007-01-054-ha   | 2007-01-10 | 54110.0 |   07:06:37 |   05:35:27 |  -05:24:59 | 11.87 |
| 2007-01-067-ha   | 2007-01-10 | 54110.0 |   08:42:40 |   05:35:29 |  -05:24:45 | 12.01 |
| 2007-01-072-ha   | 2007-01-10 | 54110.0 |   09:15:23 |   05:35:30 |  -05:24:37 | 12.05 |
| 2007-01b-2037-ha | 2007-01-13 | 54113.0 |   03:52:24 |   05:34:59 |  -05:21:44 | 12.83 |
| 2007-01b-2041-ha | 2007-01-13 | 54113.0 |   04:26:32 |   05:34:59 |  -05:21:45 | 12.89 |
| 2007-01b-2045-ha | 2007-01-13 | 54113.0 |   04:58:44 |   05:34:59 |  -05:21:46 | 12.95 |
| 2007-01b-2049-ha | 2007-01-13 | 54113.0 |   05:31:17 |   05:34:59 |  -05:21:46 | 13.00 |
| 2007-01b-2053-ha | 2007-01-13 | 54113.0 |   06:08:30 |   05:34:59 |  -05:21:25 | 13.07 |
| 2007-01b-2057-ha | 2007-01-13 | 54113.0 |   06:42:14 |   05:34:59 |  -05:21:24 | 13.13 |
| 2007-01b-2061-ha | 2007-01-13 | 54113.0 |   07:17:30 |   05:35:04 |  -05:21:23 | 13.18 |
| 2010-01-078-ha   | 2010-01-15 | 55211.0 |   06:52:49 | 05:35:07.3 |  -05:22:10 | 14.06 |
| 2010-01-124-ha   | 2010-01-16 | 55212.0 |   03:40:00 | 05:34:57.6 |  -05:24:10 | 14.13 |
| 2010-01-128-ha   | 2010-01-16 | 55212.0 |   04:12:20 | 05:34:58.1 |  -05:24:12 | 14.19 |
| 2010-01-133-ha   | 2010-01-16 | 55212.0 |   04:46:47 | 05:34:59.0 |  -05:23:54 | 14.24 |
| 2010-01-137-ha   | 2010-01-16 | 55212.0 |   05:16:29 | 05:34:59.4 |  -05:23:54 | 14.30 |
| 2010-01-145-ha   | 2010-01-16 | 55212.0 |   06:00:23 | 05:34:59.6 |  -05:23:51 | 14.37 |
| 2010-01-157-ha   | 2010-01-16 | 55212.0 |   07:18:44 | 05:35:00.3 |  -05:23:52 | 14.50 |
| 2010-01-202-ha   | 2010-01-17 | 55213.0 |   02:42:07 | 05:34:56.3 |  -05:23:19 | 14.44 |
| 2010-01-206-ha   | 2010-01-17 | 55213.0 |   03:11:47 | 05:34:56.5 |  -05:23:23 | 14.48 |
| 2010-01-210-ha   | 2010-01-17 | 55213.0 |   03:40:46 | 05:34:57.2 |  -05:23:27 | 14.53 |
| 2010-01-214-ha   | 2010-01-17 | 55213.0 |   04:11:15 | 05:34:57.5 |  -05:23:30 | 14.58 |
| 2010-01-219-ha   | 2010-01-17 | 55213.0 |   04:46:31 | 05:34:57.6 |  -05:23:34 | 14.64 |
| 2010-01-236-ha   | 2010-01-17 | 55213.0 |   06:31:24 | 05:34:59.7 |  -05:23:34 | 14.82 |
| 2010-01-240-ha   | 2010-01-17 | 55213.0 |   07:00:20 | 05:34:59.7 |  -05:23:33 | 14.86 |
| 2010-01-244-ha   | 2010-01-17 | 55213.0 |   07:29:14 | 05:34:59.6 |  -05:23:33 | 14.91 |
| 2010-01-248-ha   | 2010-01-17 | 55213.0 |   07:59:47 | 05:35:01.1 |  -05:23:29 | 14.95 |
| 2010-01-252-ha   | 2010-01-17 | 55213.0 |   08:29:45 | 05:34:59.7 |  -05:23:26 | 15.00 |
| 2013-02-024-ha   | 2013-02-16 | 56339.0 |   05:57:04 | 05:35:07.5 | -5:21:27.0 | 23.80 |
| 2013-02-029-ha   | 2013-02-16 | 56339.0 |   06:18:25 | 05:34:57.1 | -5:23:45.0 | 23.84 |
| 2013-02-033-ha   | 2013-02-16 | 56339.0 |   06:47:54 | 05:34:57.9 | -5:23:47.0 | 23.89 |
| 2013-02-149-ha   | 2013-02-18 | 56341.0 |   07:16:44 | 05:35:15.7 | -5:25:16.0 | 24.31 |
| 2013-02-154-ha   | 2013-02-18 | 56341.0 |   07:50:00 | 05:35:15.7 |  -5:25:8.0 | 24.36 |
| 2013-02-159-ha   | 2013-02-18 | 56341.0 |   08:20:58 | 05:35:15.9 | -5:24:55.0 | 24.40 |
| 2013-02-165-ha   | 2013-02-18 | 56341.0 |   08:59:40 | 05:35:14.4 |  -5:26:3.0 | 24.44 |
| 2013-02-169-ha   | 2013-02-18 | 56341.0 |   09:28:04 | 05:35:15.2 | -5:25:30.0 | 24.47 |
| 2013-02-226-ha   | 2013-02-19 | 56342.0 |   04:54:51 | 05:35:08.6 |  -5:25:7.0 | 24.24 |
| 2013-02-232-ha   | 2013-02-19 | 56342.0 |   05:16:09 | 05:35:11.5 | -5:25:17.0 | 24.28 |
| 2013-02-237-ha   | 2013-02-19 | 56342.0 |   05:48:30 | 05:35:12.2 | -5:25:30.0 | 24.33 |
| 2013-12-086-ha   | 2013-12-11 | 56637.0 |   06:04:43 | 05:35:43.1 | -5:22:47.0 | -1.59 |
| 2013-12-090-ha   | 2013-12-11 | 56637.0 |   06:15:11 | 05:35:43.2 | -5:22:49.0 | -1.57 |
| 2013-12-102-ha   | 2013-12-11 | 56637.0 |   07:25:18 | 05:35:37.0 | -5:22:39.0 | -1.44 |
| 2013-12-111-ha   | 2013-12-11 | 56637.0 |   08:13:33 | 05:35:48.4 | -5:22:41.0 | -1.39 |
| 2013-12-116-ha   | 2013-12-11 | 56637.0 |   08:49:55 | 05:35:28.9 | -5:22:39.0 | -1.30 |
| 2015-02-0003-ha  | 2015-02-03 | 57056.0 | 6:09:40.70 | 05:35:42.2 | -5:22:55.0 | 20.43 |
| 2015-02-0012-ha  | 2015-02-03 | 57056.0 | 6:57:37.56 | 05:35:42.9 |  -5:23:7.0 | 20.51 |

** Program to generate spectral map: spectral-map.py
:PROPERTIES:
:ID:       20ADFA6F-DE49-454E-B433-D684CF3FB826
:header-args: :tangle spectral-map.py :comments link
:END:
+ This based on previous versions for the [[id:23C29E96-4471-454E-A463-D365731119C0][vertical]] and [[id:60833550-A462-4F18-86DE-895625FF3E7A][horizontal]] slits
+ We will start off with bigger pixels and same pixel dims, so bigger area
+ It is much more general than the earlier versions since the spectra are already flux-calibrated and all the WCS info comes from the spectrum files themselves, instead of from tables
+ It is also much simpler and more efficient:
+ [2015-09-22 Tue] Now extracts a 7 Angstrom window around each line
+ [2015-09-23 Wed] Now cuts off vignetted sections at ends of slit

#+BEGIN_SRC python :results output
  import glob
  import sys
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.wcs.utils import pixel_to_skycoord, skycoord_to_pixel
  import astropy.units as u
  from helio_utils import helio_topo_from_header, vels2waves

  if len(sys.argv) == 3:
      line_id = sys.argv[1]
      vrange = sys.argv[2]
  elif len(sys.argv) == 2:
      line_id = sys.argv[1]
      vrange = None
  else:
      print('Usage: {} LINE_ID [VRANGE]'.format(sys.argv[0]))

  def waves2pixels(waves, w):
      n = len(waves)
      pixels, _, _ = w.all_world2pix(waves, [0]*n, [0]*n, 0)
      return pixels

  # First set up WCS for the output image
  #
  pixel_scale = 0.5               # arcsec
  NX, NY = 2048, 2048
  dRA, dDec = -pixel_scale/3600., pixel_scale/3600.
  RA0, Dec0 = 83.69, -5.429
  w = WCS(naxis=2)
  w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
  w.wcs.cdelt = [dRA, dDec]
  w.wcs.crval = [RA0, Dec0]
  w.wcs.ctype = ['RA---TAN', 'DEC--TAN']
  w.wcs.cunit = ['deg', 'deg']

  # Arrays to hold the output image
  outimage = np.zeros((NY, NX))
  outweights = np.zeros((NY, NX))

  slit_width = 2.0                # width in arcsec of 150 micron slit
  slit_pix_width = slit_width/pixel_scale

  speclist = glob.glob('Calibrated/BGsub/*-{}.fits'.format(line_id))

  # Window widths for line and BG
  dwline = 7.0*u.Angstrom

  # Limits of non-vignetted portion of the slit
  good_pixels = {
      '2006-02': (5, None),
      '2007-01': (10, None),
      '2010-01': (10, None),
      '2013-02': (None, -20),
      '2013-12': (None, -10),
      '2015-02-0003': (None, -80),
      '2015-02-0012': (None, -15),
  }

  for fn in speclist:
      print('Processing', fn)
      spechdu, = fits.open(fn)
      wspec = WCS(spechdu.header, key='A')

      # Trim to good portion of the slit
      goodslice = slice(None, None)
      for k, v in good_pixels.items():
          if k in fn:
              goodslice = slice(*v)

      # Find per-slit weight
      slit_weight = spechdu.header['WEIGHT']

      # Find sign of delta wavelength
      dwav = wspec.wcs.get_cdelt()[0]*wspec.wcs.get_pc()[0, 0]
      sgn = np.sign(dwav)         # Need to take slices backwards if this is negative

      # Eliminate degenerate 3rd dimension from data array and trim off bad bits
      spec2d = spechdu.data[0]

      # Rest wavelength from FITS header is in meters
      wavrest = wspec.wcs.restwav*u.m

      # Find wavelength limits for line extraction window
      if vrange is None:
          # Original case: use a window of wavelength full width dwline
          waves =  wavrest + np.array([-0.5, 0.5])*dwline
      else:
          # Extract velocity limits from the vrange command line argument
          # vrange should be of a form like '-100+100' or '+020+030'
          v1, v2 = float(vrange[:4]), float(vrange[-4:])
          print('Velocity window:', v1, 'to', v2)
          waves = vels2waves([v1, v2], wavrest,  spechdu.header)
      print('Wavelength window: {:.2f} to {:.2f}'.format(*waves.to(u.Angstrom)))

      # Find pixel indices for line extraction window
      i1, i2 = waves2pixels(waves, wspec)
      print('Pixel window:', i1, 'to', i2)

      # Extract profile for this wavelength or velocity window
      profile = spec2d[:, i1:i2:sgn].sum(axis=-1)

      # Find celestial coordinates for each pixel along the slit
      NS = len(profile)
      slit_coords = pixel_to_skycoord(range(NS), [0]*NS, wspec, 0)

      # Trim off bad parts of slit
      profile = profile[goodslice]
      slit_coords = slit_coords[goodslice]

      # Convert to pixel coordinates in output image
      xp, yp = skycoord_to_pixel(slit_coords, w, 0)

      for x, y, bright in zip(xp, yp, profile):
          # Find output pixels corresponding to corners of slit pixel
          # (approximate as square)
          i1 = int(0.5 + x - slit_pix_width/2)
          i2 = int(0.5 + x + slit_pix_width/2)
          j1 = int(0.5 + y - slit_pix_width/2)
          j2 = int(0.5 + y + slit_pix_width/2)
          # Make sure we don't go outside the output grid
          i1, i2 = max(0, i1), max(0, i2)
          i1, i2 = min(NX, i1), min(NX, i2)
          j1, j2 = max(0, j1), max(0, j2)
          j1, j2 = min(NY, j1), min(NY, j2)
          # Fill in the square
          outimage[j1:j2, i1:i2] += bright*slit_weight
          outweights[j1:j2, i1:i2] += slit_weight

  # Save everything as different images in a single fits file:
  # 1. The sum of the raw slits 
  # 2. The weights
  # 3. The slits normalized by the weights
  if vrange is None:
      label = line_id + '-allvels'
  else:
      label = line_id + vrange

  fits.HDUList([
      fits.PrimaryHDU(),
      fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
      fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
      fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
      ]).writeto('new-slits-{}.fits'.format(label), clobber=True)

#+END_SRC


** Run spectral-map.py for the nii or ha spectra
#+BEGIN_SRC sh :exports code :results verbatim
python spectral-map.py ha 
#+END_SRC

#+RESULTS:
#+begin_example
Processing Calibrated/2006-02-260-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-270-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-276-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-281-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-286-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-291-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-296-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-303-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-313-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-318-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2006-02-326-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 29.4842762305 to 189.47647283
Processing Calibrated/2007-01-054-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01-067-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01-072-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2037-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2041-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2045-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2049-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2053-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2057-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2007-01b-2061-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-078-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-124-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-128-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-133-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-137-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-145-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-157-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-202-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-206-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-210-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-214-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-219-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-236-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-240-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-244-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-248-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2010-01-252-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-024-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-029-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-033-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-149-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-154-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-159-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-165-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-169-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-226-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-232-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-02-237-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 52.3403043162 to 212.332500916
Processing Calibrated/2013-12-086-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 75.1963324019 to 235.188529002
Processing Calibrated/2013-12-090-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 75.1963324019 to 235.188529002
Processing Calibrated/2013-12-102-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 75.1963324019 to 235.188529002
Processing Calibrated/2013-12-111-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 75.1963324019 to 235.188529002
Processing Calibrated/2013-12-116-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 75.1963324019 to 235.188529002
Processing Calibrated/2015-02-0003-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 12.4518606084 to 134.322989897
Processing Calibrated/2015-02-0012-ha.fits
Wavelength window: 6559.29 Angstrom to 6566.29 Angstrom
Pixel window: 13.2364321915 to 135.385683307
#+end_example

#+BEGIN_SRC sh :exports code :results verbatim
python spectral-map.py nii 
#+END_SRC

#+RESULTS:
#+begin_example
Processing Calibrated/2006-02-260-nii.fits
Processing Calibrated/2006-02-270-nii.fits
Processing Calibrated/2006-02-276-nii.fits
Processing Calibrated/2006-02-281-nii.fits
Processing Calibrated/2006-02-286-nii.fits
Processing Calibrated/2006-02-291-nii.fits
Processing Calibrated/2006-02-296-nii.fits
Processing Calibrated/2006-02-303-nii.fits
Processing Calibrated/2006-02-313-nii.fits
Processing Calibrated/2006-02-318-nii.fits
Processing Calibrated/2006-02-326-nii.fits
Processing Calibrated/2007-01-054-nii.fits
Processing Calibrated/2007-01-067-nii.fits
Processing Calibrated/2007-01-072-nii.fits
Processing Calibrated/2007-01b-2037-nii.fits
Processing Calibrated/2007-01b-2041-nii.fits
Processing Calibrated/2007-01b-2045-nii.fits
Processing Calibrated/2007-01b-2049-nii.fits
Processing Calibrated/2007-01b-2053-nii.fits
Processing Calibrated/2007-01b-2057-nii.fits
Processing Calibrated/2007-01b-2061-nii.fits
Processing Calibrated/2010-01-078-nii.fits
Processing Calibrated/2010-01-124-nii.fits
Processing Calibrated/2010-01-128-nii.fits
Processing Calibrated/2010-01-133-nii.fits
Processing Calibrated/2010-01-137-nii.fits
Processing Calibrated/2010-01-145-nii.fits
Processing Calibrated/2010-01-157-nii.fits
Processing Calibrated/2010-01-202-nii.fits
Processing Calibrated/2010-01-206-nii.fits
Processing Calibrated/2010-01-210-nii.fits
Processing Calibrated/2010-01-214-nii.fits
Processing Calibrated/2010-01-219-nii.fits
Processing Calibrated/2010-01-236-nii.fits
Processing Calibrated/2010-01-240-nii.fits
Processing Calibrated/2010-01-244-nii.fits
Processing Calibrated/2010-01-248-nii.fits
Processing Calibrated/2010-01-252-nii.fits
Processing Calibrated/2013-02-024-nii.fits
Processing Calibrated/2013-02-029-nii.fits
Processing Calibrated/2013-02-033-nii.fits
Processing Calibrated/2013-02-149-nii.fits
Processing Calibrated/2013-02-154-nii.fits
Processing Calibrated/2013-02-159-nii.fits
Processing Calibrated/2013-02-165-nii.fits
Processing Calibrated/2013-02-169-nii.fits
Processing Calibrated/2013-02-226-nii.fits
Processing Calibrated/2013-02-232-nii.fits
Processing Calibrated/2013-02-237-nii.fits
Processing Calibrated/2013-12-086-nii.fits
Processing Calibrated/2013-12-090-nii.fits
Processing Calibrated/2013-12-102-nii.fits
Processing Calibrated/2013-12-111-nii.fits
Processing Calibrated/2013-12-116-nii.fits
Processing Calibrated/2015-02-0003-nii.fits
Processing Calibrated/2015-02-0012-nii.fits
#+end_example


#+BEGIN_SRC sh :results silent
  redranges='+030+050 +010+030 -010+010'
  # blueranges='-030-010 -050-030 -070-050'
  # farblueranges='-090-070 -110-090 -130-110'
  # for vrange in $redranges $blueranges $farblueranges; do
  for vrange in $redranges; do
      python spectral-map.py ha $vrange
      python spectral-map.py nii $vrange
  done
#+END_SRC

#+BEGIN_SRC sh :results silent
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050.fits[3]
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030.fits[3]
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010.fits[3]
#+END_SRC

Try three wide bands that cover the whole line
#+BEGIN_SRC sh :results silent
widebands='+000+060 -060+000 -120-060'
for vrange in $widebands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Some ranges further to the red
#+BEGIN_SRC sh :results silent
nearredranges='+050+070 +070+090 +090+110'
farredranges='+110+130 +130+150 +150+170'
for vrange in $nearredranges $farredranges ; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC


** Program to do multigridding of new spectral maps: multibin-map.py
:PROPERTIES:
:header-args: :tangle multibin-map.py :comments link
:ID:       EAE1FA1C-7D1B-484D-9B4A-FF42DE7D8594
:END:


#+BEGIN_SRC python
import sys
sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
from rebin_utils import downsample, oversample
from astropy.io import fits

nlist = [1, 2, 4, 8, 16, 32, 64]
mingoods = [2, 2, 2, 1, 1, 1, 2]

try: 
    infile = sys.argv[1]
except:
    print('Usage:', sys.argv[0], 'FITSFILE')
    sys.exit()

hdulist = fits.open(infile)
hdr = hdulist['scaled'].header
im = hdulist['scaled'].data
w = hdulist['weight'].data
m = w > 0.0

for n, mingood in zip(nlist, mingoods):
    im[~m] = 0.0
    outfile = infile.replace('.fits', '-bin{:03d}.fits'.format(n))
    print('Saving', outfile)
    # Save both the scaled image and the weights, but at the full resolution
    fits.HDUList([
        fits.PrimaryHDU(),
        fits.ImageHDU(data=oversample(im, n), header=hdr, name='scaled'),
        fits.ImageHDU(data=oversample(w, n), header=hdr, name='weight'),
    ]).writeto(outfile, clobber=True)
    # Now do the rebinning by a factor of two
    [im,], m, w = downsample([im,], m, weights=w, mingood=mingood)

#+END_SRC

** Perform the multigridding
#+BEGIN_SRC sh :results verbatim
python multibin-map.py new-slits-ha-allvels.fits
#+END_SRC

#+RESULTS:
: Saving new-slits-ha-allvels-bin001.fits
: Saving new-slits-ha-allvels-bin002.fits
: Saving new-slits-ha-allvels-bin004.fits
: Saving new-slits-ha-allvels-bin008.fits
: Saving new-slits-ha-allvels-bin016.fits
: Saving new-slits-ha-allvels-bin032.fits
: Saving new-slits-ha-allvels-bin064.fits

#+BEGIN_SRC sh :results verbatim
python multibin-map.py new-slits-nii-allvels.fits
#+END_SRC

#+RESULTS:
: Saving new-slits-nii-allvels-bin001.fits
: Saving new-slits-nii-allvels-bin002.fits
: Saving new-slits-nii-allvels-bin004.fits
: Saving new-slits-nii-allvels-bin008.fits
: Saving new-slits-nii-allvels-bin016.fits
: Saving new-slits-nii-allvels-bin032.fits
: Saving new-slits-nii-allvels-bin064.fits

#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/new-slits-ha-allvels-bin064.fits
#+END_SRC

#+BEGIN_SRC sh :results silent
redranges='+030+050 +010+030 -010+010'
blueranges='-030-010 -050-030 -070-050'
farblueranges='-090-070 -110-090 -130-110'
for vrange in $redranges $blueranges $farblueranges; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=bin004
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
widebands='+000+060 -060+000 -120-060'
for vrange in $widebands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC
#+BEGIN_SRC sh :results silent
nearredranges='+050+070 +070+090 +090+110'
farredranges='+110+130 +130+150 +150+170'
for vrange in $nearredranges $farredranges; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

** TODO Program to combine different grids: multibin-combine.py
:PROPERTIES:
:header-args: :tangle multibin-combine.py :comments link
:ID:       3796710F-B02D-47F2-9B7C-7FD0DEE62434
:END:
:LOGBOOK:
- Note taken on [2016-03-09 Wed 15:50] \\
  Reopened to clean up the masks
:END:

+ [2015-09-25 Fri] We set minweight = 0 for the coarsest grid so that the spatial coverage at that level does not depend on the line intensity, only on the arrangement of slits.  This is necessary so that all RGB channels have the same coverage when we combine them in a color image.
+ [2015-09-30 Wed] But this has the disadvantage that the high velocity channels where the intensity is very low often do not have enough signal, even in the coarsest bins - so we get noisy rubbish there
+ [2016-03-09 Wed] Now we have an extra optional argument, which we can set to 0.0 for core channels

#+BEGIN_SRC python
  import sys
  from astropy.io import fits
  import numpy as np
  sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
  from rebin_utils import oversample
  from skimage.morphology import square
  from skimage.filters.rank import modal


  def minify(a, n):
      return a[::n, ::n]


  ELEMENT = square(3)
  def cleanup_mask(mask, n):
      """Eliminate small islands in the mask"""
      m = minify(mask, n).astype(np.uint8)
      m = m & modal(m, ELEMENT)
      return oversample(m, n).astype(bool)


  try: 
      prefix, minw_scale = sys.argv[1], float(sys.argv[2])
  except:
      print('Usage:', sys.argv[0], 'FITSFILE_PREFIX MINIMUM_WEIGHT [COARSE_WEIGHT]')
      sys.exit()

  try:
      minw_coarse = float(sys.argv[3])
  except IndexError:
      minw_coarse = None

  nlist = [1, 2, 4, 8, 16, 32]
  minweights = [0.5, 1.0, 2.0, 4.0, 8.0, 8.0]
  if minw_coarse is not None:
      minweights[-1] = minw_coarse
  outim = np.zeros((2048, 2048))
  for n, minw in reversed(list(zip(nlist, minweights))):
      fn = '{}-bin{:03d}.fits'.format(prefix, n)
      hdulist = fits.open(fn)
      im = hdulist['scaled'].data
      hdr = hdulist['scaled'].header
      w = hdulist['weight'].data
      m = cleanup_mask(w*im >= minw*minw_scale, n)
      outim[m] = im[m]
  fits.PrimaryHDU(header=hdr, data=outim).writeto(prefix + '-multibin.fits', clobber=True)
#+END_SRC


** DONE Perform the combining
CLOSED: [2015-09-24 Thu 09:06]
#+BEGIN_SRC sh :results silent
python multibin-combine.py new-slits-ha-allvels 3e5
python multibin-combine.py new-slits-nii-allvels 2e5
#+END_SRC

#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/new-slits-nii-allvels-multibin.fits
#+END_SRC

*** Wide bands
#+BEGIN_SRC sh :results silent
vrange=+000+060               # wide red
python multibin-combine.py new-slits-ha$vrange 3e5
python multibin-combine.py new-slits-nii$vrange 3e4
vrange=-060+000              # wide green
python multibin-combine.py new-slits-ha$vrange 3e4
python multibin-combine.py new-slits-nii$vrange 2e4
vrange=-120-060               # wide blue
python multibin-combine.py new-slits-ha$vrange 3e3
python multibin-combine.py new-slits-nii$vrange 2e3
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+000+060-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-060+000-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-120-060-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+000+060-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-060+000-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-120-060-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Line core V = -10 to +50 km/s
#+BEGIN_SRC sh :results silent
redranges='+030+050 +010+030 -010+010'
for vrange in $redranges; do
    python multibin-combine.py new-slits-ha$vrange 4e4 0.0
    python multibin-combine.py new-slits-nii$vrange 4e3 0.0
done
#+END_SRC


#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Blue flank: V = -70 to -10 km/s
#+BEGIN_SRC sh :results silent
blueranges='-030-010 -050-030 -070-050'
for vrange in $blueranges; do
    python multibin-combine.py new-slits-ha$vrange 3e3
    python multibin-combine.py new-slits-nii$vrange 2e3
done
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-030-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-050-030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-070-050-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-030-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-050-030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-070-050-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Far blue wing: V = -110 to -70 km/s  
We actually calculate out to -130, but we don't use it in the image
#+BEGIN_SRC sh :results silent
farblueranges='-090-070 -110-090 -130-110'
for vrange in $farblueranges; do
    python multibin-combine.py new-slits-ha$vrange 1000
    python multibin-combine.py new-slits-nii$vrange 1000
done
#+END_SRC

Instead we overlap with the blue flank above.  The red channel here is the blue channel there
#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-070-050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-090-070-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-110-090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-070-050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-090-070-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-110-090-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


Or, we do use the furthest blue channel, so there is no overlap
#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-090-070-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-110-090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-130-110-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC



*** Near red flank: V = +50 to +110 km/s
#+BEGIN_SRC sh :results silent
nearredranges='+050+070 +070+090 +090+110'
for vrange in $nearredranges; do
    python multibin-combine.py new-slits-ha$vrange 3e3
    python multibin-combine.py new-slits-nii$vrange 1e3
done
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+090+110-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+070+090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+050+070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+090+110-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+070+090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+050+070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

*** Far red wing: V = +110 to +170 km/s
#+BEGIN_SRC sh :results silent
farredranges='+110+130 +130+150 +150+170'
for vrange in $farredranges; do
    python multibin-combine.py new-slits-ha$vrange 900
    python multibin-combine.py new-slits-nii$vrange 900
done
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+150+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+130+150-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+110+130-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+150+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+130+150-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+110+130-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC




** [2016-03-08 Tue] Repeat but for semi-wide bands
+ The core of the line is fine with 20 km/s wide bands
+ But for the blue side, it would be good to cover the entire range in 3 bands, rather than 5
+ Currently it is
  + Core :: +030+050 +010+030 -010+010
  + Near blue :: -030-010 -050-030 -070-050
  + Far blue :: -090-070 -110-090
+ So we want to cover the range -10 -> -110, although up to -100 would probably do
  + That is 3 bands of 30
  + -040-010 -070-040 -100-070
+ Or we can extend the bluest band
  + -040-010 -070-040 -120-070


First generate blue maps 
#+BEGIN_SRC sh :results silent
bands='-040-010 -070-040 -120-070'
for vrange in $bands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Second, red maps (40 km/s wide bands)
#+BEGIN_SRC sh :results silent
bands='+050+090 +090+130 +130+170'
for vrange in $bands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Then do binning

#+BEGIN_SRC sh :results silent
bands='-040-010 -070-040 -120-070'
for vrange in $bands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC
#+BEGIN_SRC sh :results silent
bands='+050+090 +090+130 +130+170'
for vrange in $bands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

And combine different bin levels

#+BEGIN_SRC sh :results silent
vrange=-040-010
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
vrange=-070-040
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
vrange=-120-070               
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
#+END_SRC

#+BEGIN_SRC sh :results silent
vrange=+050+090
python multibin-combine.py new-slits-ha$vrange 7e2 0.0
python multibin-combine.py new-slits-nii$vrange 3e2 0.0
vrange=+090+130
python multibin-combine.py new-slits-ha$vrange 6e2 0.0
python multibin-combine.py new-slits-nii$vrange 4e2 0.0
vrange=+130+170
python multibin-combine.py new-slits-ha$vrange 6e2 0.0
python multibin-combine.py new-slits-nii$vrange 4e2 0.0
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-040-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-070-040-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-120-070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-040-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-070-040-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-120-070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+130+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+090+130-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+050+090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh :results silent
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+130+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+090+130-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+050+090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

** DONE Calculate [N II]/Ha ratio and [N II] + Ha sum
CLOSED: [2015-09-23 Wed 13:41]
+ [2015-09-16 Wed] I suspect that much of the remaining issues with the spectra calibration are down to variations in throughput between [N II] and Ha
+ [X] We can use the O'Dell & Harris spectrophotometry to tie everything down
  + DS9 region file of the slits [[file:~/Work/RubinWFC3/Tsquared/odell-harris-slits.reg][odell-harris-slits.reg]]
  + Slit D North is the most useful since it is short and overlaps with the vertical 2010 slits
    + It has 6583/6563 = 1.1290/2.8905 = 0.39
    + Our slits there have a raw ratio of about 0.30
      + Correction factor of 1.3
    + But half the slits are obviously lower (what is different about these?)
  + Slit D NE overlaps with horizontal 2013-02 slits
    + It has 6583/6563 = 0.9779/2.8139 = 0.347
    + Our slits show a lot of variation along the length
    + Ranges from 0.25 to 0.35
      + Average correction factor = 1.16
  + Slit 27 W overlaps with horizontal 2013-02 slit
    + It has 6583/6563 = 1.2522/2.9002 = 0.432
    + We see some variation along the length
      + 0.33 at W end
      + 0.3 in middle
      + 0.2 at E end
    + Average correction factor = 1.44
    + This is hard to reconcile with the D north results
  + Slit 27 E
    + 1.0010/2.8700 = 0.35
    + The W end of this section overlaps with the E end of 2013-02 slits
      + where we have ratio = 0.17
      + Correction factor of 0.35/0.17 = 2.06 !!!
    + /but the OH slit is sampling a region where we have no data/
  + Slit D NW
    + Has its E end overlap with W end of 2013-02 slits
    + 1.3658/2.8894 = 0.473 so this is highest ratio yet
    + Our slits give 0.37 around there, and increasing westward
      + Correction factor ~= 0.473/0.37 = 1.28
  + Slit 12 W overlaps with our LL1 slits
    + Has ratio 0.2964/2.8906 = 0.10
    + Our slits have 0.1 there
      + Correction factor of unity?
    + But caution needed since brightest part of the 12 W slit is to the E where we have no data
  + Slit 9-mid overlaps with E end of our 2013-12 slits
    + It has ratio = 0.4899/2.8907 = 0.17
    + Our 2013-12 slits have 0.2 there
      + Correction factor = 0.85
  + Slit 9 W overlaps with middle of our 2013-12 slits
    + 0.4157/2.8907 = 0.14
    + Our 2013-12 slits have 0.313 there
      + Correction factor 0.45
      + This means there is a spurious spatial gradient in [N II]/Ha for the 2013-12 slits 
    + But the 2015 slits have ratio of 0.12 there
      + Correction factor 1.17
  + *Conclusions*
    + 

#+BEGIN_SRC python :results silent
from astropy.io import fits

ha = fits.open('new-slits-ha-allvels.fits')['scaled']
nii = fits.open('new-slits-nii-allvels.fits')['scaled']

ratio = nii.data/ha.data
sum_ = ha.data + 1.333*nii.data
nii.data = ratio
ha.data = sum_
nii.writeto('new-slits-nii-over-ha-allvels.fits', clobber=True)
ha.writeto('new-slits-nii-plus-ha-allvels.fits', clobber=True)

#+END_SRC

** Load the spectral map into ds9
This shows the scaled image in ds9
#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/new-slits-nii-allvels.fits[3]
#+END_SRC

#+BEGIN_SRC sh :results silent
xpaset -p ds9 fits $PWD/new-slits-nii-over-ha-allvels.fits
#+END_SRC


*** Revisited [2016-01-26 Tue]
:LOGBOOK:
CLOCK: [2016-01-26 Tue 09:20]--[2016-01-26 Tue 09:41] =>  0:21
:END:
+ Make a new DS9 app to show the maps
  #+call: new-blank-ds9("maps") :results silent
+ Copy the necessary files over to  hypatia
  + We needed =Bally-ACS/= and =wfi/= folders from =~/Work/OrionTreasury=
+ Restore the saved file [[file:velmaps-2015-10-16.bck]]
+ Where necessary load up the regions from [[file:blue-knots.reg]]




* Features seen in the isovelocity maps

** Point objects
+ 4410-139
  + Ha only
  + N of LL2
  + is it real?
  + blue shifted only
+ IX Ori - LL 2 - 
+ 4285-458
+ 


** The red bows
:LOGBOOK:
CLOCK: [2015-09-28 Mon 11:53]--[2015-09-29 Tue 09:16] => 21:23
:END:

*** Identification from imaging
I have marked 4 different bows in the region file [[file:red-bow-all.reg]]
+ Red Bow NE
  + This is the one that crosses LL2
+ Red Bow SW
  + This is the one that is just to E of the western "wall"
  + It is not so redshifted as the NE bow
+ Red Bow SE
  + This overlaps on the south wing of the SW bow
  + Best seen on horizontal slits
    + YY1000-2013-02-232 XX < 1250
    + YY0971-2013-02-237 XX < 1265
    + YY0955-2013-02-169 XX < 1254 - this is the strongest
    + YY0936-2013-02-165 XX < 1240 - on the S wing
  + Looks like peak is around V = +22 km/s
  + Also seen on far S end of LL2 vertical slits

+ Red Bow NW
  + This is on the W side of the western "wall"
  + This is identified from the isovel images - doesn't show up well on direct images

* T diagnostics from linewidths
+ We could repeat what we did for the Teresa Atlas Paper, but we only have one slit with [O III] spectrum
+ For the jet knots, assuming they are kinematically homogeneous, we should be able to measure the T from
+ Compact knot in slit spec166
  + FWHM in [N II] = 12.76 km/s
  + FWHM in Ha = 23.77 km/s
  + => thermal FWHM = sqrt((23.77**2 - 12.76**2) (14/13)) = 20.8 km/s
  + So basically 1e4 K, which is not surprising


* The big bowshock
+ There is a giant, possibly double, possibly triple bow
+ It's N wing crosses LL2, and is red-shifted
  + And has measured proper motion
+ The nose looks red-shifted too
+ It would be good to get proper motions of the nose



* Proper motions of the Orion West shocks 
+ [2015-08-26 Wed] Today I discovered that there is a new Massimo Robberto program that has re-observed the whole of Orion with the ACS F775W filter
+ And also various bits with the F130N and F139M WFC3 IR filters
+ This will allow us do to proper motion measurements of all the interesting shocks in our field
+ Relevant images are as follows:
  + JCOL02010 for ACS field W of LL2
  + JCOL09010 (ORIMOS-16) for ACS field just below that, containing the nose of the giant bowshock
  + JCOL03010 ACS includes LL2 and region immediately to W
  + ICOL22030 WFC3 IR image of region W of LL2
  + JCOL05010 ACS field of the big gap between trapezium and LL2
  + JCOL11010 ACS way S with filaments along extension of bright bar
+ Missing images

+ Older images that we might use
  + An [S II] WFPC2 image that covers the circular bubble to the S of LL2 plus the upper partial "nose" of the big bowshock: U8OC2604M from Bally's ACS program 9825
  + [X] We should actually get the entire set of these
    + [2015-08-27 Thu] Downloaded to =/fs/nil/other0/will/orion-bally-wfpc2-2004/=
  + There is a interesting bowshock seen in [S II] to the W of the end of HH269, but not quite as W as the flatter bow that we can see in Ha and NIR
    + RA: 05 34 59.81
    + Dec: -05 23 39.94
    + Image: U8OC1804M
  + This could be a candidate for the same flow as the big bowshock
  + We also need to look into possible correspondences with the molecular outflows from Orion S



* Old stuff on calibration
Most of the following has been superseded. 
** Dealing with the offset between image and spectrum
+ It seems that this is not as constant as I had hoped
  + In the [[id:8685D060-12A9-4E73-B069-11D5315ED8EB][vertical slits]] it varies from 52 to 60 pixels
  + And some slits do not have a reference star to use
+ One solution will be to compare the brightness profiles of the spectrum with that of the slit image
  + For the spectrum, we can sum in wavelength for the entire ha+nii range
  + For the image, we would sum a short width across the slit
+ Then we could either use the cross-correlation, or simple hunting, to find the best offset
+ At the same time, this would give the brightness factor between image and spec
  + We could use this to refine the brightness correction factors


*** Application to the vertical slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:ID:       0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B
:END:
#+name: vertical-image-and-fullspec
| image |    spec | islit | jshift |  fac |  bfac |
|-------+---------+-------+--------+------+-------|
|   202 | 203-204 | 233.6 |   52.5 |  3.9 | 1.143 |
|   124 | 125-127 | 235.5 |   54.5 |  2.7 | 1.431 |
|   206 | 207-208 | 234.6 |     54 |  4.4 | 1.136 |
|   128 | 129-130 | 237.5 |     57 |  4.4 | 2.688 |
|   133 | 134-135 | 239.4 |     58 |    5 | 1.608 |
|   210 | 211-212 | 236.4 |     55 |  4.4 | 1.021 |
|   137 | 138-139 | 241.3 |     60 |  2.8 | 1.550 |
|   214 | 215-216 | 238.4 |     55 |  4.1 | 1.067 |
|   145 | 146-147 | 244.3 |     58 |  2.0 | 5.181 |
|   248 | 249-250 | 254.9 |     68 |  5.4 | 2.400 |
|   219 | 220-221 | 240.0 |   57.5 | 4.35 |     1 |
|   157 | 158-159 | 252.2 |     65 |  7.0 | 6.757 |
|   236 | 237-238 | 247.0 |     63 |  4.2 | 1.122 |
|   240 | 241-242 | 249.5 |     65 |  3.1 | 1.073 |
|   244 | 245-246 | 251.6 |     64 |  2.7 | 1.147 |
|   252 | 253-254 | 258.2 |     69 |  5.4 | 1.678 |

+ Pixel positions of slits (islit in table above) also vary between positions, so I have had to measure all of these
  + They are FITS style 1-based indices
  + The slit width is about 4 pixels
  + But the slit center does not fall on an integer pixel
  + To be safe, we take the 5 pixels: [int(islit) - 3 : int(islit) + 3] 
+ First stab:
  + Read in the images and spectra, and overplot the profiles
  + There are 16 positions now, so we can use a 4 x 4 grid
  + The =bfac= factors are the inter-position image brightness correction factors, calculated [[id:D625BE5F-BE3F-477A-8059-4B0AFEFEED54][below]] - they multiply all the brightnesses
    + On the graphs, I print out =bright = 1/bfac=
    + [2015-08-25 Tue] I am modifying by hand the bfac for 248 from 2.222 to 2.4
      + There is no justification for this, other than that it looks too faint on the maps
  + The =fac= factors are the image-to-spectrum brightness factors - they multiply the image profile so that it matches the spectrum profile
    + So larger factors mean better spectra (compared to what is expected from the image)
    + The most common factor /should/ correspond to equal conditions between image and spectrum. But in general =fac= could be larger or smaller than this.
    + I am assuing that =fac = 4.4= is the default value, and dividing all of them by this when I print the info on the plot
      + There are 4 spectra that have the optimum value of =bfac=:
        + 206, 128, 210, 219
      + Most of the other values are lower
        + This make sense if conditions were deteriorating during the night
        + Then each spectrum is worse than its preceding image
      + But a few are higher, implying improvements since the image:
        + 133, 248, 157, 252
        + These tend to have high values of bfac

#+header: :var table=vertical-image-and-fullspec
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
sns.set_color_codes()

nspec = 12
ny = 512
figfile = 'image-spec-offsets.pdf'
yarray = np.arange(ny)
layout = {'left': 0.05, 'bottom': 0.07, 'right': 0.99, 'top': 0.95,
          'wspace': 0.02, 'hspace': 0.02}
fig, axgrid = plt.subplots(4, 4, sharex=True, sharey=True, gridspec_kw=layout)
tweak = 1.2
for (imid, specid, islit, jshift, factor, bfac), ax in zip(table, axgrid.flat):
    imfile = 'posiciones/spm{}-ardec.fits'.format(imid)
    specfile = 'spm{}h.fits'.format(specid)
    islit = int(float(islit))
    jshift = float(jshift)
    factor = float(factor)
    bfac = float(bfac)

    imhdu, = fits.open(imfile)
    spechdu, = fits.open(specfile)

    imhdu.data -= 1170.0  # remove bias
    improfile = imhdu.data[:, islit-3:islit+3].sum(axis=1)
    specprofile = spechdu.data.sum(axis=1)

    ax.plot(yarray+jshift, bfac*improfile/(1e4*tweak), label='image',
            c='r', lw=2, alpha=0.3)
    ax.plot(yarray, bfac*specprofile/(1e4*factor), label='spectrum',
            c='k', lw=0.6)

    text_pattern = 'pos #{} shift = {:.1f} factor = {:.2f} bright = {:.2f}'
    text = text_pattern.format(imid, jshift, factor/4.4, 1.0/bfac)
    ax.text(300, 0.1, text, ha='center', va='bottom', fontsize=7)

axgrid[0, 0].legend(fontsize='xx-small', loc='upper left')
axgrid[0, 0].set_xlim(0.0, 640)
axgrid[0, 0].set_ylim(0.0, 5.5)
axgrid[-1, 2].set_xlabel('pixel')
axgrid[1, 0].set_ylabel('intensity')
fig.suptitle('Alignment and flux calibration of vertical slits')
fig.set_size_inches(11, 8.5)
fig.savefig(figfile)


#+END_SRC

#+RESULTS:
[[file:/Users/will/Dropbox/SPMJAN10/reducciones/image-spec-offsets.pdf]]


*** Repeat for the horizontal slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:ID:       6CE33437-BC17-49AA-B048-5BACCBB8C99B
:END:

#+name: horizontal-image-and-fullspec
| image |    slit |  night | jslit | dj | ishift | fac | bright | bgrad |
|-------+---------+--------+-------+----+--------+-----+--------+-------|
|   165 | 166-167 | 160213 | 468.5 | 12 |     67 | 5.5 |  0.777 |   1.4 |
|   169 | 170-171 | 160213 | 468.5 | 12 |     65 | 5.3 |  0.744 |   1.4 |
|   237 | 238-239 | 160213 | 467.0 | 12 |     74 | 5.5 |  0.969 |   1.0 |
|   232 | 233-234 | 160213 | 468.5 | 12 |     75 | 5.8 |  1.000 |   1.0 |
|   226 | 227-228 | 160213 | 468.5 | 12 |     75 | 6.0 |  0.998 |     1 |
|   149 | 150-151 | 160213 | 468.0 | 12 |     70 | 5.0 |  0.825 |   1.7 |
|   154 | 155-156 | 160213 | 467.2 | 12 |     67 | 5.2 |  0.862 |   1.7 |
|   159 | 160-161 | 160213 | 467.5 | 12 |     67 | 5.4 |  0.818 |   1.7 |
|   033 | 034-035 | 150213 | 467.0 | 12 |     67 | 5.5 |  0.837 |   0.8 |
|   029 | 030-031 | 150213 | 465.2 |  6 |     76 | 6.0 |  0.847 |   0.8 |

+ [2015-08-21 Fri] I have measured the y-pixel position of the slit (=jslit=) on the images - it is roughly constant, but not quite
  + We have to be careful to use the "Image" coordinate, not the "Physical" one
+ The slit width is 150 micron for all exept =029= where it is 70 micron
  + This is reflected in the nominal pixel width of the slit, which is given in the =dj= column
  + The slit profile is not rectangular - looks more triangular, or perhaps an ellipse
+ The bias seems to have been removed, but there is a residual signal in the image+slits of 6 to 12 counts, which varies in J but not in I
  + At the J of the slit it looks to be about 9
+ It is hard to tell whether there is anything that should be removed from the spectra
  + But looking at the x-profiles of the line-free parts of the PV image, as compared with the Ha line, I think there is a residual bias of about 3
  + When multiplied by NY=1017, this gives 3051 as the value that should be subtracted from the y-summed profile
+ I have found a better way to extract the slit profile from the image:
  + Sum over a wide window that includes the /entire/ slit profile
  + But then subtract off the average of the two rows above and below this window, multiplied by the window width
  + This is equivalent to interpolating the bg underneath the slit profile
  + It seems to give better results than the previous method
+ [2015-08-22 Sat] The bright and bgrad columns can now be filled in from the calculation [[id:23506DE2-4D98-40C5-961F-4715BE7A1F55][down here]]
  + Note that *bright is the reciprocal of bfac*, which I used in the table for the vertical slits 
  + The bgrad is for a linear E-W gradient correction to the brightnesses
  + I rounded it to 1 decimal place, since it is not that well determined
+ [2015-08-25 Tue] I redid the calculation of the =bright= factors, see [[id:23506DE2-4D98-40C5-961F-4715BE7A1F55][down here]], so we are now using the =corrnorm= column of the last table
+ Also experimented with increasing bgrad from 1.5 to 1.7 for 149, 154, 159

#+header: :var table=horizontal-image-and-fullspec
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
sns.set_color_codes()

nspec = 10
nx = 625
figfile = 'image-spec-offsets.pdf'
xarray = np.arange(nx)
layout = {'left': 0.05, 'bottom': 0.07, 'right': 0.99, 'top': 0.95,
          'wspace': 0.02, 'hspace': 0.02}
fig, axgrid = plt.subplots(3, 4, sharex=True, sharey=True, gridspec_kw=layout)
tweak = 1.0
for (imid, specid, night, jslit, dj, ishift,
     factor, bright, bgrad), ax in zip(table, axgrid.flat):
    imfile = 'spm{:03d}_ardec.fits'.format(imid)
    specfile = '../{}/reducciones/spm{}_bcr.fits'.format(night, specid)
    jslit = int(float(jslit))
    dj = int(dj)
    ishift = float(ishift)
    factor = float(factor)
    bfac = 1./float(bright)

    imhdu, = fits.open(imfile)
    spechdu, = fits.open(specfile)

    imhdu.data -= 9.0  # remove residual bias
    spechdu.data -= 5.5
    # limits of slit (FWZI)
    j1, j2 = jslit-dj//2, jslit+dj//2
    improfile = imhdu.data[j1:j2, :].sum(axis=0)
    # take average profile either side of the slit
    offprofile = 0.5*(imhdu.data[j1-1, :] + imhdu.data[j2, :])
    # and subtract (multiplied by slit width) to get the pure slit profile
    improfile -= dj*offprofile
    # Now find the gradient correction
    NX = len(improfile)
    x = np.arange(NX)/NX - 0.5
    grad_corr = 1.0 - 1.24*(bgrad - 1.0)*x

    specprofile = spechdu.data.sum(axis=0)

    ax.plot(xarray-ishift, (12.0/dj)*bfac*grad_corr*improfile/(1e4*tweak),
            label='image', c='r', lw=2, alpha=0.3)
    ax.plot(xarray, bfac*grad_corr*specprofile/(1e4*factor),
            label='spectrum', c='k', lw=0.6)

    text_pattern = 'pos #{} shift = {:.1f} factor = {:.2f} bright = {:.2f}'
    text = text_pattern.format(imid, ishift, factor/5.5, 1.0/bfac)
    ax.text(300, 0.1, text, ha='center', va='bottom', fontsize=7)

axgrid[0, 0].legend(fontsize='xx-small', loc='upper left')
axgrid[0, 0].set_xlim(-80, 640)
axgrid[0, 0].set_ylim(0.0, 1.5)
axgrid[-1, 2].set_xlabel('pixel')
axgrid[1, 0].set_ylabel('intensity')
fig.suptitle('Alignment and flux calibration of horizontal slits')
fig.set_size_inches(11, 8.5)
fig.savefig(figfile)


#+END_SRC

#+RESULTS:
[[file:/Users/will/Dropbox/SPMFEB13/WesternShocks/image-spec-offsets.pdf]]




** Datasets that we will use

*** Odd slits that we don't want to forget
+ 2007 Jan
  + Some of the LL1 slits show blueshifted emission at their N end
    + spec060-oiii
    + spec055-ha
    + spec068-ha
    + spec073-ha
  + Unfortunately, most of the slits were put too far South to see this
  + The [O III] slits from 2013 Dec Orion S don't quite go far west enough to reach this, and the same is true of the Orion S slits from 2007
+ 2010 Jan
  + spm078 (Ha, [N II])
  + spm085 ([S II])
  + These are vertical slits to the W of LL2 that help fill in that region to the E of the N ends of the other vertical slits
  + They cross the N wing of the putative big bow
    + Clearly redshifted, helping establish continuity with wing seen in LL2 slits
    + Also we can measure the electron density
  + We also cross a bizarre blue-shited feature to WNW of LL2
    + Looks like a classical triangular bowshock shape in the PV diagram
+ 2013 Feb
  + spm024 (Ha, [N II])
  + This is a horizontal slit across LL2 (just N of star)
  + It shows that a blue emission layer stops just in front of the LL2 bow
+ 2013 Dec
  + There is one extra position just below LL2 - spm116
    + Unfortunately, it is low s/n
+ 2015 Feb
  + 0013 and 0003
  + More horizontal slits in the middle part
  + These are similar to the slits from Dec 2013
*** Dec 2013
+ These are in [[file:~/Dropbox/papers/LL-Objects/SPMDIC13/][file:~/Dropbox/papers/LL-Objects/SPMDIC13/]]
+ They are horizontal slits in between LL2 and Orion S
*** Feb 2015
+ These are in [[file:~/Dropbox/SPMFEB15/][file:~/Dropbox/SPMFEB15/]]
+ They are horizontal slits in between LL2 and Orion S with a new chip
*** Jan 2007 and Feb 2006
:PROPERTIES:
:ID:       CB720DCF-0A33-4C51-9A0B-932030BC0E45
:END:
+ These are the HH 505 observations in [[file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/][file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/]]
+ And also in [[file:~/Work/SPM2005/]] for the older ones
  + Not sure why the folder is called 2005 rather than 2006
  + With reduced versions of these in [[file:~/Work/SPM2007/Reduced/HH505/slits/SPMha/]]
+ They are mainly vertical, but there are a few horizontal slits
**** Original database for vertical slits
+ Taken from [[file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/jw0.csv][jw0.csv]]
+ I have removed the following columns from the table because they were constants:
  + lamrest = 6562.82
  + lamscale = 0.04375213
  + d vel =  2
  + NX = 300
  + NY = 512
  + ufiddle = 0
  + fluxfiddle = 1
|         |         RA |        Dec | dataset | lam0 | helio corr | ypixscale | jcenter | True File           |
|---------+------------+------------+---------+------+------------+-----------+---------+---------------------|
| jw0e068 | -0.6828000 |  -15.91200 |       1 | 6557 |      -13.3 |      0.62 |     316 | spec2062-ha.fits    |
| jw0e043 | -0.4308000 | -0.7920000 |       2 | 6558 |     -21.53 |     0.623 |     182 | spec324-halpha.fits |
| jw0e024 | -0.2388000 |   5.579999 |       2 | 6558 |      -21.5 |     0.623 |     183 | spec319-halpha.fits |
| jw0e022 | -0.2243999 |  -38.23200 |       1 | 6557 |     -12.91 |      0.62 |     317 | spec2038-ha.fits    |
| jw0e004 | -0.0419999 | -0.2160000 |       2 | 6558 |     -20.92 |      0.62 |     200 | spec261-halpha.fits |
| jw0w012 |   0.116399 |   3.671999 |       2 | 6558 |     -21.03 |     0.622 |     196 | spec271-halpha.fits |
| jw0w020 |   0.202799 |   3.960000 |       2 | 6558 |     -21.09 |     0.621 |     193 | spec277-halpha.fits |
| jw0w040 |  0.4019999 |   6.335999 |       2 | 6558 |     -21.15 |     0.622 |     192 | spec282-halpha.fits |
| jw0w056 |  0.5604000 |   6.515999 |       2 | 6558 |     -21.21 |     0.622 |     191 | spec287-halpha.fits |
| jw0w062 |  0.6179999 |   6.551999 |       2 | 6558 |     -21.27 |     0.619 |     189 | spec292-halpha.fits |
| jw0w086 |  0.8628000 |   7.955999 |       2 | 6558 |     -21.32 |     0.621 |     189 | spec297-halpha.fits |
| jw0w092 |  0.9227999 |  -36.21600 |       1 | 6557 |     -12.97 |      0.62 |     316 | spec2042-ha.fits    |
| jw0w122 |   1.220399 |   5.543999 |       2 | 6558 |     -21.39 |     0.619 |     187 | spec304-halpha.fits |
| jw0w143 |   1.433999 |  -35.13600 |       1 | 6557 |     -13.04 |     0.622 |     191 | spec2046-ha.fits    |
| jw0w186 |   1.863599 |  -34.77600 |       1 | 6557 |      -13.1 |     0.621 |     316 | spec2050-ha.fits    |
| jw0w238 |   2.379599 |  -14.68800 |       1 | 6557 |     -13.18 |     0.619 |     316 | spec2054-ha.fits    |
| jw0w300 |   2.996399 |  -16.27200 |       1 | 6557 |     -13.24 |     0.619 |     316 | spec2058-ha.fits    |
| jw0w323 |   3.231599 |   3.887999 |       2 | 6558 |     -21.47 |     0.623 |     184 | spec312-halpha.fits |

+ They seem to be from two different sets:
  + The 20XX-ha ones from Jan 2007
    + There are also 2022, 2076, 2081 that aren't used here
    + 2022 is a horizontal slit
    + 2076 and 2081 are [O III] Orion S slits (why did we never use these?)
  + and the XXX-halpha ones from Feb 2006
    + Unfortunately, I don't have the spmXXX-ardec.fits files for those
    + [X] Write to Teresa and see if she has them
    + An example image+slit is pp260.fits
    + Now she has sent these - they are in [[file:~/Dropbox/papers/LL-Objects/feb2006/][file:~/Dropbox/papers/LL-Objects/feb2006/]]


*** Feb 2013
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:END:
:LOGBOOK:
CLOCK: [2015-08-22 Sat 17:29]--[2015-08-22 Sat 18:29] =>  1:00
:END:
+ These are in [[file:~/Dropbox/SPMFEB13/]]
  + Either in [[file:~/Dropbox/SPMFEB13/WesternShocks/]]
  + Or in one of the date-named folders
**** WCS values 
:PROPERTIES:
:ID:       F6ED03C3-EC32-4444-9746-4E3C2A15CD63
:END:
+ These are with a different chip, and with binning of 3x2
+ Here I calculate a similar table to what I did for the [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][vertical slits]]
+ This time we have dy = 0.52 arcsec
+ The PA is within 0.5 deg of 90
  + But it does vary about 1 deg between the two nights
#+name: horizontal-all-parameters
#+header: :var intable=horizontal-image-and-fullspec
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

table = [['image', 'spectrum', 'grating',
          'RA0', 'Dec0', 'dy', 'PA',
          'airmass', 'weight', 'delta'], None]
for imid, specid, night, jslit, dj, ishift, fac, bright, bgrad in intable:
    fn = 'spm{:03d}_ardec.fits'.format(imid)
    hdu, = fits.open(fn)

    #
    # Find pixel scale along slit and position angle of slit
    #
    dRA_arcsec = hdu.header['CD1_1']*3600*np.cos(np.radians(hdu.header['CRVAL2']))
    dDEC_arcsec = hdu.header['CD2_1']*3600
    dy = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))
    grating = hdu.header['GRATING']
    airmass = hdu.header['AIRMASS']
    #
    # Find the RA and Dec of the spectral slit center
    #

    # Pixel coords of spectrum slit center on image (in FITS 1-based convention)
    # I *think* the shift along the slit goes the other way here
    i0, j0 = 0.5*(1 + hdu.header['NAXIS1']) + ishift, jslit

    # Convert to world coordinates
    wcs = WCS(hdu.header)
    # Crazy packing/unpacking required to use single scalar coords
    (RA0, Dec0), = wcs.all_pix2world([[i0, j0]], 1)

    # Test it by hand using small-patch-of-sky approximation
    c = 1./np.cos(np.radians(-5.42))
    RA1 = (hdu.header['CRVAL1']
           + c*hdu.header['CD1_1']*(i0 - hdu.header['CRPIX1'])
           + c*hdu.header['CD1_2']*(j0 - hdu.header['CRPIX2']))
    Dec1 = (hdu.header['CRVAL2']
            + hdu.header['CD2_1']*(i0 - hdu.header['CRPIX1'])
            + hdu.header['CD2_2']*(j0 - hdu.header['CRPIX2']))
    assert(abs(RA1 - RA0) < 1e-6 )
    assert(abs(Dec1 - Dec0) < 1e-6 )

    #
    # Find total weight factor, combining inter-image factor with the
    # image-to-spectrum factor
    #
    weight = (fac/5.5)*bright

    # Find linear E-W gradient to correct
    delta = -1.24*(bgrad - 1.0)

    table.append([imid, int(imid)+1, grating, 
                  '{:.5f}'.format(RA0),
                  '{:.5f}'.format(Dec0),
                  '{:.4f}'.format(dy), '{:.3f}'.format(PA),
                  '{:.2f}'.format(airmass),
                  '{:.2f}'.format(weight), '{:.2f}'.format(delta),
    ])
#+END_SRC

#+RESULTS: horizontal-all-parameters
| image | spectrum | grating |      RA0 |     Dec0 |     dy |     PA | airmass | weight | delta |
|-------+----------+---------+----------+----------+--------+--------+---------+--------+-------|
|   165 |      166 |      12 | 83.62409 | -5.44097 | 0.5248 | 90.496 |    2.05 |   0.78 | -0.50 |
|   169 |      170 |      13 | 83.62424 | -5.43831 | 0.5251 | 90.449 |    2.48 |   0.72 | -0.50 |
|   237 |      238 |      11 | 83.62752 | -5.43613 | 0.5249 | 90.421 |    1.25 |   0.97 | -0.00 |
|   232 |      233 |       9 | 83.62683 | -5.43216 | 0.5243 | 90.399 |    1.25 |   1.05 | -0.00 |
|   226 |      227 |      10 | 83.61872 | -5.42951 | 0.5252 | 90.462 |    1.28 |   1.09 | -0.00 |
|   149 |      150 |       4 | 83.63349 | -5.42399 | 0.5249 | 90.561 |    1.38 |   0.75 | -0.87 |
|   154 |      155 |       5 | 83.63366 | -5.42268 | 0.5247 | 90.579 |    1.51 |   0.81 | -0.87 |
|   159 |      160 |       9 | 83.63375 | -5.42026 | 0.5244 | 90.651 |    1.69 |   0.80 | -0.87 |
|    33 |       34 |      -4 | 83.62033 | -5.41655 | 0.5149 | 89.637 |    1.31 |   0.84 |  0.25 |
|    29 |       30 |      -4 | 83.61937 | -5.41543 | 0.5148 | 89.729 |    1.26 |   0.92 |  0.25 |


**** Inter-position brightness calibration
:PROPERTIES:
:ID:       23506DE2-4D98-40C5-961F-4715BE7A1F55
:END:
+ I have measured brightness in several parts of the image
  + Shown in table below, where *-ed columns are normalised to =226= which seems to be the best
+ There are problems with large-scale brightness gradients in some exposures
  + Particularly E-W
  + I have compared with =219= of the horizontal slits
  + =226= looks fine, but =149= has a clear spurious gradient - falling from W to E
  + =033= and =029= on the other hand have a gradient the other way
  + This is shown in the =W/E= column of the table, which shows the average ratio between the West and East normalizations
  + So we can divide the images into 3 groups:
    + Fine :: 237, 232, 226 (W/E ~= 1)
    + West bias :: 165, 169, 149, 154, 159 (W/E ~= 1.45)
    + East bias :: 033, 029 (W/E ~= 0.8)
| image |  NE |  NW |  SW |  SE |  *NE |  *NW |  *SW |  *SE | Mean          | W/E             |
|-------+-----+-----+-----+-----+------+------+------+------+---------------+-----------------|
|   165 | 507 | 435 | 434 | 160 | 0.69 | 0.87 | 0.82 | 0.54 | 0.73 +/- 0.07 | 1.39 +/- 0.13   |
|   169 | 470 | 426 | 405 | 149 | 0.64 | 0.85 | 0.76 | 0.50 | 0.69 +/- 0.08 | 1.42 +/- 0.10   |
|   237 | 685 | 485 | 491 | 267 | 0.94 | 0.97 | 0.93 | 0.89 | 0.93 +/- 0.02 | 1.04 +/- 6.5e-3 |
|   232 | 700 | 473 | 511 | 272 | 0.96 | 0.94 | 0.96 | 0.91 | 0.94 +/- 0.01 | 1.02 +/- 0.04   |
|   226 | 730 | 502 | 530 | 299 |    1 |    1 |    1 |    1 | 1             | 1               |
|   149 | 490 | 470 | 406 | 138 | 0.67 | 0.94 | 0.77 | 0.46 | 0.71 +/- 0.10 | 1.54 +/- 0.14   |
|   154 | 508 | 466 | 418 | 138 | 0.70 | 0.93 | 0.79 | 0.46 | 0.72 +/- 0.10 | 1.52 +/- 0.19   |
|   159 | 515 | 479 | 436 | 154 | 0.71 | 0.95 | 0.82 | 0.52 | 0.75 +/- 0.09 | 1.46 +/- 0.12   |
|   033 | 579 | 294 | 355 | 238 | 0.79 | 0.59 | 0.67 | 0.80 | 0.71 +/- 0.05 | 0.79 +/- 0.05   |
|   029 | 581 | 307 | 356 | 224 | 0.80 | 0.61 | 0.67 | 0.75 | 0.71 +/- 0.04 | 0.83 +/- 0.07   |
#+TBLFM: $6=$-4/730;f2::$7=$-4/502;f2::$8=$-4/530;f2::$9=$-4/299;f2::$10=vmeane($-4..$-1);f2::$11=vmeane([$7/$6, $8/$9]);f2

+ So to correct the brightness gradients, we use the following:
  + For =149=, we have brightness the same brightness as 226 in the W side, but 0.5 times the brightness in the E side
  + So we will try multiplying by a linear function =(1 + delta*(i - 0.5*NX)/NX)=
  + For this case, we want (1 + 0.5 \delta)/(1 - 0.5 \delta) = 0.5 (remember that i increases from W to E)
    + => 1 + 0.5 \delta = 0.5 - 0.25 \delta => 0.5 = -0.75 \delta => \delta = -2/3
    + This is for a case W/E = 1.54 and it should scale with (W/E - 1)
    + So we get \delta = -1.24 (W/E - 1)
+ The columns "Mean" and "W/E" get copied to columns =bfac= and =bgrad= respectively in the [[id:6CE33437-BC17-49AA-B048-5BACCBB8C99B][table above]]
+ [2015-08-25 Tue] I was not satisfied with the brightness normalizations
  + Some slits, notably 149, 154, 159 seem to be too bright in the combined image
  + So I have remeasured the brightness in a central point (the bright clump just to the W of the nose of the giant bowshock)
  + This gives slightly higher normalizations for those slits
  + *BUT* we also need to account for the affect of the \delta correction on the reference point
    + X0 = NX/2 = 312
    + From the table, the Xpix values of the reference point can be smaller or larger than that
    + So there is a further correction factor dcorr = 1 + \delta (Xpix - X0)/NX, which we have to /multiply/ the brightness norms by
    + I copied the delta values from the table [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]]
  + The result is that the corrections are closer to unity for nearly all the slits

| image | bright | Xpix |  norm | delta | dcorr | corrnorm |        |
|-------+--------+------+-------+-------+-------+----------+--------|
|   165 |    677 |  344 | 0.798 | -0.50 | 0.974 |    0.777 | 2719.5 |
|   169 |    646 |  341 | 0.762 | -0.50 | 0.977 |    0.744 |  2604. |
|   237 |    822 |  328 | 0.969 | -0.00 | 1.000 |    0.969 | 3391.5 |
|   232 |    848 |  334 |     1 | -0.00 | 1.000 |    1.000 |  3500. |
|   226 |    846 |  389 | 0.998 | -0.00 | 1.000 |    0.998 |  3493. |
|   149 |    673 |  284 | 0.794 | -0.87 | 1.039 |    0.825 | 2887.5 |
|   154 |    700 |  280 | 0.825 | -0.87 | 1.045 |    0.862 |  3017. |
|   159 |    663 |  279 | 0.782 | -0.87 | 1.046 |    0.818 |  2863. |
|   033 |    694 |  370 | 0.818 |  0.25 | 1.023 |    0.837 | 2929.5 |
|   029 |    697 |  386 | 0.822 |  0.25 | 1.030 |    0.847 | 2964.5 |
#+TBLFM: $4=$2/848;f3::$6=1 + $-1 ($3 - 312)/625 ;f3::$7=$-3 $-1; f3::$8=3500 $-1
*** Jan 2010
:LOGBOOK:
CLOCK: [2015-08-16 Sun 18:29]--[2015-08-16 Sun 19:04] =>  0:35
:END:
+ Copied files to [[file:~/Dropbox/SPMJAN10/reducciones/][~/Dropbox/SPMJAN10/reducciones/]]
+ Looking at which ones to use to see if I agree with Tere
**** WCS values and per-slit weighting
:PROPERTIES:
:ID:       6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D
:END:
+ Alba's coordinates seem to be for the center of the slit in the image+slit
+ dWav = 0.043752133846283 Ang (2 km/s)
+ dy = 0.6229 arcsec (see table below)
  + range is 0.6211 to 0.6249
+ PA does vary from slit to slit: 3.13 to 3.18
+ In both cases, over 512 pixels, the variation in PA and dy correspond to only a couple of pixels
+ Now we gather all the needed information into the following table
  + We calculate the (RA0, Dec0) of the slit center (taking into account the =jshift= values)
  + We calculate the pixel scale and PA of the slit
  + We calculate a total weight by multiplying together the inter-position and the image-to-spectrum values

#+name: vertical-all-parameters
#+header: :var intable=vertical-image-and-fullspec
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

table = [['image', 'spectrum', 'RA0', 'Dec0', 'dy', 'PA', 'weight'], None]
for imid, specid, islit, jshift, fac, bfac in intable:
    fn = 'spm{}-ardec.fits'.format(imid)
    hdu, = fits.open(fn)

    #
    # Find pixel scale along slit and position angle of slit
    #
    dRA_arcsec = hdu.header['CD1_2']*3600*np.cos(np.radians(hdu.header['CRVAL2']))
    dDEC_arcsec = hdu.header['CD2_2']*3600
    dy = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))

    #
    # Find the RA and Dec of the spectral slit center
    #

    # Pixel coords of spectrum slit center on image (in FITS 1-based convention)
    i0, j0 = islit, 0.5*(1 + hdu.header['NAXIS2']) - jshift

    # Convert to world coordinates
    wcs = WCS(hdu.header)
    # Crazy packing/unpacking required to use single scalar coords
    (RA0, Dec0), = wcs.all_pix2world([[i0, j0]], 1)

    # Test it by hand using small-patch-of-sky approximation
    c = 1./np.cos(np.radians(-5.42))
    RA1 = (hdu.header['CRVAL1']
           + c*hdu.header['CD1_1']*(i0 - hdu.header['CRPIX1'])
           + c*hdu.header['CD1_2']*(j0 - hdu.header['CRPIX2']))
    Dec1 = (hdu.header['CRVAL2']
            + hdu.header['CD2_1']*(i0 - hdu.header['CRPIX1'])
            + hdu.header['CD2_2']*(j0 - hdu.header['CRPIX2']))
    assert(abs(RA1 - RA0) < 1e-6 )
    assert(abs(Dec1 - Dec0) < 1e-6 )

    #
    # Find total weight factor, combining inter-image factor with the
    # image-to-spectrum factor
    #
    weight = (fac/4.4)/bfac

    table.append([imid, int(imid)+1,
                  '{:.5f}'.format(RA0),
                  '{:.5f}'.format(Dec0),
                  '{:.4f}'.format(dy), '{:.3f}'.format(PA),
                  '{:.4f}'.format(weight),
    ])
#+END_SRC

#+RESULTS: vertical-all-parameters
| image | spectrum |      RA0 |     Dec0 |     dy |    PA | weight |        |
|-------+----------+----------+----------+--------+-------+--------+--------|
|   202 |      203 | 83.62012 | -5.42575 | 0.6246 | 3.132 | 0.7755 | 3877.5 |
|   124 |      125 | 83.61775 | -5.42765 | 0.6222 | 3.379 | 0.4288 |  2144. |
|   206 |      207 | 83.61646 | -5.42573 | 0.6227 | 3.300 | 0.8803 | 4401.5 |
|   128 |      129 | 83.61513 | -5.42787 | 0.6231 | 3.322 | 0.3720 |  1860. |
|   133 |      134 | 83.61537 | -5.42226 | 0.6231 | 3.259 | 0.7067 | 3533.5 |
|   210 |      211 | 83.61386 | -5.42573 | 0.6229 | 3.283 | 0.9794 |  4897. |
|   137 |      138 | 83.61278 | -5.42226 | 0.6232 | 3.270 | 0.4106 |  2053. |
|   214 |      215 | 83.61140 | -5.42547 | 0.6247 | 3.132 | 0.8733 | 4366.5 |
|   145 |      146 | 83.61005 | -5.42080 | 0.6218 | 3.358 | 0.0877 |  438.5 |
|   248 |      249 | 83.60913 | -5.42673 | 0.6231 | 3.218 | 0.5523 | 2761.5 |
|   219 |      220 | 83.60811 | -5.42615 | 0.6227 | 3.331 | 0.9886 |  4943. |
|   157 |      158 | 83.60713 | -5.42289 | 0.6211 | 3.373 | 0.2354 |  1177. |
|   236 |      237 | 83.60653 | -5.42631 | 0.6233 | 3.220 | 0.8508 |  4254. |
|   240 |      241 | 83.60476 | -5.42649 | 0.6236 | 3.256 | 0.6566 |  3283. |
|   244 |      245 | 83.60297 | -5.42626 | 0.6249 | 3.201 | 0.5350 |  2675. |
|   252 |      253 | 83.60148 | -5.42675 | 0.6229 | 3.335 | 0.7314 |  3657. |
#+TBLFM: $8=5000 $-1


***** Offset along slit                                            :noexport:
:PROPERTIES:
:ID:       8685D060-12A9-4E73-B069-11D5315ED8EB
:END:
+ spm124
  + Star position is y = 270.5
  + Same star position in spec125-ha is y = 325
  + Shift of 325 - 270.5 = 54.5 pixels
+ spm137
  + Star position is y = 291
  + In spec138-ha it is y = 351
  + Shift of = 351 - 291 = 60

| spm124 | 270.5 | spec125 |   325 | 54.5 |
| spm202 |   359 | spec203 | 411.5 | 52.5 |
| spm206 |   104 | spec207 |   158 |   54 |
| spm137 |   291 | spec138 |   351 |   60 |
| spm219 | 320.5 | spec220 |   378 | 57.5 |
#+TBLFM: $5=$4 - $2

+ Unfortunately, the offset varies from spectrum to spectrum, which is odd
+ [2015-08-18 Tue] This is now calculated more rigorously [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][above]]

**** Which to use
***** Positions in Alba's set that are acceptable
:PROPERTIES:
:ID:       D625BE5F-BE3F-477A-8059-4B0AFEFEED54
:END:
202, 124, 206, 133(+), 210, 137, 214, 248(+), 219, 236, 240, 244, 252

|  ID |      |  Norm | Inverse | Bright |  Norm | Inverse |
|-----+------+-------+---------+--------+-------+---------|
| 202 | 2083 | 0.875 |   1.143 |   2087 | 0.939 |   1.065 |
| 124 | 1900 | 0.699 |   1.431 |   1879 | 0.726 |   1.377 |
| 206 | 2089 | 0.880 |   1.136 |   2101 | 0.953 |   1.049 |
| 128 | 1558 | 0.372 |   2.688 |    nan |   nan |     nan |
| 133 | 1819 | 0.622 |   1.608 |   1780 | 0.624 |   1.603 |
| 210 | 2192 | 0.979 |   1.021 |   2141 | 0.994 |   1.006 |
| 137 | 1843 | 0.645 |   1.550 |   1913 | 0.760 |   1.316 |
| 214 | 2148 | 0.937 |   1.067 |   2125 | 0.977 |   1.024 |
| 145 | 1372 | 0.193 |   5.181 |    nan |   nan |     nan |
| 248 | 1640 | 0.450 |   2.222 |   1615 | 0.455 |   2.198 |
| 219 | 2214 |     1 |       1 |   2124 | 0.976 |   1.025 |
| 157 | 1324 | 0.148 |   6.757 |    nan |   nan |     nan |
| 236 | 2100 | 0.891 |   1.122 |   2070 | 0.921 |   1.086 |
| 240 | 2143 | 0.932 |   1.073 |   2147 |     1 |       1 |
| 244 | 2080 | 0.872 |   1.147 |   2017 | 0.867 |   1.153 |
| 252 | 1792 | 0.596 |   1.678 |   1792 | 0.637 |   1.570 |
#+TBLFM: $3=($-1 - 1170)/(2214 - 1170);f3::$4=1/$-1;f3::$6=($-1 - 1170)/(2147 - 1170);f3::$7=1/$-1;f3

+ The Inverse column /used/ to agree closely with Alba's values
+ But now it does not, because I realised that the radec images have not had the bias subtracted!
+ [2015-08-17 Mon] Dones it again to include more positions - new version is in columns 2 to 4
+ Note that values from this table are used [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][above]] to calculate the slit normalizations

***** Positions in Alba's set that are bad
128(+), 101, 145, 157, 173
****** Rehabilitation of some of these positions
+ From my experience with the image-spectrum calibration, there is often a big difference between the quality of the image and that of hte spectrum
+ So we shouldn't rule out a position, just based on a poor image
+ Worth saving:
  + 128 :: slots in right next to 133
  + 145 :: goes just before 248
  + 157 :: goes before 236
+ Still terrible: 101 (no spectrum), 173 (just bad)
***** Positions over to the NE
spm078, spm085
***** Other positions omitted ny Alba
+ spm142 - no spectrum
+ spm150 - ha spec exists, but looks weak and Tere says no
+ spm154 - no spectrum
+ spm161 - same as 150 but even worse
+ spm224 - has sii spec but no ha
+ spm231 - no spectrum
**** Message from Teresa [2010-02-18 Thu]
: Acabo de terminar las reducciones de las observaciones de Enero. Al
: final nos quedamos con 16 posiciones, eliminÃ© 7 posiciones
: porque las observÃ© con muchas nubes por lo que no obtuve buenos
: resultados, lo bueno fuÃ© que en la siguiente noche pude obtener
: estas posiciones o cercanas a ellas. De cualquier manera las reduje
: por si decidimos incluirlas.
: 
: Las reducciones estan en: /fs/tungol/home0/LEEDS/teresa/SPMENE10/reducciones
: 
: incluyo tambiÃ©n la bitacora en pdf. Las posiciones que no tomÃ© en
: cuenta para hacer los mapas fueron:
: 
: No incluidas        Slit cercana o casi en la misma posiciÃ³n que la anterior
: spm128                   spm133 (se ve mucho mejor que spm128)
: spm231                   spm248
: spm150                   spm224
: spm157                   spm236
: spm173                   spm252
: spm161
: spm129                   spm133
: 
: Hice la astrometrÃ­a, las imagen+slit corregidas estÃ¡n en el directorio
: llamado "posiciones" adentro del direcotorio "reducciones"
: TambiÃ©n hice dos posiciones al Este de la regiÃ³n observada. EstÃ¡n la
: oeste de HH 505, las observÃ© en Halpha y [S II]:
: spm078 (image+slit), spm085 (image+slit). Podemos obtener la densidad
: en estas posiciones.
: 
: Para la posiciÃ³n de spm219 tomÃ© los espectros en Ha (spm220,221),
: [SII] (spm225,226) y [OIII] (spm228,229)
: Los espectros corregidos en longitud de onda los puse en:
: 
: /fs/tungol/home0/LEEDS/teresa/SPMENE10/observaciones/SPM{ha,nii,siis,siil,oiii}
: 
: DespuÃ©s de hacer todo el trabajo hice el primer intento de los mapas
: de momentos de Halpha y [NII] :D a ver que te parecen,
: todos los archivos  estan en
: /fs/tungol/home0/LEEDS/teresa/SPMENE10/observaciones:
: 
: {ha,nii}_{-100-040,-060+000,+000+060,+060+140,-020+040).wisomom-sum-fake.fits
: 
: haciendo un smooth:
: 
: {ha,nii}_{-100-040,-060+000,+000+060,+060+140,-020+040).wisomom-sum-smooth2d.fits
: 
: Hice tambiÃ©n en rangos de 20 km/s para poder hacer los mapas a color
: (no me quedarÃ³n tambiÃ©n como a ti!)
: que son los que anexo a este email.

** Making spectral maps
+ The plan is to start with a fine orthogonal RA-dec grid
  + Place all the slits onto there by looping over slit pixels and painting all the grid pixels that fall in each
  + Leave grid pixels transparent where no slit falls
+ Then do the multi-resolution thing
  + As in [[id:E1B9B2C8-1CDE-407B-B9FE-4E31144F328C][Rebinning the maps]] in orion tsquared notes
  + Which makes use of [[file:~/Work/RubinWFC3/Tsquared/rebin_utils.py][file:~/Work/RubinWFC3/Tsquared/rebin_utils.py]]
+ This should give a map with all the holes filled in at lower resolution
+ To start with we will work with the original spectra that I already have
  + Later, we should switch to the bg-subtracted and brightness-corrected ones that Alba has
*** Define the output grid
+ 1 arcsec is
  + 2.778e-4 deg declination
  + 2.765e-4 deg RA
+ We will try a grid with 0.5 arcsec pixels that is 1024 x 1024, which should comfortably enclose all of the slits
+ AR reference of the horizontal slits is 83.6158 +/- 0.0019
  + AR range of vertical slits is 83.6016 to 83.6205: 68 cos(-5.4150) = 67.7 arcsec
+ Dec reference of vertical slits is -5.4150 +/- 0.0006
  + Dec range of horizontal slits is -5.4409 to -5.4155 = 91.44 arcsec
  + Actually Dec value of the vertical slits is a bit lower now that I have taken into account the image-spectrum shift 
+ So we use
  + CRPIX1 = CRPIX2 = 256.5
  + CRVAL1 = 83.61, CRVAL2 = -5.423
  + CDELT1 = -0.5/3600, CDELT2 = 0.5/3600
  + PC1_1 = 1.0, PC1_2 = 0.0
  + PC2_1 = 0.0, PC2_2 = 1.0
+ Note that the WCS matrix should be given in arcdegrees - the translation to degrees of RA is done automatically (and it doesn't matter much anyway, since we are near the equator)

*** Test with the velocity-integrated emission
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:ID:       23C29E96-4471-454E-A463-D365731119C0
:END:
:LOGBOOK:
- Note taken on [2015-08-25 Tue 11:41] \\
  That did not help at all - we definitely need to rehabilitate slit 248
- Note taken on [2015-08-25 Tue 11:03] \\
  Added the noisy slit 145 to the list of vertical ones to drop.  I am not convinced that this will work out, since with 248 and 145 gone there is a big gap.  It may be possible to rehabilitate 248 with a bit of work - it will probably need its brightness increasing
:END:

Some positions are a bit problematic - try missing them out: 
#+name: positions-to-drop
+ 145


#+name: create-slit-map
#+header: :var ignore=positions-to-drop
#+header: :var vtab=vertical-all-parameters
#+header: :var vmin=-1000 vmax=1000 label="sum"
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

#
# First set up WCS for the output image
#

NX, NY = 1024, 1024
dRA, dDec = -0.5/3600., 0.5/3600.
RA0, Dec0 = 83.61, -5.423
w = WCS(naxis=2)
w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
w.wcs.cdelt = [dRA, dDec]
w.wcs.crval = [RA0, Dec0]
w.wcs.ctype = ['RA---TAN', 'DEC--TAN']

outimage = np.zeros((NY, NX))
outweights = np.zeros((NY, NX))

# Create world coord arrays for output image
II, JJ = np.meshgrid(np.arange(NX), np.arange(NY))
RA, Dec = w.all_pix2world(II, JJ, 0)

slit_width = 2.0                # width in arcsec of 150 micron slit

light_speed = 2.99792458e5
wavrest = 6562.7910
heliocentric_correction = 0.0   # I need to find this
vmin, vmax = float(vmin), float(vmax)
for imid, specid, ra0, dec0, dy, PA, weight in vtab:
    if int(imid) in ignore:
        continue  # drop some positions
    # Unpack floats from strings in table row
    ra0, dec0, dy, PA, weight = [float(_) for _ in (ra0, dec0, dy, PA, weight)]
    # Open H alpha slit spectrum
    spechdu, = fits.open('spec{}-ha.fits'.format(specid))

    # Create velocity array from header
    nwav, k0, wav0, dwav = [spechdu.header[kwd+'1']
                            for kwd in ('NAXIS', 'CRPIX', 'CRVAL', 'CDELT')]
    wavs = wav0 + (np.arange(nwav) - k0 + 1)*dwav
    vels = heliocentric_correction + light_speed*(wavs - wavrest)/wavrest
    # Find indices corresponding to velocity limits
    k1 = (vels < vmin).sum()
    k2 = (vels <= vmax).sum()
    print('Velocities used', vels[k1:k2])

    # Sum spectrum over all wavelengths
    profile = spechdu.data[:, k1:k2].sum(axis=1)

    # Transform output grid coords into slit frame offsets in arcsec
    # XX, YY are intermediate offset coordinates along RA, Dec axes
    XX = 3600*(RA - ra0)*np.cos(np.radians(Dec))
    YY = 3600*(Dec - dec0)
    # Precalculate geometric factors for rotation to slit frame
    c, s = np.cos(np.radians(PA)), np.sin(np.radians(PA))
    # X is ordinate perpendicular to slit
    X = XX*c - YY*s
    # Y is ordinate along slit
    Y = YY*c - XX*s

    # Mask for all output pixels that fall in the slit
    slitmask = abs(X) <= 0.5*slit_width
    # cycle over all slit y pixels
    for j, intensity in enumerate(profile):
        # Offset from slit center
        y = (j - 255.5)*dy
        # Mask for output pixels that fall in this slit pixel
        pixmask = slitmask & (abs(Y - y) <= 0.5*dy)
        # Fill in the output intensity and weight arrays
        outimage[pixmask] += intensity
        outweights[pixmask] += weight

# Save everything as different images in a single fits file:
# 1. The sum of the raw slits 
# 2. The weights
# 3. The slits normalized by the weights
fits.HDUList([
    fits.PrimaryHDU(),
    fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
    fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
    fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
    ]).writeto('all-vert-{}.fits'.format(label), clobber=True)


#+END_SRC

#+RESULTS: create-slit-map
#+begin_example
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
#+end_example

#+RESULTS:

+ The first image in the file is what can be used to combine with more data, for instance the horizontal slits
+ The third image is what should be used in the rebinning process (together with the second image, the weights)

This shows the scaled image in ds9
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-sum.fits[3]
#+END_SRC


*** Repeat the spectral map for the horizontal slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:ID:       60833550-A462-4F18-86DE-895625FF3E7A
:END:
+ We can't use the same program as for the vertical slits because the table has extra columns
  + In particular, it has the \delta parameter to account for the linear brightness correction along the slit
+ Also, the spectra are organised differently (wavelength along y-axis)
+ So we need to copy and modify the program
+ [3/3] Other changes to the program:
  + [X] Remove hardcoding of slit length in pixels (now NY)
  + [X] Correct for \delta factor
    + We should actually apply this to the weights, which would no longer be constant for the entire slit
    + Except, that I don't understand the reason for the gradient correction
    + But I have done it like that anyhow
  + [X] change sign of offset along slit

#+name: create-horizontal-slit-map
#+header: :var htab=horizontal-all-parameters
#+header: :var vmin=-1000 vmax=1000 label="sum"
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

#
# First set up WCS for the output image
#

NX, NY = 1024, 1024
dRA, dDec = -0.5/3600., 0.5/3600.
RA0, Dec0 = 83.61, -5.423
w = WCS(naxis=2)
w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
w.wcs.cdelt = [dRA, dDec]
w.wcs.crval = [RA0, Dec0]
w.wcs.ctype = ['RA---TAN', 'DEC--TAN']

outimage = np.zeros((NY, NX))
outweights = np.zeros((NY, NX))

# Create world coord arrays for output image
II, JJ = np.meshgrid(np.arange(NX), np.arange(NY))
RA, Dec = w.all_pix2world(II, JJ, 0)

slit_width = 2.0                # width in arcsec of 150 micron slit

light_speed = 2.99792458e5
wavrest = 6562.7910
heliocentric_correction = 0.0   # I need to find this
vmin, vmax = float(vmin), float(vmax)
for imid, specid, _, ra0, dec0, dy, PA, _, weight, delta in htab:
    # Unpack floats from strings in table row
    ra0, dec0, dy, PA, weight, delta = [float(_) for _ in (ra0, dec0, dy, PA, weight, delta)]
    # Open H alpha slit spectrum
    spechdu, = fits.open('spec{:03d}-ha.fits'.format(specid))

    # Create velocity array from header
    nwav, k0, wav0, dwav = [spechdu.header[kwd+'2']
                            for kwd in ('NAXIS', 'CRPIX', 'CRVAL', 'CDELT')]
    wavs = wav0 + (np.arange(nwav) - k0 + 1)*dwav
    vels = heliocentric_correction + light_speed*(wavs - wavrest)/wavrest
    # Find indices corresponding to velocity limits
    k1 = (vels < vmin).sum()
    k2 = (vels <= vmax).sum()
    # print('Velocities used', vels[k1:k2])

    # Sum spectrum over all wavelengths
    profile = spechdu.data[k1:k2, :].sum(axis=0)

    NY = spechdu.header['NAXIS1']
    yy = np.arange(NY)/NY - 0.5
    grad_corr = 1.0 + delta*yy


    # Transform output grid coords into slit frame offsets in arcsec
    # XX, YY are intermediate offset coordinates along RA, Dec axes
    XX = 3600*(RA - ra0)*np.cos(np.radians(Dec))
    YY = 3600*(Dec - dec0)
    # Precalculate geometric factors for rotation to slit frame
    c, s = np.cos(np.radians(PA)), np.sin(np.radians(PA))
    # X is ordinate perpendicular to slit
    X = XX*c - YY*s
    # Y is ordinate along slit
    Y = -(YY*c - XX*s)

    # Mask for all output pixels that fall in the slit
    slitmask = abs(X) <= 0.5*slit_width
    # cycle over all slit y pixels
    for j, (intensity, gcorr) in enumerate(zip(profile, grad_corr)):
        # Offset from slit center
        y = (j - 0.5*(NY-1))*dy
        # Mask for output pixels that fall in this slit pixel
        pixmask = slitmask & (abs(Y - y) <= 0.5*dy)
        # Fill in the output intensity and weight arrays
        outimage[pixmask] += intensity
        outweights[pixmask] += weight/gcorr

# Save everything as different images in a single fits file:
# 1. The sum of the raw slits 
# 2. The weights
# 3. The slits normalized by the weights
fits.HDUList([
    fits.PrimaryHDU(),
    fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
    fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
    fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
    ]).writeto('all-horiz-{}.fits'.format(label), clobber=True)


#+END_SRC

#+RESULTS: create-horizontal-slit-map

This shows the scaled image in ds9
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-horiz-sum.fits[3]
#+END_SRC


*** TODO Correction for heliocentric velocity
+ [2015-08-23 Sun] I haven't done this yet
+ I have it in a table for the 2013 observations, but need to calculate it for the others
+ Plan is to base on what I did before:
  + For Keck spectra [[id:1772B088-D07A-4228-95D4-14F9C3529EC1][here]]
  + And for HST [[id:5D00EFD4-5F66-4075-B89D-1AFCF3A73B70][here]]

*** Try to use different velocity ranges
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:END:

+ It would be more efficient to do these all at the sane time, but for the time being I will do them separately
+ Although the noisiest slit looked fine on the integrated maps, it makes a mess of the velocity channels where the emission is faint

#+name: noisy-slits
+ 145

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-blue.fits[3]
#+END_SRC

+ Try some blue wing 20 km/s channels

+ And some line core channels
#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30.fits[3]
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50.fits[3]
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70.fits[3]
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-r30.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 50000
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-r10.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 15000
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b10.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 6000
#+END_SRC


#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30-bin016.fits['scaled']
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50-bin016.fits['scaled']
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70-bin016.fits['scaled']
#+END_SRC


+ Display the multigrid smoothed channel maps
#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70-multibin.fits
xpaset -p ds9 scale linear
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-r30-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 50000
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-r10-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 15000
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b10-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 6000
#+END_SRC




*** Combine both the horizontal and vertical slits
:PROPERTIES:
:dir:      ~/Dropbox/OrionWest
:END:

#+BEGIN_SRC python
from astropy.io import fits
scale = 1.8
horiz = fits.open('../SPMFEB13/WesternShocks/all-horiz-sum.fits')
vert = fits.open('../SPMJAN10/reducciones/all-vert-sum.fits')
horiz['slits'].data += vert['slits'].data/scale
horiz['weight'].data += vert['weight'].data
horiz['scaled'].data = horiz['slits'].data/horiz['weight'].data
horiz.writeto('all-slits-sum.fits', clobber=True)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum.fits[3]
#+END_SRC


+ Note that we have to explicitly set the working directory for this to work
  + It is not enough that =dir= is set for this subtree
#+RESULTS:
: Saving all-slits-sum-bin001.fits
: Saving all-slits-sum-bin002.fits
: Saving all-slits-sum-bin004.fits
: Saving all-slits-sum-bin008.fits
: Saving all-slits-sum-bin016.fits
: Saving all-slits-sum-bin032.fits


#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum-bin032.fits['scaled']
#+END_SRC


Now we do the multiresolution maps for the combined data.  For the moment, just the spectrally integrated emission

#+name: just-integrated
+ sum

We need to extend the largest pixels used up to 32x32 in order to fill in all the big gaps between the horizontal slits 
#+name: minweights-extended
|   1 |   2 |   4 |   8 |  16 |  32 |
| 2.0 | 2.0 | 2.0 | 2.0 | 2.0 | 4.0 |

We can use the =imscale= parameter to adjust the resolution of the map.  If =imscale= is larger then we need a higher total flux for a pixel to be accepted, so we will end up with larger pixels 

#+RESULTS:
: .+..+..+..+..+..+..+..+..+..+..+..+.
: Channel sum
: Binning 32 - pixels used 217088
: Binning 16 - pixels used 183296
: Binning 8 - pixels used 76224
: Binning 4 - pixels used 6448
: Binning 2 - pixels used 16
: Binning 1 - pixels used 0

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum-multibin.fits
#+END_SRC

** The multigrid smoothing method
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:END:

#+name: multi-smooth
#+BEGIN_SRC python
import sys
sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
from rebin_utils import downsample, oversample
from astropy.io import fits

nlist = [1, 2, 4, 8, 16, 32]

infile = 'all-{}-{}.fits'.format(slits, label)

hdulist = fits.open(infile)
hdr = hdulist['scaled'].header
im = hdulist['scaled'].data
w = hdulist['weight'].data
m = w > 0.0

for n in nlist:
    im[~m] = 0.0
    outfile = infile.replace('.fits', '-bin{:03d}.fits'.format(n))
    print('Saving', outfile)
    # Save both the scaled image and the weights, but at the full resolution
    fits.HDUList([
        fits.PrimaryHDU(),
        fits.ImageHDU(data=oversample(im, n), header=hdr, name='scaled'),
        fits.ImageHDU(data=oversample(w, n), header=hdr, name='weight'),
    ]).writeto(outfile, clobber=True)
    # Now do the rebinning by a factor of two
    [im,], m, w = downsample([im,], m, weights=w)

#+END_SRC

#+RESULTS: multi-smooth
: Saving all-vert-sum-bin001.fits
: Saving all-vert-sum-bin002.fits
: Saving all-vert-sum-bin004.fits
: Saving all-vert-sum-bin008.fits
: Saving all-vert-sum-bin016.fits
: Saving all-vert-sum-bin032.fits

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-sum-bin016.fits['scaled']
#+END_SRC

+ Unfortunately, the weights increase a lot with the binning - more than they ought to.
+ The problem is that the pixels at the finest grid levels are not independent, since many of them come from the same pixel of the slit spectrum
+ However, the algorithm does not know this and so adds them up when it rebins to the next coarser grid
+ This will be a problem if we want to combine the different levels and impose a minimum weight
  + An easy solution would be to have the minimum weight vary per level

#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
nlist = [1, 2, 4, 8, 16]
minweights = [0.5, 1.0, 2.0, 2.0, 2.0, 2.0]
outim = np.zeros((1024, 1024))
for n, minw in reversed(list(zip(nlist, minweights))):
    fn = 'all-vert-sum-bin{:03d}.fits'.format(n)
    hdulist = fits.open(fn)
    im = hdulist['scaled'].data
    hdr = hdulist['scaled'].header
    w = hdulist['weight'].data
    m = w*im >= minw*1e5
    outim[m] = im[m]
fits.PrimaryHDU(header=hdr, data=outim).writeto('all-vert-sum-multibin.fits', clobber=True)
#+END_SRC


And here is a version for the velocity channels

#+name: vel-channels
+ r30
+ r10
+ b10
+ b30
+ b50
+ b70


#+name: minweights-standard
|   1 |   2 |   4 |   8 |  16 |
| 0.5 | 1.0 | 2.0 | 2.0 | 2.0 |

#+name: multigrid-combine
#+header: :var labels=vel-channels slits="vert" wtab=minweights-standard imscale=1000
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
nlist, minweights = wtab
outim = np.zeros((1024, 1024))
for label in labels:
    print('.+.'*12)
    print('Channel', label)
    for n, minw in reversed(list(zip(nlist, minweights))):
        fn = 'all-{}-{}-bin{:03d}.fits'.format(slits, label, n)
        hdulist = fits.open(fn)
        im = hdulist['scaled'].data
        hdr = hdulist['scaled'].header
        w = hdulist['weight'].data
        m = w*im >= minw*imscale
        print('Binning', n, '- pixels used', m.sum())
        outim[m] = im[m]
    fits.PrimaryHDU(header=hdr, data=outim).writeto(
        'all-{}-{}-multibin.fits'.format(slits, label), clobber=True)
#+END_SRC

#+RESULTS: multigrid-combine
#+begin_example
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel r30
Binning 16 - pixels used 101120
Binning 8 - pixels used 86400
Binning 4 - pixels used 62144
Binning 2 - pixels used 44500
Binning 1 - pixels used 35532
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel r10
Binning 16 - pixels used 100608
Binning 8 - pixels used 86144
Binning 4 - pixels used 61968
Binning 2 - pixels used 44408
Binning 1 - pixels used 35471
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b10
Binning 16 - pixels used 99840
Binning 8 - pixels used 82112
Binning 4 - pixels used 39872
Binning 2 - pixels used 21452
Binning 1 - pixels used 6119
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b30
Binning 16 - pixels used 98560
Binning 8 - pixels used 72832
Binning 4 - pixels used 22928
Binning 2 - pixels used 8888
Binning 1 - pixels used 2342
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b50
Binning 16 - pixels used 98048
Binning 8 - pixels used 69888
Binning 4 - pixels used 20272
Binning 2 - pixels used 7752
Binning 1 - pixels used 3025
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b70
Binning 16 - pixels used 95744
Binning 8 - pixels used 61568
Binning 4 - pixels used 12800
Binning 2 - pixels used 3424
Binning 1 - pixels used 1135
#+end_example


** Coordinates of the slits
+ Data received from Alba [2015-08-11 Tue]

*** Description from Alba
: Todos los datos estÃ¡n en:
: /fs/posgrado01/other0/albafm/WesternShocks/3.CuboWS/0.Datos
: Diferencio entre especros e imagenes y luego entre los del 2010 (verticales) y
: 2013 (horizontales)
: Todos los espectros tienen la sustraccion del continuo (*nc*) y los del 2010
: ademÃ¡s tiene el factor de calidad (aplicado entre ellos y a todos los de esa
: campaÃ±a de observacion, son *cc*fits)
: 
: Por ultimo te adjunto tabla las coordenadas de cada posicion de las rendijas.



*** Brightness correction factors
+ The 2010 data in =3.CuboWS/0.Datos= are =.nc.cc.= have already had this applied
+ The prior stage (just =.nc.=) is in =2.Datos2010/1.PreparandoDatos/1.SustraccionContinuo=
+ The factors are in [[file:/ssh:nil:/fs/posgrado01/other0/albafm/WesternShocks/2.Datos2010/1.PreparandoDatos/2.IgualandoCalidad/intensidades.dat][intensidades.dat]]
  + Transposed version of this table below
  + The factors multiply the observed intensities
+ The 2013 data don't seem to have any brightness correction

| Imagen | I. original | I. corregida |  Factor |
|--------+-------------+--------------+---------|
|    101 |     2149.52 |      2180.37 | 1.01435 |
|    124 |     1936.37 |      2180.37 | 1.12601 |
|    128 |     1567.50 |      2180.37 | 1.39099 |
|    133 |     1814.61 |      2180.37 | 1.20156 |
|    137 |     1939.18 |      2180.37 | 1.12438 |
|    145 |     1361.85 |      2180.37 | 1.60103 |
|    157 |     1323.03 |      2180.37 | 1.64801 |
|    173 |     1249.18 |      2180.37 | 1.74544 |
|    202 |     2170.67 |      2180.37 | 1.00447 |
|    206 |     2169.70 |      2180.37 | 1.00492 |
|    210 |     2211.48 |      2180.37 | 0.98594 |
|    214 |     2231.37 |      2180.37 | 0.97715 |
|    219 |     2226.34 |      2180.37 | 0.97935 |
|    236 |     2184.94 |      2180.37 | 0.99791 |
|    240 |     2186.48 |      2180.37 | 0.99720 |
|    244 |     2150.31 |      2180.37 | 1.01398 |
|    248 |     1632.71 |      2180.37 | 1.33543 |
|    252 |     1816.34 |      2180.37 | 1.20042 |

*** HORIZONTALES 2013

#+name: horizontal-slits
| imagen | Espectro |                 AR |                DEC |
|--------+----------+--------------------+--------------------|
| spm165 | spec166  |            83.6141 |            -5.4409 |
| spm169 | spec170  |            83.6146 |            -5.4382 |
| spm237 | spec238  |            83.6166 |            -5.4361 |
| spm232 | spec233  |            83.6157 |            -5.4321 |
| spm226 | spec227  |            83.6076 |            -5.4294 |
| spm149 | spec150  |            83.6231 |            -5.4239 |
| spm154 | spec155  |            83.6237 |            -5.4226 |
| spm159 | spec160  |            83.6238 |            -5.4201 |
| spm033 | spec034  |            83.6107 |            -5.4165 |
| spm029 | spec030  |            83.6084 |            -5.4155 |
|--------+----------+--------------------+--------------------|
|        |          | 83.6158 +/- 0.0019 | -5.4275 +/- 0.0029 |
#+TBLFM: @12$3..@12$4=vmeane(@I..@II);f4

					
					
*** VERTICALES 2010
+ From the region file [[file:/ssh:nil:/fs/posgrado01/other0/albafm/WesternShocks/3.CuboWS/1.Posiciones/pos_todas.reg][pos_todas.reg]] it looks like the PA = 3.03 deg

#+name: vertical-slits
| imagen | Espectro |                 AR |                DEC |  Factor |
|--------+----------+--------------------+--------------------+---------|
| spm252 | spec253  |            83.6016 |            -5.4149 | 1.20042 |
| spm173 | spec174  |            83.6020 |            -5.4108 | 1.74544 |
| spm244 | spec245  |            83.6031 |            -5.4152 | 1.01398 |
| spm240 | spec241  |            83.6053 |            -5.4153 | 0.99720 |
| spm236 | spec237  |            83.6071 |            -5.4155 | 0.99791 |
| spm157 | spec158  |            83.6078 |            -5.4118 | 1.64801 |
| spm219 | spec220  |            83.6087 |            -5.4163 | 0.97935 |
| spm248 | spec249  |            83.6091 |            -5.4150 | 1.33543 |
| spm145 | spec146  |            83.6106 |            -5.4109 | 1.60103 |
| spm214 | spec215  |            83.6119 |            -5.4160 | 0.97715 |
| spm137 | spec138  |            83.6133 |            -5.4120 | 1.12438 |
| spm210 | spec211  |            83.6143 |            -5.4163 | 0.98594 |
| spm101 | spec102  |            83.6149 |            -5.4177 | 1.01435 |
| spm128 | spec129  |            83.6156 |            -5.4181 | 1.39099 |
| spm133 | spec134  |            83.6159 |            -5.4123 | 1.20156 |
| spm206 | spec207  |            83.6171 |            -5.4165 | 1.00492 |
| spm124 | spec125  |            83.6184 |            -5.4183 | 1.12601 |
| spm202 | spec203  |            83.6205 |            -5.4167 | 1.00447 |
|--------+----------+--------------------+--------------------+---------|
|        |          | 83.6110 +/- 0.0014 | -5.4150 +/- 0.0006 |         |
#+TBLFM: @20$3..@20$4=vmeane(@I..@II);f4


* Modifying org export to include header arguments                 :noexport:
Based on http://kitchingroup.cheme.cmu.edu/blog/2014/09/22/Showing-what-data-went-into-a-code-block-on-export/


** This is all copied from John Kitchin's page
Here is how we can get a list of the table-names indicating their name or that they are results (results are enclosed in ()).

#+BEGIN_SRC emacs-lisp :results list
(org-element-map (org-element-parse-buffer) 'table
  (lambda (element)     
    (or (org-element-property :name element) (org-element-property :results element))))
#+END_SRC

#+RESULTS:
- rgb-limits-nii-core
- rgb-limits-ha-core
- rgb-limits-ha-wide-blue
- rgb-limits-nii-wide-blue
- rgb-limits-ha-near-red
- rgb-limits-ha-wide-red
- rgb-limits-nii-wide-red
- ("")
- ("observational-parameters")
- ("more-observational-parameters")
- vertical-image-and-fullspec
- horizontal-image-and-fullspec
- ("horizontal-all-parameters")
- ("vertical-all-parameters")
- minweights-extended
- minweights-standard
- horizontal-slits
- vertical-slits

Similarly, here is the list of parameters for each block.

#+BEGIN_SRC emacs-lisp :results list
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (element)     
    (org-element-property :parameters element)))
#+END_SRC

#+RESULTS:
- :results verbatim
- :return figfile :results file
- :eval no :tangle fov-with-slits.py
- :eval no
- :tangle clean_ajustes_data.py :eval no
- :results verbatim
- :return outtab
- :results file :return figfile
- :results verbatim
- :results output verbatim
- :results output verbatim
- :tangle no
- :exports code :results verbatim
- :return outtab
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :exports code :results verbatim
- :results silent
- :results silent
- :results verbatim
- :results verbatim
- :results silent
- :exports code
- :results output verbatim
- :results verbatim
- :results silent
- :results verbatim
- :results silent
- :results silent :var DS9="ds9"
- :tangle display-vel-spectra.sh
- :tangle test-sh-args.sh
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results verbatim
- :results silent
- :results silent
- :return outtab
- :results output
- :exports code :results verbatim
- :exports code :results verbatim
- :results silent
- :results silent
- :results silent
- :results silent
- :results verbatim
- :results verbatim
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results list
- :results list
- :results list
- :results list


** My attempt to extend it to '#+header:' elements
#+BEGIN_SRC emacs-lisp :results list
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (element)
  (org-element-property :header element)))
#+END_SRC

#+RESULTS:
- (":var SPECIES=\"nii\" SUFFIX=\"core\" STRETCH=\"linear\"" ":var LIMTAB=rgb-limits-nii-core" ":var RANGES=\"+030+050 +010+030 -010+010\"")
- (":var table=vertical-image-and-fullspec")
- (":var table=horizontal-image-and-fullspec")
- (":var intable=horizontal-image-and-fullspec")
- (":var intable=vertical-image-and-fullspec")
- (":var vmin=-1000 vmax=1000 label=\"sum\"" ":var vtab=vertical-all-parameters" ":var ignore=positions-to-drop")
- (":var vmin=-1000 vmax=1000 label=\"sum\"" ":var htab=horizontal-all-parameters")
- (":var labels=vel-channels slits=\"vert\" wtab=minweights-standard imscale=1000")



** And to named plain lists
#+BEGIN_SRC emacs-lisp :results list
(org-element-map (org-element-parse-buffer) 'plain-list
  (lambda (element)     
    (or (org-element-property :name element) (org-element-property :results element))))
#+END_SRC

#+RESULTS:
- positions-to-drop
- noisy-slits
- just-integrated
- vel-channels
- ("")
- ("")
- ("")
- ("")

  
** Now my version of Kitchin's output filters

#+BEGIN_SRC emacs-lisp
(defun ox-mrkup-filter-table (text back-end info)
  (let ((tblname (pop tblnames)))
    (message "tblname is \"%s\"" tblname)
    ; pop does not remove nil from the list, so we do it here.
    (when (null tblname) (setq tblnames (cdr tblnames)))
    (cond
     ((listp tblname)  ; from results
      (concat (format "<br><pre class=\"example\">Results table name: %s</pre>" (car tblname)) text))
     ((null tblname)   ; no name
      text)
     (t ; everything else
      (concat (format "<br><pre class=\"example\">Table name: %s</pre>" tblname) text)))))

(defun ox-mrkup-filter-plain-list (text back-end info)
  (let ((listname (pop listnames)))
    (message "listname is \"%s\"" listname)
    ; pop does not remove nil from the list, so we do it here.
    (when (null listname) (setq listnames (cdr listnames)))
    (cond
     ((null listname)   ; no name
      text)
     (t ; everything else
      (concat (format "<br><pre class=\"example\">List name: %s</pre>" listname) text)))))

(defun ox-mrkup-filter-src-block (text back-end info)
  (let ((params (pop src-params))
        (hparams (pop hdr-params))
        (lang (pop src-langs)))
    (when (null params) (setq src-params (cdr src-params)))
    (when (null hparams) (setq hdr-params (cdr hdr-params)))
    (if params  
        (concat (format "<pre class=\"example\">Language = %s\nParameters = %s\nHeader = %s</pre>" lang params hparams) text)
      text)))

;; preprocess to get table names, src parameters and languages.
(let ((tblnames (org-element-map (org-element-parse-buffer) 'table
                  (lambda (element)     
                    (or (org-element-property :name element)                    
                        (org-element-property :results element)))))

      (listnames (org-element-map (org-element-parse-buffer) 'plain-list
                  (lambda (element)     
                    (org-element-property :name element))))

      (src-params (org-element-map (org-element-parse-buffer) 'src-block
                    (lambda (element)     
                      (org-element-property :parameters element))))

      (hdr-params (org-element-map (org-element-parse-buffer) 'src-block
                    (lambda (element)     
                      (org-element-property :header element))))

      (src-langs (org-element-map (org-element-parse-buffer) 'src-block
                   (lambda (element)     
                     (org-element-property :language element))))

      ;; register the filters
      (org-export-filter-table-functions '(ox-mrkup-filter-table))
;;      (org-export-filter-plain-list-functions '(ox-mrkup-filter-plain-list))
      (org-export-filter-src-block-functions '(ox-mrkup-filter-src-block)))

  ;; and export the result
  (browse-url (org-export-to-file 'html "alba-orion-west.html")))
#+END_SRC

#+RESULTS:
: #<process open alba-orion-west.html>

